/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 1.10.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.kathra.harbor.client.api;

import org.kathra.harbor.client.ApiCallback;
import org.kathra.harbor.client.ApiClient;
import org.kathra.harbor.client.ApiException;
import org.kathra.harbor.client.ApiResponse;
import org.kathra.harbor.client.Configuration;
import org.kathra.harbor.client.Pair;
import org.kathra.harbor.client.ProgressRequestBody;
import org.kathra.harbor.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.kathra.harbor.client.model.RobotAccount;
import org.kathra.harbor.client.model.RobotAccountCreate;
import org.kathra.harbor.client.model.RobotAccountPostRep;
import org.kathra.harbor.client.model.RobotAccountUpdate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RobotAccountApi {
    private ApiClient apiClient;

    public RobotAccountApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RobotAccountApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for projectsProjectIdRobotsGet
     * @param projectId Relevant project ID. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdRobotsGetCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/robots"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdRobotsGetValidateBeforeCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdRobotsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdRobotsGetCall(projectId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all robot accounts of specified project
     * Get all robot accounts of specified project
     * @param projectId Relevant project ID. (required)
     * @return List&lt;RobotAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<RobotAccount> projectsProjectIdRobotsGet(Long projectId) throws ApiException {
        ApiResponse<List<RobotAccount>> resp = projectsProjectIdRobotsGetWithHttpInfo(projectId);
        return resp.getData();
    }

    /**
     * Get all robot accounts of specified project
     * Get all robot accounts of specified project
     * @param projectId Relevant project ID. (required)
     * @return ApiResponse&lt;List&lt;RobotAccount&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<RobotAccount>> projectsProjectIdRobotsGetWithHttpInfo(Long projectId) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdRobotsGetValidateBeforeCall(projectId, null, null);
        Type localVarReturnType = new TypeToken<List<RobotAccount>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all robot accounts of specified project (asynchronously)
     * Get all robot accounts of specified project
     * @param projectId Relevant project ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdRobotsGetAsync(Long projectId, final ApiCallback<List<RobotAccount>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdRobotsGetValidateBeforeCall(projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<RobotAccount>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdRobotsPost
     * @param projectId Relevant project ID. (required)
     * @param robot Request body of creating a robot account. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdRobotsPostCall(Long projectId, RobotAccountCreate robot, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = robot;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/robots"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdRobotsPostValidateBeforeCall(Long projectId, RobotAccountCreate robot, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdRobotsPost(Async)");
        }
        
        // verify the required parameter 'robot' is set
        if (robot == null) {
            throw new ApiException("Missing the required parameter 'robot' when calling projectsProjectIdRobotsPost(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdRobotsPostCall(projectId, robot, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a robot account for project
     * Create a robot account for project
     * @param projectId Relevant project ID. (required)
     * @param robot Request body of creating a robot account. (required)
     * @return RobotAccountPostRep
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RobotAccountPostRep projectsProjectIdRobotsPost(Long projectId, RobotAccountCreate robot) throws ApiException {
        ApiResponse<RobotAccountPostRep> resp = projectsProjectIdRobotsPostWithHttpInfo(projectId, robot);
        return resp.getData();
    }

    /**
     * Create a robot account for project
     * Create a robot account for project
     * @param projectId Relevant project ID. (required)
     * @param robot Request body of creating a robot account. (required)
     * @return ApiResponse&lt;RobotAccountPostRep&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RobotAccountPostRep> projectsProjectIdRobotsPostWithHttpInfo(Long projectId, RobotAccountCreate robot) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdRobotsPostValidateBeforeCall(projectId, robot, null, null);
        Type localVarReturnType = new TypeToken<RobotAccountPostRep>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a robot account for project (asynchronously)
     * Create a robot account for project
     * @param projectId Relevant project ID. (required)
     * @param robot Request body of creating a robot account. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdRobotsPostAsync(Long projectId, RobotAccountCreate robot, final ApiCallback<RobotAccountPostRep> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdRobotsPostValidateBeforeCall(projectId, robot, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RobotAccountPostRep>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdRobotsRobotIdDelete
     * @param projectId Relevant project ID. (required)
     * @param robotId The ID of robot account. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdRobotsRobotIdDeleteCall(Long projectId, Long robotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/robots/{robot_id}"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "robot_id" + "\\}", apiClient.escapeString(robotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdRobotsRobotIdDeleteValidateBeforeCall(Long projectId, Long robotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdRobotsRobotIdDelete(Async)");
        }
        
        // verify the required parameter 'robotId' is set
        if (robotId == null) {
            throw new ApiException("Missing the required parameter 'robotId' when calling projectsProjectIdRobotsRobotIdDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdRobotsRobotIdDeleteCall(projectId, robotId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete the specified robot account
     * Delete the specified robot account
     * @param projectId Relevant project ID. (required)
     * @param robotId The ID of robot account. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void projectsProjectIdRobotsRobotIdDelete(Long projectId, Long robotId) throws ApiException {
        projectsProjectIdRobotsRobotIdDeleteWithHttpInfo(projectId, robotId);
    }

    /**
     * Delete the specified robot account
     * Delete the specified robot account
     * @param projectId Relevant project ID. (required)
     * @param robotId The ID of robot account. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> projectsProjectIdRobotsRobotIdDeleteWithHttpInfo(Long projectId, Long robotId) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdRobotsRobotIdDeleteValidateBeforeCall(projectId, robotId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete the specified robot account (asynchronously)
     * Delete the specified robot account
     * @param projectId Relevant project ID. (required)
     * @param robotId The ID of robot account. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdRobotsRobotIdDeleteAsync(Long projectId, Long robotId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdRobotsRobotIdDeleteValidateBeforeCall(projectId, robotId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdRobotsRobotIdGet
     * @param projectId Relevant project ID. (required)
     * @param robotId The ID of robot account. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdRobotsRobotIdGetCall(Long projectId, Long robotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/robots/{robot_id}"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "robot_id" + "\\}", apiClient.escapeString(robotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdRobotsRobotIdGetValidateBeforeCall(Long projectId, Long robotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdRobotsRobotIdGet(Async)");
        }
        
        // verify the required parameter 'robotId' is set
        if (robotId == null) {
            throw new ApiException("Missing the required parameter 'robotId' when calling projectsProjectIdRobotsRobotIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdRobotsRobotIdGetCall(projectId, robotId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Return the infor of the specified robot account.
     * Return the infor of the specified robot account.
     * @param projectId Relevant project ID. (required)
     * @param robotId The ID of robot account. (required)
     * @return RobotAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RobotAccount projectsProjectIdRobotsRobotIdGet(Long projectId, Long robotId) throws ApiException {
        ApiResponse<RobotAccount> resp = projectsProjectIdRobotsRobotIdGetWithHttpInfo(projectId, robotId);
        return resp.getData();
    }

    /**
     * Return the infor of the specified robot account.
     * Return the infor of the specified robot account.
     * @param projectId Relevant project ID. (required)
     * @param robotId The ID of robot account. (required)
     * @return ApiResponse&lt;RobotAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RobotAccount> projectsProjectIdRobotsRobotIdGetWithHttpInfo(Long projectId, Long robotId) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdRobotsRobotIdGetValidateBeforeCall(projectId, robotId, null, null);
        Type localVarReturnType = new TypeToken<RobotAccount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return the infor of the specified robot account. (asynchronously)
     * Return the infor of the specified robot account.
     * @param projectId Relevant project ID. (required)
     * @param robotId The ID of robot account. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdRobotsRobotIdGetAsync(Long projectId, Long robotId, final ApiCallback<RobotAccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdRobotsRobotIdGetValidateBeforeCall(projectId, robotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RobotAccount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdRobotsRobotIdPut
     * @param projectId Relevant project ID. (required)
     * @param robotId The ID of robot account. (required)
     * @param robot Request body of enable/disable a robot account. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdRobotsRobotIdPutCall(Long projectId, Long robotId, RobotAccountUpdate robot, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = robot;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/robots/{robot_id}"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "robot_id" + "\\}", apiClient.escapeString(robotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdRobotsRobotIdPutValidateBeforeCall(Long projectId, Long robotId, RobotAccountUpdate robot, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdRobotsRobotIdPut(Async)");
        }
        
        // verify the required parameter 'robotId' is set
        if (robotId == null) {
            throw new ApiException("Missing the required parameter 'robotId' when calling projectsProjectIdRobotsRobotIdPut(Async)");
        }
        
        // verify the required parameter 'robot' is set
        if (robot == null) {
            throw new ApiException("Missing the required parameter 'robot' when calling projectsProjectIdRobotsRobotIdPut(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdRobotsRobotIdPutCall(projectId, robotId, robot, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update status of robot account.
     * Used to disable/enable a specified robot account.
     * @param projectId Relevant project ID. (required)
     * @param robotId The ID of robot account. (required)
     * @param robot Request body of enable/disable a robot account. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void projectsProjectIdRobotsRobotIdPut(Long projectId, Long robotId, RobotAccountUpdate robot) throws ApiException {
        projectsProjectIdRobotsRobotIdPutWithHttpInfo(projectId, robotId, robot);
    }

    /**
     * Update status of robot account.
     * Used to disable/enable a specified robot account.
     * @param projectId Relevant project ID. (required)
     * @param robotId The ID of robot account. (required)
     * @param robot Request body of enable/disable a robot account. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> projectsProjectIdRobotsRobotIdPutWithHttpInfo(Long projectId, Long robotId, RobotAccountUpdate robot) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdRobotsRobotIdPutValidateBeforeCall(projectId, robotId, robot, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update status of robot account. (asynchronously)
     * Used to disable/enable a specified robot account.
     * @param projectId Relevant project ID. (required)
     * @param robotId The ID of robot account. (required)
     * @param robot Request body of enable/disable a robot account. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdRobotsRobotIdPutAsync(Long projectId, Long robotId, RobotAccountUpdate robot, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdRobotsRobotIdPutValidateBeforeCall(projectId, robotId, robot, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
