/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 1.10.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.kathra.harbor.client.api;

import org.kathra.harbor.client.ApiCallback;
import org.kathra.harbor.client.ApiClient;
import org.kathra.harbor.client.ApiException;
import org.kathra.harbor.client.ApiResponse;
import org.kathra.harbor.client.Configuration;
import org.kathra.harbor.client.Pair;
import org.kathra.harbor.client.ProgressRequestBody;
import org.kathra.harbor.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.kathra.harbor.client.model.AccessLog;
import org.kathra.harbor.client.model.Action;
import org.kathra.harbor.client.model.Action1;
import org.kathra.harbor.client.model.AdminJobSchedule;
import org.kathra.harbor.client.model.CVEWhitelist;
import org.kathra.harbor.client.model.ChartInfoEntry;
import org.kathra.harbor.client.model.ChartVersionDetails;
import org.kathra.harbor.client.model.ChartVersions;
import org.kathra.harbor.client.model.Configurations;
import org.kathra.harbor.client.model.ConfigurationsResponse;
import org.kathra.harbor.client.model.DetailedTag;
import org.kathra.harbor.client.model.EmailServerSetting;
import org.kathra.harbor.client.model.Endpoint;
import java.io.File;
import org.kathra.harbor.client.model.GCResult;
import org.kathra.harbor.client.model.GeneralInfo;
import org.kathra.harbor.client.model.HasAdminRole;
import org.kathra.harbor.client.model.ImmutableTagRule;
import org.kathra.harbor.client.model.InlineResponse200;
import org.kathra.harbor.client.model.InputSecret;
import org.kathra.harbor.client.model.Label;
import org.kathra.harbor.client.model.LdapConf;
import org.kathra.harbor.client.model.LdapFailedImportUsers;
import org.kathra.harbor.client.model.LdapImportUsers;
import org.kathra.harbor.client.model.LdapUsers;
import org.kathra.harbor.client.model.Manifest;
import org.kathra.harbor.client.model.Namespace;
import org.kathra.harbor.client.model.OverallHealthStatus;
import org.kathra.harbor.client.model.Password;
import org.kathra.harbor.client.model.Permission;
import org.kathra.harbor.client.model.Project;
import org.kathra.harbor.client.model.ProjectMember;
import org.kathra.harbor.client.model.ProjectMemberEntity;
import org.kathra.harbor.client.model.ProjectMetadata;
import org.kathra.harbor.client.model.ProjectReq;
import org.kathra.harbor.client.model.ProjectSummary;
import org.kathra.harbor.client.model.PutRegistry;
import org.kathra.harbor.client.model.Quota;
import org.kathra.harbor.client.model.QuotaSwitcher;
import org.kathra.harbor.client.model.QuotaUpdateReq;
import org.kathra.harbor.client.model.Registry;
import org.kathra.harbor.client.model.RegistryInfo;
import org.kathra.harbor.client.model.ReplicationExecution;
import org.kathra.harbor.client.model.ReplicationPolicy;
import org.kathra.harbor.client.model.ReplicationTask;
import org.kathra.harbor.client.model.RepoSignature;
import org.kathra.harbor.client.model.Repository;
import org.kathra.harbor.client.model.RepositoryDescription;
import org.kathra.harbor.client.model.Resource;
import org.kathra.harbor.client.model.RetagReq;
import org.kathra.harbor.client.model.RetentionExecution;
import org.kathra.harbor.client.model.RetentionExecutionTask;
import org.kathra.harbor.client.model.RetentionMetadata;
import org.kathra.harbor.client.model.RetentionPolicy;
import org.kathra.harbor.client.model.RobotAccount;
import org.kathra.harbor.client.model.RobotAccountCreate;
import org.kathra.harbor.client.model.RobotAccountPostRep;
import org.kathra.harbor.client.model.RobotAccountUpdate;
import org.kathra.harbor.client.model.RoleRequest;
import org.kathra.harbor.client.model.ScannerAdapterMetadata;
import org.kathra.harbor.client.model.ScannerRegistration;
import org.kathra.harbor.client.model.ScannerRegistrationSettings;
import org.kathra.harbor.client.model.Search;
import org.kathra.harbor.client.model.StatisticMap;
import org.kathra.harbor.client.model.Stats;
import org.kathra.harbor.client.model.SystemInfo;
import org.kathra.harbor.client.model.User;
import org.kathra.harbor.client.model.UserGroup;
import org.kathra.harbor.client.model.UserProfile;
import org.kathra.harbor.client.model.UserSearch;
import org.kathra.harbor.client.model.WebhookJob;
import org.kathra.harbor.client.model.WebhookLastTrigger;
import org.kathra.harbor.client.model.WebhookPolicy;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductsApi {
    private ApiClient apiClient;

    public ProductsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for chartrepoChartsPost
     * @param chart The chart file (required)
     * @param prov The provance file (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call chartrepoChartsPostCall(File chart, File prov, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chartrepo/charts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (chart != null)
        localVarFormParams.put("chart", chart);
        if (prov != null)
        localVarFormParams.put("prov", prov);

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call chartrepoChartsPostValidateBeforeCall(File chart, File prov, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chart' is set
        if (chart == null) {
            throw new ApiException("Missing the required parameter 'chart' when calling chartrepoChartsPost(Async)");
        }
        

        com.squareup.okhttp.Call call = chartrepoChartsPostCall(chart, prov, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Upload a chart file to the defult &#39;library&#39; project.
     * Upload a chart file to the default &#39;library&#39; project. Uploading together with the prov file at the same time is also supported.
     * @param chart The chart file (required)
     * @param prov The provance file (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void chartrepoChartsPost(File chart, File prov) throws ApiException {
        chartrepoChartsPostWithHttpInfo(chart, prov);
    }

    /**
     * Upload a chart file to the defult &#39;library&#39; project.
     * Upload a chart file to the default &#39;library&#39; project. Uploading together with the prov file at the same time is also supported.
     * @param chart The chart file (required)
     * @param prov The provance file (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> chartrepoChartsPostWithHttpInfo(File chart, File prov) throws ApiException {
        com.squareup.okhttp.Call call = chartrepoChartsPostValidateBeforeCall(chart, prov, null, null);
        return apiClient.execute(call);
    }

    /**
     * Upload a chart file to the defult &#39;library&#39; project. (asynchronously)
     * Upload a chart file to the default &#39;library&#39; project. Uploading together with the prov file at the same time is also supported.
     * @param chart The chart file (required)
     * @param prov The provance file (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call chartrepoChartsPostAsync(File chart, File prov, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = chartrepoChartsPostValidateBeforeCall(chart, prov, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for chartrepoHealthGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call chartrepoHealthGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chartrepo/health";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call chartrepoHealthGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = chartrepoHealthGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Check the health of chart repository service.
     * Check the health of chart repository service.
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 chartrepoHealthGet() throws ApiException {
        ApiResponse<InlineResponse200> resp = chartrepoHealthGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Check the health of chart repository service.
     * Check the health of chart repository service.
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> chartrepoHealthGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = chartrepoHealthGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check the health of chart repository service. (asynchronously)
     * Check the health of chart repository service.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call chartrepoHealthGetAsync(final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = chartrepoHealthGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for chartrepoRepoChartsGet
     * @param repo The project name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call chartrepoRepoChartsGetCall(String repo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chartrepo/{repo}/charts"
            .replaceAll("\\{" + "repo" + "\\}", apiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call chartrepoRepoChartsGetValidateBeforeCall(String repo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling chartrepoRepoChartsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = chartrepoRepoChartsGetCall(repo, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all the charts under the specified project
     * Get all the charts under the specified project
     * @param repo The project name (required)
     * @return List&lt;ChartInfoEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ChartInfoEntry> chartrepoRepoChartsGet(String repo) throws ApiException {
        ApiResponse<List<ChartInfoEntry>> resp = chartrepoRepoChartsGetWithHttpInfo(repo);
        return resp.getData();
    }

    /**
     * Get all the charts under the specified project
     * Get all the charts under the specified project
     * @param repo The project name (required)
     * @return ApiResponse&lt;List&lt;ChartInfoEntry&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ChartInfoEntry>> chartrepoRepoChartsGetWithHttpInfo(String repo) throws ApiException {
        com.squareup.okhttp.Call call = chartrepoRepoChartsGetValidateBeforeCall(repo, null, null);
        Type localVarReturnType = new TypeToken<List<ChartInfoEntry>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all the charts under the specified project (asynchronously)
     * Get all the charts under the specified project
     * @param repo The project name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call chartrepoRepoChartsGetAsync(String repo, final ApiCallback<List<ChartInfoEntry>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = chartrepoRepoChartsGetValidateBeforeCall(repo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ChartInfoEntry>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for chartrepoRepoChartsNameDelete
     * @param repo The project name (required)
     * @param name The chart name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call chartrepoRepoChartsNameDeleteCall(String repo, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chartrepo/{repo}/charts/{name}"
            .replaceAll("\\{" + "repo" + "\\}", apiClient.escapeString(repo.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call chartrepoRepoChartsNameDeleteValidateBeforeCall(String repo, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling chartrepoRepoChartsNameDelete(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling chartrepoRepoChartsNameDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = chartrepoRepoChartsNameDeleteCall(repo, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete all the versions of the specified chart
     * Delete all the versions of the specified chart
     * @param repo The project name (required)
     * @param name The chart name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void chartrepoRepoChartsNameDelete(String repo, String name) throws ApiException {
        chartrepoRepoChartsNameDeleteWithHttpInfo(repo, name);
    }

    /**
     * Delete all the versions of the specified chart
     * Delete all the versions of the specified chart
     * @param repo The project name (required)
     * @param name The chart name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> chartrepoRepoChartsNameDeleteWithHttpInfo(String repo, String name) throws ApiException {
        com.squareup.okhttp.Call call = chartrepoRepoChartsNameDeleteValidateBeforeCall(repo, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete all the versions of the specified chart (asynchronously)
     * Delete all the versions of the specified chart
     * @param repo The project name (required)
     * @param name The chart name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call chartrepoRepoChartsNameDeleteAsync(String repo, String name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = chartrepoRepoChartsNameDeleteValidateBeforeCall(repo, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for chartrepoRepoChartsNameGet
     * @param repo The project name (required)
     * @param name The chart name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call chartrepoRepoChartsNameGetCall(String repo, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chartrepo/{repo}/charts/{name}"
            .replaceAll("\\{" + "repo" + "\\}", apiClient.escapeString(repo.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call chartrepoRepoChartsNameGetValidateBeforeCall(String repo, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling chartrepoRepoChartsNameGet(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling chartrepoRepoChartsNameGet(Async)");
        }
        

        com.squareup.okhttp.Call call = chartrepoRepoChartsNameGetCall(repo, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all the versions of the specified chart
     * Get all the versions of the specified chart
     * @param repo The project name (required)
     * @param name The chart name (required)
     * @return ChartVersions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChartVersions chartrepoRepoChartsNameGet(String repo, String name) throws ApiException {
        ApiResponse<ChartVersions> resp = chartrepoRepoChartsNameGetWithHttpInfo(repo, name);
        return resp.getData();
    }

    /**
     * Get all the versions of the specified chart
     * Get all the versions of the specified chart
     * @param repo The project name (required)
     * @param name The chart name (required)
     * @return ApiResponse&lt;ChartVersions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChartVersions> chartrepoRepoChartsNameGetWithHttpInfo(String repo, String name) throws ApiException {
        com.squareup.okhttp.Call call = chartrepoRepoChartsNameGetValidateBeforeCall(repo, name, null, null);
        Type localVarReturnType = new TypeToken<ChartVersions>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all the versions of the specified chart (asynchronously)
     * Get all the versions of the specified chart
     * @param repo The project name (required)
     * @param name The chart name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call chartrepoRepoChartsNameGetAsync(String repo, String name, final ApiCallback<ChartVersions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = chartrepoRepoChartsNameGetValidateBeforeCall(repo, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChartVersions>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for chartrepoRepoChartsNameVersionDelete
     * @param repo The project name (required)
     * @param name The chart name (required)
     * @param version The chart version (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call chartrepoRepoChartsNameVersionDeleteCall(String repo, String name, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chartrepo/{repo}/charts/{name}/{version}"
            .replaceAll("\\{" + "repo" + "\\}", apiClient.escapeString(repo.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call chartrepoRepoChartsNameVersionDeleteValidateBeforeCall(String repo, String name, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling chartrepoRepoChartsNameVersionDelete(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling chartrepoRepoChartsNameVersionDelete(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling chartrepoRepoChartsNameVersionDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = chartrepoRepoChartsNameVersionDeleteCall(repo, name, version, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete the specified chart version
     * Delete the specified chart version
     * @param repo The project name (required)
     * @param name The chart name (required)
     * @param version The chart version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void chartrepoRepoChartsNameVersionDelete(String repo, String name, String version) throws ApiException {
        chartrepoRepoChartsNameVersionDeleteWithHttpInfo(repo, name, version);
    }

    /**
     * Delete the specified chart version
     * Delete the specified chart version
     * @param repo The project name (required)
     * @param name The chart name (required)
     * @param version The chart version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> chartrepoRepoChartsNameVersionDeleteWithHttpInfo(String repo, String name, String version) throws ApiException {
        com.squareup.okhttp.Call call = chartrepoRepoChartsNameVersionDeleteValidateBeforeCall(repo, name, version, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete the specified chart version (asynchronously)
     * Delete the specified chart version
     * @param repo The project name (required)
     * @param name The chart name (required)
     * @param version The chart version (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call chartrepoRepoChartsNameVersionDeleteAsync(String repo, String name, String version, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = chartrepoRepoChartsNameVersionDeleteValidateBeforeCall(repo, name, version, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for chartrepoRepoChartsNameVersionGet
     * @param repo The project name (required)
     * @param name The chart name (required)
     * @param version The chart version (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call chartrepoRepoChartsNameVersionGetCall(String repo, String name, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chartrepo/{repo}/charts/{name}/{version}"
            .replaceAll("\\{" + "repo" + "\\}", apiClient.escapeString(repo.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call chartrepoRepoChartsNameVersionGetValidateBeforeCall(String repo, String name, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling chartrepoRepoChartsNameVersionGet(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling chartrepoRepoChartsNameVersionGet(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling chartrepoRepoChartsNameVersionGet(Async)");
        }
        

        com.squareup.okhttp.Call call = chartrepoRepoChartsNameVersionGetCall(repo, name, version, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the specified chart version
     * Get the specified chart version
     * @param repo The project name (required)
     * @param name The chart name (required)
     * @param version The chart version (required)
     * @return ChartVersionDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChartVersionDetails chartrepoRepoChartsNameVersionGet(String repo, String name, String version) throws ApiException {
        ApiResponse<ChartVersionDetails> resp = chartrepoRepoChartsNameVersionGetWithHttpInfo(repo, name, version);
        return resp.getData();
    }

    /**
     * Get the specified chart version
     * Get the specified chart version
     * @param repo The project name (required)
     * @param name The chart name (required)
     * @param version The chart version (required)
     * @return ApiResponse&lt;ChartVersionDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChartVersionDetails> chartrepoRepoChartsNameVersionGetWithHttpInfo(String repo, String name, String version) throws ApiException {
        com.squareup.okhttp.Call call = chartrepoRepoChartsNameVersionGetValidateBeforeCall(repo, name, version, null, null);
        Type localVarReturnType = new TypeToken<ChartVersionDetails>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the specified chart version (asynchronously)
     * Get the specified chart version
     * @param repo The project name (required)
     * @param name The chart name (required)
     * @param version The chart version (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call chartrepoRepoChartsNameVersionGetAsync(String repo, String name, String version, final ApiCallback<ChartVersionDetails> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = chartrepoRepoChartsNameVersionGetValidateBeforeCall(repo, name, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChartVersionDetails>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for chartrepoRepoChartsNameVersionLabelsGet
     * @param repo The project name (required)
     * @param name The chart name (required)
     * @param version The chart version (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call chartrepoRepoChartsNameVersionLabelsGetCall(String repo, String name, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chartrepo/{repo}/charts/{name}/{version}/labels"
            .replaceAll("\\{" + "repo" + "\\}", apiClient.escapeString(repo.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call chartrepoRepoChartsNameVersionLabelsGetValidateBeforeCall(String repo, String name, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling chartrepoRepoChartsNameVersionLabelsGet(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling chartrepoRepoChartsNameVersionLabelsGet(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling chartrepoRepoChartsNameVersionLabelsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = chartrepoRepoChartsNameVersionLabelsGetCall(repo, name, version, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Return the attahced labels of chart.
     * Return the attahced labels of the specified chart version.
     * @param repo The project name (required)
     * @param name The chart name (required)
     * @param version The chart version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void chartrepoRepoChartsNameVersionLabelsGet(String repo, String name, String version) throws ApiException {
        chartrepoRepoChartsNameVersionLabelsGetWithHttpInfo(repo, name, version);
    }

    /**
     * Return the attahced labels of chart.
     * Return the attahced labels of the specified chart version.
     * @param repo The project name (required)
     * @param name The chart name (required)
     * @param version The chart version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> chartrepoRepoChartsNameVersionLabelsGetWithHttpInfo(String repo, String name, String version) throws ApiException {
        com.squareup.okhttp.Call call = chartrepoRepoChartsNameVersionLabelsGetValidateBeforeCall(repo, name, version, null, null);
        return apiClient.execute(call);
    }

    /**
     * Return the attahced labels of chart. (asynchronously)
     * Return the attahced labels of the specified chart version.
     * @param repo The project name (required)
     * @param name The chart name (required)
     * @param version The chart version (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call chartrepoRepoChartsNameVersionLabelsGetAsync(String repo, String name, String version, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = chartrepoRepoChartsNameVersionLabelsGetValidateBeforeCall(repo, name, version, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for chartrepoRepoChartsNameVersionLabelsIdDelete
     * @param repo The project name (required)
     * @param name The chart name (required)
     * @param version The chart version (required)
     * @param id The label ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call chartrepoRepoChartsNameVersionLabelsIdDeleteCall(String repo, String name, String version, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chartrepo/{repo}/charts/{name}/{version}/labels/{id}"
            .replaceAll("\\{" + "repo" + "\\}", apiClient.escapeString(repo.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call chartrepoRepoChartsNameVersionLabelsIdDeleteValidateBeforeCall(String repo, String name, String version, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling chartrepoRepoChartsNameVersionLabelsIdDelete(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling chartrepoRepoChartsNameVersionLabelsIdDelete(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling chartrepoRepoChartsNameVersionLabelsIdDelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling chartrepoRepoChartsNameVersionLabelsIdDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = chartrepoRepoChartsNameVersionLabelsIdDeleteCall(repo, name, version, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove label from chart.
     * Remove label from the specified chart version.
     * @param repo The project name (required)
     * @param name The chart name (required)
     * @param version The chart version (required)
     * @param id The label ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void chartrepoRepoChartsNameVersionLabelsIdDelete(String repo, String name, String version, Integer id) throws ApiException {
        chartrepoRepoChartsNameVersionLabelsIdDeleteWithHttpInfo(repo, name, version, id);
    }

    /**
     * Remove label from chart.
     * Remove label from the specified chart version.
     * @param repo The project name (required)
     * @param name The chart name (required)
     * @param version The chart version (required)
     * @param id The label ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> chartrepoRepoChartsNameVersionLabelsIdDeleteWithHttpInfo(String repo, String name, String version, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = chartrepoRepoChartsNameVersionLabelsIdDeleteValidateBeforeCall(repo, name, version, id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove label from chart. (asynchronously)
     * Remove label from the specified chart version.
     * @param repo The project name (required)
     * @param name The chart name (required)
     * @param version The chart version (required)
     * @param id The label ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call chartrepoRepoChartsNameVersionLabelsIdDeleteAsync(String repo, String name, String version, Integer id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = chartrepoRepoChartsNameVersionLabelsIdDeleteValidateBeforeCall(repo, name, version, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for chartrepoRepoChartsNameVersionLabelsPost
     * @param repo The project name (required)
     * @param name The chart name (required)
     * @param version The chart version (required)
     * @param label The label being marked to the chart version (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call chartrepoRepoChartsNameVersionLabelsPostCall(String repo, String name, String version, Label label, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = label;

        // create path and map variables
        String localVarPath = "/chartrepo/{repo}/charts/{name}/{version}/labels"
            .replaceAll("\\{" + "repo" + "\\}", apiClient.escapeString(repo.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call chartrepoRepoChartsNameVersionLabelsPostValidateBeforeCall(String repo, String name, String version, Label label, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling chartrepoRepoChartsNameVersionLabelsPost(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling chartrepoRepoChartsNameVersionLabelsPost(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling chartrepoRepoChartsNameVersionLabelsPost(Async)");
        }
        
        // verify the required parameter 'label' is set
        if (label == null) {
            throw new ApiException("Missing the required parameter 'label' when calling chartrepoRepoChartsNameVersionLabelsPost(Async)");
        }
        

        com.squareup.okhttp.Call call = chartrepoRepoChartsNameVersionLabelsPostCall(repo, name, version, label, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Mark label to chart.
     * Mark label to the specified chart version.
     * @param repo The project name (required)
     * @param name The chart name (required)
     * @param version The chart version (required)
     * @param label The label being marked to the chart version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void chartrepoRepoChartsNameVersionLabelsPost(String repo, String name, String version, Label label) throws ApiException {
        chartrepoRepoChartsNameVersionLabelsPostWithHttpInfo(repo, name, version, label);
    }

    /**
     * Mark label to chart.
     * Mark label to the specified chart version.
     * @param repo The project name (required)
     * @param name The chart name (required)
     * @param version The chart version (required)
     * @param label The label being marked to the chart version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> chartrepoRepoChartsNameVersionLabelsPostWithHttpInfo(String repo, String name, String version, Label label) throws ApiException {
        com.squareup.okhttp.Call call = chartrepoRepoChartsNameVersionLabelsPostValidateBeforeCall(repo, name, version, label, null, null);
        return apiClient.execute(call);
    }

    /**
     * Mark label to chart. (asynchronously)
     * Mark label to the specified chart version.
     * @param repo The project name (required)
     * @param name The chart name (required)
     * @param version The chart version (required)
     * @param label The label being marked to the chart version (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call chartrepoRepoChartsNameVersionLabelsPostAsync(String repo, String name, String version, Label label, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = chartrepoRepoChartsNameVersionLabelsPostValidateBeforeCall(repo, name, version, label, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for chartrepoRepoChartsPost
     * @param repo The project name (required)
     * @param chart The chart file (required)
     * @param prov The provance file (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call chartrepoRepoChartsPostCall(String repo, File chart, File prov, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chartrepo/{repo}/charts"
            .replaceAll("\\{" + "repo" + "\\}", apiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (chart != null)
        localVarFormParams.put("chart", chart);
        if (prov != null)
        localVarFormParams.put("prov", prov);

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call chartrepoRepoChartsPostValidateBeforeCall(String repo, File chart, File prov, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling chartrepoRepoChartsPost(Async)");
        }
        
        // verify the required parameter 'chart' is set
        if (chart == null) {
            throw new ApiException("Missing the required parameter 'chart' when calling chartrepoRepoChartsPost(Async)");
        }
        

        com.squareup.okhttp.Call call = chartrepoRepoChartsPostCall(repo, chart, prov, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Upload a chart file to the specified project.
     * Upload a chart file to the specified project. With this API, the corresponding provance file can be uploaded together with chart file at once.
     * @param repo The project name (required)
     * @param chart The chart file (required)
     * @param prov The provance file (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void chartrepoRepoChartsPost(String repo, File chart, File prov) throws ApiException {
        chartrepoRepoChartsPostWithHttpInfo(repo, chart, prov);
    }

    /**
     * Upload a chart file to the specified project.
     * Upload a chart file to the specified project. With this API, the corresponding provance file can be uploaded together with chart file at once.
     * @param repo The project name (required)
     * @param chart The chart file (required)
     * @param prov The provance file (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> chartrepoRepoChartsPostWithHttpInfo(String repo, File chart, File prov) throws ApiException {
        com.squareup.okhttp.Call call = chartrepoRepoChartsPostValidateBeforeCall(repo, chart, prov, null, null);
        return apiClient.execute(call);
    }

    /**
     * Upload a chart file to the specified project. (asynchronously)
     * Upload a chart file to the specified project. With this API, the corresponding provance file can be uploaded together with chart file at once.
     * @param repo The project name (required)
     * @param chart The chart file (required)
     * @param prov The provance file (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call chartrepoRepoChartsPostAsync(String repo, File chart, File prov, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = chartrepoRepoChartsPostValidateBeforeCall(repo, chart, prov, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for chartrepoRepoProvPost
     * @param repo The project name (required)
     * @param prov The provance file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call chartrepoRepoProvPostCall(String repo, File prov, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chartrepo/{repo}/prov"
            .replaceAll("\\{" + "repo" + "\\}", apiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (prov != null)
        localVarFormParams.put("prov", prov);

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call chartrepoRepoProvPostValidateBeforeCall(String repo, File prov, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repo' is set
        if (repo == null) {
            throw new ApiException("Missing the required parameter 'repo' when calling chartrepoRepoProvPost(Async)");
        }
        
        // verify the required parameter 'prov' is set
        if (prov == null) {
            throw new ApiException("Missing the required parameter 'prov' when calling chartrepoRepoProvPost(Async)");
        }
        

        com.squareup.okhttp.Call call = chartrepoRepoProvPostCall(repo, prov, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Upload a provance file to the specified project.
     * Upload a provance file to the specified project. The provance file should be targeted for an existing chart file.
     * @param repo The project name (required)
     * @param prov The provance file (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void chartrepoRepoProvPost(String repo, File prov) throws ApiException {
        chartrepoRepoProvPostWithHttpInfo(repo, prov);
    }

    /**
     * Upload a provance file to the specified project.
     * Upload a provance file to the specified project. The provance file should be targeted for an existing chart file.
     * @param repo The project name (required)
     * @param prov The provance file (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> chartrepoRepoProvPostWithHttpInfo(String repo, File prov) throws ApiException {
        com.squareup.okhttp.Call call = chartrepoRepoProvPostValidateBeforeCall(repo, prov, null, null);
        return apiClient.execute(call);
    }

    /**
     * Upload a provance file to the specified project. (asynchronously)
     * Upload a provance file to the specified project. The provance file should be targeted for an existing chart file.
     * @param repo The project name (required)
     * @param prov The provance file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call chartrepoRepoProvPostAsync(String repo, File prov, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = chartrepoRepoProvPostValidateBeforeCall(repo, prov, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for configurationsGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call configurationsGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configurations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call configurationsGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = configurationsGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get system configurations.
     * This endpoint is for retrieving system configurations that only provides for admin user. 
     * @return ConfigurationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConfigurationsResponse configurationsGet() throws ApiException {
        ApiResponse<ConfigurationsResponse> resp = configurationsGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get system configurations.
     * This endpoint is for retrieving system configurations that only provides for admin user. 
     * @return ApiResponse&lt;ConfigurationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConfigurationsResponse> configurationsGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = configurationsGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ConfigurationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get system configurations. (asynchronously)
     * This endpoint is for retrieving system configurations that only provides for admin user. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call configurationsGetAsync(final ApiCallback<ConfigurationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = configurationsGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConfigurationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for configurationsPut
     * @param configurations The configuration map can contain a subset of the attributes of the schema, which are to be updated. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call configurationsPutCall(Configurations configurations, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = configurations;

        // create path and map variables
        String localVarPath = "/configurations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call configurationsPutValidateBeforeCall(Configurations configurations, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'configurations' is set
        if (configurations == null) {
            throw new ApiException("Missing the required parameter 'configurations' when calling configurationsPut(Async)");
        }
        

        com.squareup.okhttp.Call call = configurationsPutCall(configurations, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Modify system configurations.
     * This endpoint is for modifying system configurations that only provides for admin user. 
     * @param configurations The configuration map can contain a subset of the attributes of the schema, which are to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void configurationsPut(Configurations configurations) throws ApiException {
        configurationsPutWithHttpInfo(configurations);
    }

    /**
     * Modify system configurations.
     * This endpoint is for modifying system configurations that only provides for admin user. 
     * @param configurations The configuration map can contain a subset of the attributes of the schema, which are to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> configurationsPutWithHttpInfo(Configurations configurations) throws ApiException {
        com.squareup.okhttp.Call call = configurationsPutValidateBeforeCall(configurations, null, null);
        return apiClient.execute(call);
    }

    /**
     * Modify system configurations. (asynchronously)
     * This endpoint is for modifying system configurations that only provides for admin user. 
     * @param configurations The configuration map can contain a subset of the attributes of the schema, which are to be updated. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call configurationsPutAsync(Configurations configurations, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = configurationsPutValidateBeforeCall(configurations, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for emailPingPost
     * @param settings Email server settings, if some of the settings are not assigned, they will be read from system configuration. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call emailPingPostCall(EmailServerSetting settings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = settings;

        // create path and map variables
        String localVarPath = "/email/ping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call emailPingPostValidateBeforeCall(EmailServerSetting settings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = emailPingPostCall(settings, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Test connection and authentication with email server.
     * Test connection and authentication with email server. 
     * @param settings Email server settings, if some of the settings are not assigned, they will be read from system configuration. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void emailPingPost(EmailServerSetting settings) throws ApiException {
        emailPingPostWithHttpInfo(settings);
    }

    /**
     * Test connection and authentication with email server.
     * Test connection and authentication with email server. 
     * @param settings Email server settings, if some of the settings are not assigned, they will be read from system configuration. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> emailPingPostWithHttpInfo(EmailServerSetting settings) throws ApiException {
        com.squareup.okhttp.Call call = emailPingPostValidateBeforeCall(settings, null, null);
        return apiClient.execute(call);
    }

    /**
     * Test connection and authentication with email server. (asynchronously)
     * Test connection and authentication with email server. 
     * @param settings Email server settings, if some of the settings are not assigned, they will be read from system configuration. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call emailPingPostAsync(EmailServerSetting settings, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = emailPingPostValidateBeforeCall(settings, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for healthGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call healthGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/health";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call healthGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = healthGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Health check API
     * The endpoint returns the health stauts of the system. 
     * @return OverallHealthStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OverallHealthStatus healthGet() throws ApiException {
        ApiResponse<OverallHealthStatus> resp = healthGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Health check API
     * The endpoint returns the health stauts of the system. 
     * @return ApiResponse&lt;OverallHealthStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OverallHealthStatus> healthGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = healthGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<OverallHealthStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Health check API (asynchronously)
     * The endpoint returns the health stauts of the system. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call healthGetAsync(final ApiCallback<OverallHealthStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = healthGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OverallHealthStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for internalSwitchquotaPut
     * @param switcher  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call internalSwitchquotaPutCall(QuotaSwitcher switcher, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = switcher;

        // create path and map variables
        String localVarPath = "/internal/switchquota";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call internalSwitchquotaPutValidateBeforeCall(QuotaSwitcher switcher, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'switcher' is set
        if (switcher == null) {
            throw new ApiException("Missing the required parameter 'switcher' when calling internalSwitchquotaPut(Async)");
        }
        

        com.squareup.okhttp.Call call = internalSwitchquotaPutCall(switcher, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Enable or disable quota.
     * This endpoint is for enable/disable quota. When quota is disabled, no resource require/release in image/chart push and delete. 
     * @param switcher  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void internalSwitchquotaPut(QuotaSwitcher switcher) throws ApiException {
        internalSwitchquotaPutWithHttpInfo(switcher);
    }

    /**
     * Enable or disable quota.
     * This endpoint is for enable/disable quota. When quota is disabled, no resource require/release in image/chart push and delete. 
     * @param switcher  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> internalSwitchquotaPutWithHttpInfo(QuotaSwitcher switcher) throws ApiException {
        com.squareup.okhttp.Call call = internalSwitchquotaPutValidateBeforeCall(switcher, null, null);
        return apiClient.execute(call);
    }

    /**
     * Enable or disable quota. (asynchronously)
     * This endpoint is for enable/disable quota. When quota is disabled, no resource require/release in image/chart push and delete. 
     * @param switcher  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call internalSwitchquotaPutAsync(QuotaSwitcher switcher, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = internalSwitchquotaPutValidateBeforeCall(switcher, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for internalSyncquotaPost
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call internalSyncquotaPostCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/internal/syncquota";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call internalSyncquotaPostValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = internalSyncquotaPostCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Sync quota from registry/chart to DB.
     * This endpoint is for syncing quota usage of registry/chart with database. 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void internalSyncquotaPost() throws ApiException {
        internalSyncquotaPostWithHttpInfo();
    }

    /**
     * Sync quota from registry/chart to DB.
     * This endpoint is for syncing quota usage of registry/chart with database. 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> internalSyncquotaPostWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = internalSyncquotaPostValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Sync quota from registry/chart to DB. (asynchronously)
     * This endpoint is for syncing quota usage of registry/chart with database. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call internalSyncquotaPostAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = internalSyncquotaPostValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for internalSyncregistryPost
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call internalSyncregistryPostCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/internal/syncregistry";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call internalSyncregistryPostValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = internalSyncregistryPostCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Sync repositories from registry to DB.
     * This endpoint is for syncing all repositories of registry with database. 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void internalSyncregistryPost() throws ApiException {
        internalSyncregistryPostWithHttpInfo();
    }

    /**
     * Sync repositories from registry to DB.
     * This endpoint is for syncing all repositories of registry with database. 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> internalSyncregistryPostWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = internalSyncregistryPostValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Sync repositories from registry to DB. (asynchronously)
     * This endpoint is for syncing all repositories of registry with database. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call internalSyncregistryPostAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = internalSyncregistryPostValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for labelsGet
     * @param scope The label scope. Valid values are g and p. g for global labels and p for project labels. (required)
     * @param name The label name. (optional)
     * @param projectId Relevant project ID, required when scope is p. (optional)
     * @param page The page nubmer. (optional)
     * @param pageSize The size of per page. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call labelsGetCall(String scope, String name, Long projectId, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/labels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));
        if (projectId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("project_id", projectId));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call labelsGetValidateBeforeCall(String scope, String name, Long projectId, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling labelsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = labelsGetCall(scope, name, projectId, page, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List labels according to the query strings.
     * This endpoint let user list labels by name, scope and project_id 
     * @param scope The label scope. Valid values are g and p. g for global labels and p for project labels. (required)
     * @param name The label name. (optional)
     * @param projectId Relevant project ID, required when scope is p. (optional)
     * @param page The page nubmer. (optional)
     * @param pageSize The size of per page. (optional)
     * @return List&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Label> labelsGet(String scope, String name, Long projectId, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<List<Label>> resp = labelsGetWithHttpInfo(scope, name, projectId, page, pageSize);
        return resp.getData();
    }

    /**
     * List labels according to the query strings.
     * This endpoint let user list labels by name, scope and project_id 
     * @param scope The label scope. Valid values are g and p. g for global labels and p for project labels. (required)
     * @param name The label name. (optional)
     * @param projectId Relevant project ID, required when scope is p. (optional)
     * @param page The page nubmer. (optional)
     * @param pageSize The size of per page. (optional)
     * @return ApiResponse&lt;List&lt;Label&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Label>> labelsGetWithHttpInfo(String scope, String name, Long projectId, Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = labelsGetValidateBeforeCall(scope, name, projectId, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<List<Label>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List labels according to the query strings. (asynchronously)
     * This endpoint let user list labels by name, scope and project_id 
     * @param scope The label scope. Valid values are g and p. g for global labels and p for project labels. (required)
     * @param name The label name. (optional)
     * @param projectId Relevant project ID, required when scope is p. (optional)
     * @param page The page nubmer. (optional)
     * @param pageSize The size of per page. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call labelsGetAsync(String scope, String name, Long projectId, Integer page, Integer pageSize, final ApiCallback<List<Label>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = labelsGetValidateBeforeCall(scope, name, projectId, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Label>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for labelsIdDelete
     * @param id Label ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call labelsIdDeleteCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/labels/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call labelsIdDeleteValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling labelsIdDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = labelsIdDeleteCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete the label specified by ID.
     * Delete the label specified by ID. 
     * @param id Label ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void labelsIdDelete(Long id) throws ApiException {
        labelsIdDeleteWithHttpInfo(id);
    }

    /**
     * Delete the label specified by ID.
     * Delete the label specified by ID. 
     * @param id Label ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> labelsIdDeleteWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = labelsIdDeleteValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete the label specified by ID. (asynchronously)
     * Delete the label specified by ID. 
     * @param id Label ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call labelsIdDeleteAsync(Long id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = labelsIdDeleteValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for labelsIdGet
     * @param id Label ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call labelsIdGetCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/labels/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call labelsIdGetValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling labelsIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = labelsIdGetCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the label specified by ID.
     * This endpoint let user get the label by specific ID. 
     * @param id Label ID (required)
     * @return Label
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Label labelsIdGet(Long id) throws ApiException {
        ApiResponse<Label> resp = labelsIdGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get the label specified by ID.
     * This endpoint let user get the label by specific ID. 
     * @param id Label ID (required)
     * @return ApiResponse&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Label> labelsIdGetWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = labelsIdGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the label specified by ID. (asynchronously)
     * This endpoint let user get the label by specific ID. 
     * @param id Label ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call labelsIdGetAsync(Long id, final ApiCallback<Label> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = labelsIdGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for labelsIdPut
     * @param id Label ID (required)
     * @param label The updated label json object. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call labelsIdPutCall(Long id, Label label, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = label;

        // create path and map variables
        String localVarPath = "/labels/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call labelsIdPutValidateBeforeCall(Long id, Label label, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling labelsIdPut(Async)");
        }
        
        // verify the required parameter 'label' is set
        if (label == null) {
            throw new ApiException("Missing the required parameter 'label' when calling labelsIdPut(Async)");
        }
        

        com.squareup.okhttp.Call call = labelsIdPutCall(id, label, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update the label properties.
     * This endpoint let user update label properties. 
     * @param id Label ID (required)
     * @param label The updated label json object. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void labelsIdPut(Long id, Label label) throws ApiException {
        labelsIdPutWithHttpInfo(id, label);
    }

    /**
     * Update the label properties.
     * This endpoint let user update label properties. 
     * @param id Label ID (required)
     * @param label The updated label json object. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> labelsIdPutWithHttpInfo(Long id, Label label) throws ApiException {
        com.squareup.okhttp.Call call = labelsIdPutValidateBeforeCall(id, label, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update the label properties. (asynchronously)
     * This endpoint let user update label properties. 
     * @param id Label ID (required)
     * @param label The updated label json object. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call labelsIdPutAsync(Long id, Label label, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = labelsIdPutValidateBeforeCall(id, label, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for labelsIdResourcesGet
     * @param id Label ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call labelsIdResourcesGetCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/labels/{id}/resources"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call labelsIdResourcesGetValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling labelsIdResourcesGet(Async)");
        }
        

        com.squareup.okhttp.Call call = labelsIdResourcesGetCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the resources that the label is referenced by.
     * This endpoint let user get the resources that the label is referenced by. Only the replication policies are returned for now. 
     * @param id Label ID (required)
     * @return Resource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Resource labelsIdResourcesGet(Long id) throws ApiException {
        ApiResponse<Resource> resp = labelsIdResourcesGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get the resources that the label is referenced by.
     * This endpoint let user get the resources that the label is referenced by. Only the replication policies are returned for now. 
     * @param id Label ID (required)
     * @return ApiResponse&lt;Resource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Resource> labelsIdResourcesGetWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = labelsIdResourcesGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<Resource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the resources that the label is referenced by. (asynchronously)
     * This endpoint let user get the resources that the label is referenced by. Only the replication policies are returned for now. 
     * @param id Label ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call labelsIdResourcesGetAsync(Long id, final ApiCallback<Resource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = labelsIdResourcesGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Resource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for labelsPost
     * @param label The json object of label. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call labelsPostCall(Label label, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = label;

        // create path and map variables
        String localVarPath = "/labels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call labelsPostValidateBeforeCall(Label label, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'label' is set
        if (label == null) {
            throw new ApiException("Missing the required parameter 'label' when calling labelsPost(Async)");
        }
        

        com.squareup.okhttp.Call call = labelsPostCall(label, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Post creates a label
     * This endpoint let user creates a label. 
     * @param label The json object of label. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void labelsPost(Label label) throws ApiException {
        labelsPostWithHttpInfo(label);
    }

    /**
     * Post creates a label
     * This endpoint let user creates a label. 
     * @param label The json object of label. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> labelsPostWithHttpInfo(Label label) throws ApiException {
        com.squareup.okhttp.Call call = labelsPostValidateBeforeCall(label, null, null);
        return apiClient.execute(call);
    }

    /**
     * Post creates a label (asynchronously)
     * This endpoint let user creates a label. 
     * @param label The json object of label. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call labelsPostAsync(Label label, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = labelsPostValidateBeforeCall(label, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for ldapGroupsSearchGet
     * @param groupname Ldap group name (optional)
     * @param groupdn The LDAP group DN (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ldapGroupsSearchGetCall(String groupname, String groupdn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ldap/groups/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (groupname != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("groupname", groupname));
        if (groupdn != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("groupdn", groupdn));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ldapGroupsSearchGetValidateBeforeCall(String groupname, String groupdn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = ldapGroupsSearchGetCall(groupname, groupdn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search available ldap groups.
     * This endpoint searches the available ldap groups based on related configuration parameters. support to search by groupname or groupdn. 
     * @param groupname Ldap group name (optional)
     * @param groupdn The LDAP group DN (optional)
     * @return List&lt;UserGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<UserGroup> ldapGroupsSearchGet(String groupname, String groupdn) throws ApiException {
        ApiResponse<List<UserGroup>> resp = ldapGroupsSearchGetWithHttpInfo(groupname, groupdn);
        return resp.getData();
    }

    /**
     * Search available ldap groups.
     * This endpoint searches the available ldap groups based on related configuration parameters. support to search by groupname or groupdn. 
     * @param groupname Ldap group name (optional)
     * @param groupdn The LDAP group DN (optional)
     * @return ApiResponse&lt;List&lt;UserGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<UserGroup>> ldapGroupsSearchGetWithHttpInfo(String groupname, String groupdn) throws ApiException {
        com.squareup.okhttp.Call call = ldapGroupsSearchGetValidateBeforeCall(groupname, groupdn, null, null);
        Type localVarReturnType = new TypeToken<List<UserGroup>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search available ldap groups. (asynchronously)
     * This endpoint searches the available ldap groups based on related configuration parameters. support to search by groupname or groupdn. 
     * @param groupname Ldap group name (optional)
     * @param groupdn The LDAP group DN (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ldapGroupsSearchGetAsync(String groupname, String groupdn, final ApiCallback<List<UserGroup>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ldapGroupsSearchGetValidateBeforeCall(groupname, groupdn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<UserGroup>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ldapPingPost
     * @param ldapconf ldap configuration. support input ldap service configuration. If it&#39;s a empty request, will load current configuration from the system. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ldapPingPostCall(LdapConf ldapconf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ldapconf;

        // create path and map variables
        String localVarPath = "/ldap/ping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ldapPingPostValidateBeforeCall(LdapConf ldapconf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = ldapPingPostCall(ldapconf, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Ping available ldap service.
     * This endpoint ping the available ldap service for test related configuration parameters. 
     * @param ldapconf ldap configuration. support input ldap service configuration. If it&#39;s a empty request, will load current configuration from the system. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void ldapPingPost(LdapConf ldapconf) throws ApiException {
        ldapPingPostWithHttpInfo(ldapconf);
    }

    /**
     * Ping available ldap service.
     * This endpoint ping the available ldap service for test related configuration parameters. 
     * @param ldapconf ldap configuration. support input ldap service configuration. If it&#39;s a empty request, will load current configuration from the system. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> ldapPingPostWithHttpInfo(LdapConf ldapconf) throws ApiException {
        com.squareup.okhttp.Call call = ldapPingPostValidateBeforeCall(ldapconf, null, null);
        return apiClient.execute(call);
    }

    /**
     * Ping available ldap service. (asynchronously)
     * This endpoint ping the available ldap service for test related configuration parameters. 
     * @param ldapconf ldap configuration. support input ldap service configuration. If it&#39;s a empty request, will load current configuration from the system. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ldapPingPostAsync(LdapConf ldapconf, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ldapPingPostValidateBeforeCall(ldapconf, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for ldapUsersImportPost
     * @param uidList The uid listed for importing. This list will check users validity of ldap service based on configuration from the system. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ldapUsersImportPostCall(LdapImportUsers uidList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = uidList;

        // create path and map variables
        String localVarPath = "/ldap/users/import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ldapUsersImportPostValidateBeforeCall(LdapImportUsers uidList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uidList' is set
        if (uidList == null) {
            throw new ApiException("Missing the required parameter 'uidList' when calling ldapUsersImportPost(Async)");
        }
        

        com.squareup.okhttp.Call call = ldapUsersImportPostCall(uidList, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Import selected available ldap users.
     * This endpoint adds the selected available ldap users to harbor based on related configuration parameters from the system. System will try to guess the user email address and realname, add to harbor user information. If have errors when import user, will return the list of importing failed uid and the failed reason. 
     * @param uidList The uid listed for importing. This list will check users validity of ldap service based on configuration from the system. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void ldapUsersImportPost(LdapImportUsers uidList) throws ApiException {
        ldapUsersImportPostWithHttpInfo(uidList);
    }

    /**
     * Import selected available ldap users.
     * This endpoint adds the selected available ldap users to harbor based on related configuration parameters from the system. System will try to guess the user email address and realname, add to harbor user information. If have errors when import user, will return the list of importing failed uid and the failed reason. 
     * @param uidList The uid listed for importing. This list will check users validity of ldap service based on configuration from the system. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> ldapUsersImportPostWithHttpInfo(LdapImportUsers uidList) throws ApiException {
        com.squareup.okhttp.Call call = ldapUsersImportPostValidateBeforeCall(uidList, null, null);
        return apiClient.execute(call);
    }

    /**
     * Import selected available ldap users. (asynchronously)
     * This endpoint adds the selected available ldap users to harbor based on related configuration parameters from the system. System will try to guess the user email address and realname, add to harbor user information. If have errors when import user, will return the list of importing failed uid and the failed reason. 
     * @param uidList The uid listed for importing. This list will check users validity of ldap service based on configuration from the system. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ldapUsersImportPostAsync(LdapImportUsers uidList, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ldapUsersImportPostValidateBeforeCall(uidList, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for ldapUsersSearchGet
     * @param username Registered user ID (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ldapUsersSearchGetCall(String username, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ldap/users/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("username", username));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ldapUsersSearchGetValidateBeforeCall(String username, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = ldapUsersSearchGetCall(username, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search available ldap users.
     * This endpoint searches the available ldap users based on related configuration parameters. Support searched by input ladp configuration, load configuration from the system and specific filter. 
     * @param username Registered user ID (optional)
     * @return List&lt;LdapUsers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LdapUsers> ldapUsersSearchGet(String username) throws ApiException {
        ApiResponse<List<LdapUsers>> resp = ldapUsersSearchGetWithHttpInfo(username);
        return resp.getData();
    }

    /**
     * Search available ldap users.
     * This endpoint searches the available ldap users based on related configuration parameters. Support searched by input ladp configuration, load configuration from the system and specific filter. 
     * @param username Registered user ID (optional)
     * @return ApiResponse&lt;List&lt;LdapUsers&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LdapUsers>> ldapUsersSearchGetWithHttpInfo(String username) throws ApiException {
        com.squareup.okhttp.Call call = ldapUsersSearchGetValidateBeforeCall(username, null, null);
        Type localVarReturnType = new TypeToken<List<LdapUsers>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search available ldap users. (asynchronously)
     * This endpoint searches the available ldap users based on related configuration parameters. Support searched by input ladp configuration, load configuration from the system and specific filter. 
     * @param username Registered user ID (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ldapUsersSearchGetAsync(String username, final ApiCallback<List<LdapUsers>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ldapUsersSearchGetValidateBeforeCall(username, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LdapUsers>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for logsGet
     * @param username Username of the operator. (optional)
     * @param repository The name of repository (optional)
     * @param tag The name of tag (optional)
     * @param operation The operation (optional)
     * @param beginTimestamp The begin timestamp (optional)
     * @param endTimestamp The end timestamp (optional)
     * @param page The page number, default is 1. (optional)
     * @param pageSize The size of per page, default is 10, maximum is 100. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call logsGetCall(String username, String repository, String tag, String operation, String beginTimestamp, String endTimestamp, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("username", username));
        if (repository != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repository", repository));
        if (tag != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tag", tag));
        if (operation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("operation", operation));
        if (beginTimestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("begin_timestamp", beginTimestamp));
        if (endTimestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_timestamp", endTimestamp));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call logsGetValidateBeforeCall(String username, String repository, String tag, String operation, String beginTimestamp, String endTimestamp, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = logsGetCall(username, repository, tag, operation, beginTimestamp, endTimestamp, page, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get recent logs of the projects which the user is a member of
     * This endpoint let user see the recent operation logs of the projects which he is member of 
     * @param username Username of the operator. (optional)
     * @param repository The name of repository (optional)
     * @param tag The name of tag (optional)
     * @param operation The operation (optional)
     * @param beginTimestamp The begin timestamp (optional)
     * @param endTimestamp The end timestamp (optional)
     * @param page The page number, default is 1. (optional)
     * @param pageSize The size of per page, default is 10, maximum is 100. (optional)
     * @return List&lt;AccessLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AccessLog> logsGet(String username, String repository, String tag, String operation, String beginTimestamp, String endTimestamp, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<List<AccessLog>> resp = logsGetWithHttpInfo(username, repository, tag, operation, beginTimestamp, endTimestamp, page, pageSize);
        return resp.getData();
    }

    /**
     * Get recent logs of the projects which the user is a member of
     * This endpoint let user see the recent operation logs of the projects which he is member of 
     * @param username Username of the operator. (optional)
     * @param repository The name of repository (optional)
     * @param tag The name of tag (optional)
     * @param operation The operation (optional)
     * @param beginTimestamp The begin timestamp (optional)
     * @param endTimestamp The end timestamp (optional)
     * @param page The page number, default is 1. (optional)
     * @param pageSize The size of per page, default is 10, maximum is 100. (optional)
     * @return ApiResponse&lt;List&lt;AccessLog&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AccessLog>> logsGetWithHttpInfo(String username, String repository, String tag, String operation, String beginTimestamp, String endTimestamp, Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = logsGetValidateBeforeCall(username, repository, tag, operation, beginTimestamp, endTimestamp, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<List<AccessLog>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get recent logs of the projects which the user is a member of (asynchronously)
     * This endpoint let user see the recent operation logs of the projects which he is member of 
     * @param username Username of the operator. (optional)
     * @param repository The name of repository (optional)
     * @param tag The name of tag (optional)
     * @param operation The operation (optional)
     * @param beginTimestamp The begin timestamp (optional)
     * @param endTimestamp The end timestamp (optional)
     * @param page The page number, default is 1. (optional)
     * @param pageSize The size of per page, default is 10, maximum is 100. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call logsGetAsync(String username, String repository, String tag, String operation, String beginTimestamp, String endTimestamp, Integer page, Integer pageSize, final ApiCallback<List<AccessLog>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = logsGetValidateBeforeCall(username, repository, tag, operation, beginTimestamp, endTimestamp, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AccessLog>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for projectsGet
     * @param name The name of project. (optional)
     * @param _public The project is public or private. (optional)
     * @param owner The name of project owner. (optional)
     * @param page The page number, default is 1. (optional)
     * @param pageSize The size of per page, default is 10, maximum is 100. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsGetCall(String name, Boolean _public, String owner, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (_public != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("public", _public));
        if (owner != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("owner", owner));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsGetValidateBeforeCall(String name, Boolean _public, String owner, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = projectsGetCall(name, _public, owner, page, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List projects
     * This endpoint returns all projects created by Harbor, and can be filtered by project name. 
     * @param name The name of project. (optional)
     * @param _public The project is public or private. (optional)
     * @param owner The name of project owner. (optional)
     * @param page The page number, default is 1. (optional)
     * @param pageSize The size of per page, default is 10, maximum is 100. (optional)
     * @return List&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Project> projectsGet(String name, Boolean _public, String owner, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<List<Project>> resp = projectsGetWithHttpInfo(name, _public, owner, page, pageSize);
        return resp.getData();
    }

    /**
     * List projects
     * This endpoint returns all projects created by Harbor, and can be filtered by project name. 
     * @param name The name of project. (optional)
     * @param _public The project is public or private. (optional)
     * @param owner The name of project owner. (optional)
     * @param page The page number, default is 1. (optional)
     * @param pageSize The size of per page, default is 10, maximum is 100. (optional)
     * @return ApiResponse&lt;List&lt;Project&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Project>> projectsGetWithHttpInfo(String name, Boolean _public, String owner, Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = projectsGetValidateBeforeCall(name, _public, owner, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List projects (asynchronously)
     * This endpoint returns all projects created by Harbor, and can be filtered by project name. 
     * @param name The name of project. (optional)
     * @param _public The project is public or private. (optional)
     * @param owner The name of project owner. (optional)
     * @param page The page number, default is 1. (optional)
     * @param pageSize The size of per page, default is 10, maximum is 100. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsGetAsync(String name, Boolean _public, String owner, Integer page, Integer pageSize, final ApiCallback<List<Project>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsGetValidateBeforeCall(name, _public, owner, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for projectsHead
     * @param projectName Project name for checking exists. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsHeadCall(String projectName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (projectName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("project_name", projectName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsHeadValidateBeforeCall(String projectName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling projectsHead(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsHeadCall(projectName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Check if the project name user provided already exists.
     * This endpoint is used to check if the project name user provided already exist. 
     * @param projectName Project name for checking exists. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void projectsHead(String projectName) throws ApiException {
        projectsHeadWithHttpInfo(projectName);
    }

    /**
     * Check if the project name user provided already exists.
     * This endpoint is used to check if the project name user provided already exist. 
     * @param projectName Project name for checking exists. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> projectsHeadWithHttpInfo(String projectName) throws ApiException {
        com.squareup.okhttp.Call call = projectsHeadValidateBeforeCall(projectName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Check if the project name user provided already exists. (asynchronously)
     * This endpoint is used to check if the project name user provided already exist. 
     * @param projectName Project name for checking exists. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsHeadAsync(String projectName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsHeadValidateBeforeCall(projectName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for projectsPost
     * @param project New created project. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsPostCall(ProjectReq project, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = project;

        // create path and map variables
        String localVarPath = "/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsPostValidateBeforeCall(ProjectReq project, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsPost(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsPostCall(project, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new project.
     * This endpoint is for user to create a new project. 
     * @param project New created project. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void projectsPost(ProjectReq project) throws ApiException {
        projectsPostWithHttpInfo(project);
    }

    /**
     * Create a new project.
     * This endpoint is for user to create a new project. 
     * @param project New created project. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> projectsPostWithHttpInfo(ProjectReq project) throws ApiException {
        com.squareup.okhttp.Call call = projectsPostValidateBeforeCall(project, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create a new project. (asynchronously)
     * This endpoint is for user to create a new project. 
     * @param project New created project. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsPostAsync(ProjectReq project, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsPostValidateBeforeCall(project, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdDelete
     * @param projectId Project ID of project which will be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdDeleteCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdDeleteValidateBeforeCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdDeleteCall(projectId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete project by projectID
     * This endpoint is aimed to delete project by project ID. 
     * @param projectId Project ID of project which will be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void projectsProjectIdDelete(Long projectId) throws ApiException {
        projectsProjectIdDeleteWithHttpInfo(projectId);
    }

    /**
     * Delete project by projectID
     * This endpoint is aimed to delete project by project ID. 
     * @param projectId Project ID of project which will be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> projectsProjectIdDeleteWithHttpInfo(Long projectId) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdDeleteValidateBeforeCall(projectId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete project by projectID (asynchronously)
     * This endpoint is aimed to delete project by project ID. 
     * @param projectId Project ID of project which will be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdDeleteAsync(Long projectId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdDeleteValidateBeforeCall(projectId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdGet
     * @param projectId Project ID for filtering results. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdGetCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdGetValidateBeforeCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdGetCall(projectId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Return specific project detail information
     * This endpoint returns specific project information by project ID. 
     * @param projectId Project ID for filtering results. (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Project projectsProjectIdGet(Long projectId) throws ApiException {
        ApiResponse<Project> resp = projectsProjectIdGetWithHttpInfo(projectId);
        return resp.getData();
    }

    /**
     * Return specific project detail information
     * This endpoint returns specific project information by project ID. 
     * @param projectId Project ID for filtering results. (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Project> projectsProjectIdGetWithHttpInfo(Long projectId) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdGetValidateBeforeCall(projectId, null, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return specific project detail information (asynchronously)
     * This endpoint returns specific project information by project ID. 
     * @param projectId Project ID for filtering results. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdGetAsync(Long projectId, final ApiCallback<Project> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdGetValidateBeforeCall(projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdImmutabletagrulesGet
     * @param projectId Relevant project ID. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdImmutabletagrulesGetCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/immutabletagrules"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdImmutabletagrulesGetValidateBeforeCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdImmutabletagrulesGet(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdImmutabletagrulesGetCall(projectId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all immutable tag rules of current project
     * This endpoint returns the immutable tag rules of a project 
     * @param projectId Relevant project ID. (required)
     * @return List&lt;ImmutableTagRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ImmutableTagRule> projectsProjectIdImmutabletagrulesGet(Long projectId) throws ApiException {
        ApiResponse<List<ImmutableTagRule>> resp = projectsProjectIdImmutabletagrulesGetWithHttpInfo(projectId);
        return resp.getData();
    }

    /**
     * List all immutable tag rules of current project
     * This endpoint returns the immutable tag rules of a project 
     * @param projectId Relevant project ID. (required)
     * @return ApiResponse&lt;List&lt;ImmutableTagRule&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ImmutableTagRule>> projectsProjectIdImmutabletagrulesGetWithHttpInfo(Long projectId) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdImmutabletagrulesGetValidateBeforeCall(projectId, null, null);
        Type localVarReturnType = new TypeToken<List<ImmutableTagRule>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all immutable tag rules of current project (asynchronously)
     * This endpoint returns the immutable tag rules of a project 
     * @param projectId Relevant project ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdImmutabletagrulesGetAsync(Long projectId, final ApiCallback<List<ImmutableTagRule>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdImmutabletagrulesGetValidateBeforeCall(projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ImmutableTagRule>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdImmutabletagrulesIdDelete
     * @param projectId Relevant project ID. (required)
     * @param id Immutable tag rule ID. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdImmutabletagrulesIdDeleteCall(Long projectId, Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/immutabletagrules/{id}"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdImmutabletagrulesIdDeleteValidateBeforeCall(Long projectId, Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdImmutabletagrulesIdDelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectsProjectIdImmutabletagrulesIdDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdImmutabletagrulesIdDeleteCall(projectId, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete the immutable tag rule.
     * 
     * @param projectId Relevant project ID. (required)
     * @param id Immutable tag rule ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void projectsProjectIdImmutabletagrulesIdDelete(Long projectId, Long id) throws ApiException {
        projectsProjectIdImmutabletagrulesIdDeleteWithHttpInfo(projectId, id);
    }

    /**
     * Delete the immutable tag rule.
     * 
     * @param projectId Relevant project ID. (required)
     * @param id Immutable tag rule ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> projectsProjectIdImmutabletagrulesIdDeleteWithHttpInfo(Long projectId, Long id) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdImmutabletagrulesIdDeleteValidateBeforeCall(projectId, id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete the immutable tag rule. (asynchronously)
     * 
     * @param projectId Relevant project ID. (required)
     * @param id Immutable tag rule ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdImmutabletagrulesIdDeleteAsync(Long projectId, Long id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdImmutabletagrulesIdDeleteValidateBeforeCall(projectId, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdImmutabletagrulesIdPut
     * @param projectId Relevant project ID. (required)
     * @param id Immutable tag rule ID. (required)
     * @param immutabletagrule  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdImmutabletagrulesIdPutCall(Long projectId, Long id, ImmutableTagRule immutabletagrule, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = immutabletagrule;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/immutabletagrules/{id}"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdImmutabletagrulesIdPutValidateBeforeCall(Long projectId, Long id, ImmutableTagRule immutabletagrule, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdImmutabletagrulesIdPut(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectsProjectIdImmutabletagrulesIdPut(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdImmutabletagrulesIdPutCall(projectId, id, immutabletagrule, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update the immutable tag rule or enable or disable the rule
     * 
     * @param projectId Relevant project ID. (required)
     * @param id Immutable tag rule ID. (required)
     * @param immutabletagrule  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void projectsProjectIdImmutabletagrulesIdPut(Long projectId, Long id, ImmutableTagRule immutabletagrule) throws ApiException {
        projectsProjectIdImmutabletagrulesIdPutWithHttpInfo(projectId, id, immutabletagrule);
    }

    /**
     * Update the immutable tag rule or enable or disable the rule
     * 
     * @param projectId Relevant project ID. (required)
     * @param id Immutable tag rule ID. (required)
     * @param immutabletagrule  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> projectsProjectIdImmutabletagrulesIdPutWithHttpInfo(Long projectId, Long id, ImmutableTagRule immutabletagrule) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdImmutabletagrulesIdPutValidateBeforeCall(projectId, id, immutabletagrule, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update the immutable tag rule or enable or disable the rule (asynchronously)
     * 
     * @param projectId Relevant project ID. (required)
     * @param id Immutable tag rule ID. (required)
     * @param immutabletagrule  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdImmutabletagrulesIdPutAsync(Long projectId, Long id, ImmutableTagRule immutabletagrule, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdImmutabletagrulesIdPutValidateBeforeCall(projectId, id, immutabletagrule, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdImmutabletagrulesPost
     * @param projectId Relevant project ID. (required)
     * @param immutabletagrule  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdImmutabletagrulesPostCall(Long projectId, ImmutableTagRule immutabletagrule, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = immutabletagrule;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/immutabletagrules"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdImmutabletagrulesPostValidateBeforeCall(Long projectId, ImmutableTagRule immutabletagrule, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdImmutabletagrulesPost(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdImmutabletagrulesPostCall(projectId, immutabletagrule, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add an immutable tag rule to current project
     * This endpoint add an immutable tag rule to the project 
     * @param projectId Relevant project ID. (required)
     * @param immutabletagrule  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void projectsProjectIdImmutabletagrulesPost(Long projectId, ImmutableTagRule immutabletagrule) throws ApiException {
        projectsProjectIdImmutabletagrulesPostWithHttpInfo(projectId, immutabletagrule);
    }

    /**
     * Add an immutable tag rule to current project
     * This endpoint add an immutable tag rule to the project 
     * @param projectId Relevant project ID. (required)
     * @param immutabletagrule  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> projectsProjectIdImmutabletagrulesPostWithHttpInfo(Long projectId, ImmutableTagRule immutabletagrule) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdImmutabletagrulesPostValidateBeforeCall(projectId, immutabletagrule, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add an immutable tag rule to current project (asynchronously)
     * This endpoint add an immutable tag rule to the project 
     * @param projectId Relevant project ID. (required)
     * @param immutabletagrule  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdImmutabletagrulesPostAsync(Long projectId, ImmutableTagRule immutabletagrule, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdImmutabletagrulesPostValidateBeforeCall(projectId, immutabletagrule, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdLogsGet
     * @param projectId Relevant project ID (required)
     * @param username Username of the operator. (optional)
     * @param repository The name of repository (optional)
     * @param tag The name of tag (optional)
     * @param operation The operation (optional)
     * @param beginTimestamp The begin timestamp (optional)
     * @param endTimestamp The end timestamp (optional)
     * @param page The page number, default is 1. (optional)
     * @param pageSize The size of per page, default is 10, maximum is 100. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdLogsGetCall(Long projectId, String username, String repository, String tag, String operation, String beginTimestamp, String endTimestamp, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/logs"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("username", username));
        if (repository != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("repository", repository));
        if (tag != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tag", tag));
        if (operation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("operation", operation));
        if (beginTimestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("begin_timestamp", beginTimestamp));
        if (endTimestamp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_timestamp", endTimestamp));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdLogsGetValidateBeforeCall(Long projectId, String username, String repository, String tag, String operation, String beginTimestamp, String endTimestamp, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdLogsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdLogsGetCall(projectId, username, repository, tag, operation, beginTimestamp, endTimestamp, page, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get access logs accompany with a relevant project.
     * This endpoint let user search access logs filtered by operations and date time ranges. 
     * @param projectId Relevant project ID (required)
     * @param username Username of the operator. (optional)
     * @param repository The name of repository (optional)
     * @param tag The name of tag (optional)
     * @param operation The operation (optional)
     * @param beginTimestamp The begin timestamp (optional)
     * @param endTimestamp The end timestamp (optional)
     * @param page The page number, default is 1. (optional)
     * @param pageSize The size of per page, default is 10, maximum is 100. (optional)
     * @return List&lt;AccessLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AccessLog> projectsProjectIdLogsGet(Long projectId, String username, String repository, String tag, String operation, String beginTimestamp, String endTimestamp, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<List<AccessLog>> resp = projectsProjectIdLogsGetWithHttpInfo(projectId, username, repository, tag, operation, beginTimestamp, endTimestamp, page, pageSize);
        return resp.getData();
    }

    /**
     * Get access logs accompany with a relevant project.
     * This endpoint let user search access logs filtered by operations and date time ranges. 
     * @param projectId Relevant project ID (required)
     * @param username Username of the operator. (optional)
     * @param repository The name of repository (optional)
     * @param tag The name of tag (optional)
     * @param operation The operation (optional)
     * @param beginTimestamp The begin timestamp (optional)
     * @param endTimestamp The end timestamp (optional)
     * @param page The page number, default is 1. (optional)
     * @param pageSize The size of per page, default is 10, maximum is 100. (optional)
     * @return ApiResponse&lt;List&lt;AccessLog&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AccessLog>> projectsProjectIdLogsGetWithHttpInfo(Long projectId, String username, String repository, String tag, String operation, String beginTimestamp, String endTimestamp, Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdLogsGetValidateBeforeCall(projectId, username, repository, tag, operation, beginTimestamp, endTimestamp, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<List<AccessLog>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get access logs accompany with a relevant project. (asynchronously)
     * This endpoint let user search access logs filtered by operations and date time ranges. 
     * @param projectId Relevant project ID (required)
     * @param username Username of the operator. (optional)
     * @param repository The name of repository (optional)
     * @param tag The name of tag (optional)
     * @param operation The operation (optional)
     * @param beginTimestamp The begin timestamp (optional)
     * @param endTimestamp The end timestamp (optional)
     * @param page The page number, default is 1. (optional)
     * @param pageSize The size of per page, default is 10, maximum is 100. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdLogsGetAsync(Long projectId, String username, String repository, String tag, String operation, String beginTimestamp, String endTimestamp, Integer page, Integer pageSize, final ApiCallback<List<AccessLog>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdLogsGetValidateBeforeCall(projectId, username, repository, tag, operation, beginTimestamp, endTimestamp, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AccessLog>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdMembersGet
     * @param projectId Relevant project ID. (required)
     * @param entityname The entity name to search. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdMembersGetCall(Long projectId, String entityname, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/members"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entityname != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entityname", entityname));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdMembersGetValidateBeforeCall(Long projectId, String entityname, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdMembersGet(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdMembersGetCall(projectId, entityname, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all project member information
     * Get all project member information
     * @param projectId Relevant project ID. (required)
     * @param entityname The entity name to search. (optional)
     * @return List&lt;ProjectMemberEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ProjectMemberEntity> projectsProjectIdMembersGet(Long projectId, String entityname) throws ApiException {
        ApiResponse<List<ProjectMemberEntity>> resp = projectsProjectIdMembersGetWithHttpInfo(projectId, entityname);
        return resp.getData();
    }

    /**
     * Get all project member information
     * Get all project member information
     * @param projectId Relevant project ID. (required)
     * @param entityname The entity name to search. (optional)
     * @return ApiResponse&lt;List&lt;ProjectMemberEntity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ProjectMemberEntity>> projectsProjectIdMembersGetWithHttpInfo(Long projectId, String entityname) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdMembersGetValidateBeforeCall(projectId, entityname, null, null);
        Type localVarReturnType = new TypeToken<List<ProjectMemberEntity>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all project member information (asynchronously)
     * Get all project member information
     * @param projectId Relevant project ID. (required)
     * @param entityname The entity name to search. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdMembersGetAsync(Long projectId, String entityname, final ApiCallback<List<ProjectMemberEntity>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdMembersGetValidateBeforeCall(projectId, entityname, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ProjectMemberEntity>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdMembersMidDelete
     * @param projectId Relevant project ID. (required)
     * @param mid Member ID. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdMembersMidDeleteCall(Long projectId, Long mid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/members/{mid}"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "mid" + "\\}", apiClient.escapeString(mid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdMembersMidDeleteValidateBeforeCall(Long projectId, Long mid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdMembersMidDelete(Async)");
        }
        
        // verify the required parameter 'mid' is set
        if (mid == null) {
            throw new ApiException("Missing the required parameter 'mid' when calling projectsProjectIdMembersMidDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdMembersMidDeleteCall(projectId, mid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete project member
     * 
     * @param projectId Relevant project ID. (required)
     * @param mid Member ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void projectsProjectIdMembersMidDelete(Long projectId, Long mid) throws ApiException {
        projectsProjectIdMembersMidDeleteWithHttpInfo(projectId, mid);
    }

    /**
     * Delete project member
     * 
     * @param projectId Relevant project ID. (required)
     * @param mid Member ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> projectsProjectIdMembersMidDeleteWithHttpInfo(Long projectId, Long mid) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdMembersMidDeleteValidateBeforeCall(projectId, mid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete project member (asynchronously)
     * 
     * @param projectId Relevant project ID. (required)
     * @param mid Member ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdMembersMidDeleteAsync(Long projectId, Long mid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdMembersMidDeleteValidateBeforeCall(projectId, mid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdMembersMidGet
     * @param projectId Relevant project ID. (required)
     * @param mid The member ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdMembersMidGetCall(Long projectId, Long mid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/members/{mid}"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "mid" + "\\}", apiClient.escapeString(mid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdMembersMidGetValidateBeforeCall(Long projectId, Long mid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdMembersMidGet(Async)");
        }
        
        // verify the required parameter 'mid' is set
        if (mid == null) {
            throw new ApiException("Missing the required parameter 'mid' when calling projectsProjectIdMembersMidGet(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdMembersMidGetCall(projectId, mid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the project member information
     * Get the project member information
     * @param projectId Relevant project ID. (required)
     * @param mid The member ID (required)
     * @return ProjectMemberEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProjectMemberEntity projectsProjectIdMembersMidGet(Long projectId, Long mid) throws ApiException {
        ApiResponse<ProjectMemberEntity> resp = projectsProjectIdMembersMidGetWithHttpInfo(projectId, mid);
        return resp.getData();
    }

    /**
     * Get the project member information
     * Get the project member information
     * @param projectId Relevant project ID. (required)
     * @param mid The member ID (required)
     * @return ApiResponse&lt;ProjectMemberEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProjectMemberEntity> projectsProjectIdMembersMidGetWithHttpInfo(Long projectId, Long mid) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdMembersMidGetValidateBeforeCall(projectId, mid, null, null);
        Type localVarReturnType = new TypeToken<ProjectMemberEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the project member information (asynchronously)
     * Get the project member information
     * @param projectId Relevant project ID. (required)
     * @param mid The member ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdMembersMidGetAsync(Long projectId, Long mid, final ApiCallback<ProjectMemberEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdMembersMidGetValidateBeforeCall(projectId, mid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProjectMemberEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdMembersMidPut
     * @param projectId Relevant project ID. (required)
     * @param mid Member ID. (required)
     * @param role  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdMembersMidPutCall(Long projectId, Long mid, RoleRequest role, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = role;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/members/{mid}"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "mid" + "\\}", apiClient.escapeString(mid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdMembersMidPutValidateBeforeCall(Long projectId, Long mid, RoleRequest role, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdMembersMidPut(Async)");
        }
        
        // verify the required parameter 'mid' is set
        if (mid == null) {
            throw new ApiException("Missing the required parameter 'mid' when calling projectsProjectIdMembersMidPut(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdMembersMidPutCall(projectId, mid, role, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update project member
     * Update project member relationship
     * @param projectId Relevant project ID. (required)
     * @param mid Member ID. (required)
     * @param role  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void projectsProjectIdMembersMidPut(Long projectId, Long mid, RoleRequest role) throws ApiException {
        projectsProjectIdMembersMidPutWithHttpInfo(projectId, mid, role);
    }

    /**
     * Update project member
     * Update project member relationship
     * @param projectId Relevant project ID. (required)
     * @param mid Member ID. (required)
     * @param role  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> projectsProjectIdMembersMidPutWithHttpInfo(Long projectId, Long mid, RoleRequest role) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdMembersMidPutValidateBeforeCall(projectId, mid, role, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update project member (asynchronously)
     * Update project member relationship
     * @param projectId Relevant project ID. (required)
     * @param mid Member ID. (required)
     * @param role  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdMembersMidPutAsync(Long projectId, Long mid, RoleRequest role, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdMembersMidPutValidateBeforeCall(projectId, mid, role, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdMembersPost
     * @param projectId Relevant project ID. (required)
     * @param projectMember  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdMembersPostCall(Long projectId, ProjectMember projectMember, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = projectMember;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/members"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdMembersPostValidateBeforeCall(Long projectId, ProjectMember projectMember, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdMembersPost(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdMembersPostCall(projectId, projectMember, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create project member
     * Create project member relationship, the member can be one of the user_member and group_member,  The user_member need to specify user_id or username. If the user already exist in harbor DB, specify the user_id,  If does not exist in harbor DB, it will SearchAndOnBoard the user. The group_member need to specify id or ldap_group_dn. If the group already exist in harbor DB. specify the user group&#39;s id,  If does not exist, it will SearchAndOnBoard the group. 
     * @param projectId Relevant project ID. (required)
     * @param projectMember  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void projectsProjectIdMembersPost(Long projectId, ProjectMember projectMember) throws ApiException {
        projectsProjectIdMembersPostWithHttpInfo(projectId, projectMember);
    }

    /**
     * Create project member
     * Create project member relationship, the member can be one of the user_member and group_member,  The user_member need to specify user_id or username. If the user already exist in harbor DB, specify the user_id,  If does not exist in harbor DB, it will SearchAndOnBoard the user. The group_member need to specify id or ldap_group_dn. If the group already exist in harbor DB. specify the user group&#39;s id,  If does not exist, it will SearchAndOnBoard the group. 
     * @param projectId Relevant project ID. (required)
     * @param projectMember  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> projectsProjectIdMembersPostWithHttpInfo(Long projectId, ProjectMember projectMember) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdMembersPostValidateBeforeCall(projectId, projectMember, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create project member (asynchronously)
     * Create project member relationship, the member can be one of the user_member and group_member,  The user_member need to specify user_id or username. If the user already exist in harbor DB, specify the user_id,  If does not exist in harbor DB, it will SearchAndOnBoard the user. The group_member need to specify id or ldap_group_dn. If the group already exist in harbor DB. specify the user group&#39;s id,  If does not exist, it will SearchAndOnBoard the group. 
     * @param projectId Relevant project ID. (required)
     * @param projectMember  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdMembersPostAsync(Long projectId, ProjectMember projectMember, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdMembersPostValidateBeforeCall(projectId, projectMember, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdMetadatasGet
     * @param projectId The ID of project. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdMetadatasGetCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/metadatas"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdMetadatasGetValidateBeforeCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdMetadatasGet(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdMetadatasGetCall(projectId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get project metadata.
     * This endpoint returns metadata of the project specified by project ID. 
     * @param projectId The ID of project. (required)
     * @return ProjectMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProjectMetadata projectsProjectIdMetadatasGet(Long projectId) throws ApiException {
        ApiResponse<ProjectMetadata> resp = projectsProjectIdMetadatasGetWithHttpInfo(projectId);
        return resp.getData();
    }

    /**
     * Get project metadata.
     * This endpoint returns metadata of the project specified by project ID. 
     * @param projectId The ID of project. (required)
     * @return ApiResponse&lt;ProjectMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProjectMetadata> projectsProjectIdMetadatasGetWithHttpInfo(Long projectId) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdMetadatasGetValidateBeforeCall(projectId, null, null);
        Type localVarReturnType = new TypeToken<ProjectMetadata>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get project metadata. (asynchronously)
     * This endpoint returns metadata of the project specified by project ID. 
     * @param projectId The ID of project. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdMetadatasGetAsync(Long projectId, final ApiCallback<ProjectMetadata> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdMetadatasGetValidateBeforeCall(projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProjectMetadata>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdMetadatasMetaNameDelete
     * @param projectId The ID of project. (required)
     * @param metaName The name of metadat. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdMetadatasMetaNameDeleteCall(Long projectId, String metaName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/metadatas/{meta_name}"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "meta_name" + "\\}", apiClient.escapeString(metaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdMetadatasMetaNameDeleteValidateBeforeCall(Long projectId, String metaName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdMetadatasMetaNameDelete(Async)");
        }
        
        // verify the required parameter 'metaName' is set
        if (metaName == null) {
            throw new ApiException("Missing the required parameter 'metaName' when calling projectsProjectIdMetadatasMetaNameDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdMetadatasMetaNameDeleteCall(projectId, metaName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete metadata of a project
     * This endpoint is aimed to delete metadata of a project. 
     * @param projectId The ID of project. (required)
     * @param metaName The name of metadat. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void projectsProjectIdMetadatasMetaNameDelete(Long projectId, String metaName) throws ApiException {
        projectsProjectIdMetadatasMetaNameDeleteWithHttpInfo(projectId, metaName);
    }

    /**
     * Delete metadata of a project
     * This endpoint is aimed to delete metadata of a project. 
     * @param projectId The ID of project. (required)
     * @param metaName The name of metadat. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> projectsProjectIdMetadatasMetaNameDeleteWithHttpInfo(Long projectId, String metaName) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdMetadatasMetaNameDeleteValidateBeforeCall(projectId, metaName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete metadata of a project (asynchronously)
     * This endpoint is aimed to delete metadata of a project. 
     * @param projectId The ID of project. (required)
     * @param metaName The name of metadat. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdMetadatasMetaNameDeleteAsync(Long projectId, String metaName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdMetadatasMetaNameDeleteValidateBeforeCall(projectId, metaName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdMetadatasMetaNameGet
     * @param projectId Project ID for filtering results. (required)
     * @param metaName The name of metadat. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdMetadatasMetaNameGetCall(Long projectId, String metaName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/metadatas/{meta_name}"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "meta_name" + "\\}", apiClient.escapeString(metaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdMetadatasMetaNameGetValidateBeforeCall(Long projectId, String metaName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdMetadatasMetaNameGet(Async)");
        }
        
        // verify the required parameter 'metaName' is set
        if (metaName == null) {
            throw new ApiException("Missing the required parameter 'metaName' when calling projectsProjectIdMetadatasMetaNameGet(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdMetadatasMetaNameGetCall(projectId, metaName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get project metadata
     * This endpoint returns specified metadata of a project. 
     * @param projectId Project ID for filtering results. (required)
     * @param metaName The name of metadat. (required)
     * @return ProjectMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProjectMetadata projectsProjectIdMetadatasMetaNameGet(Long projectId, String metaName) throws ApiException {
        ApiResponse<ProjectMetadata> resp = projectsProjectIdMetadatasMetaNameGetWithHttpInfo(projectId, metaName);
        return resp.getData();
    }

    /**
     * Get project metadata
     * This endpoint returns specified metadata of a project. 
     * @param projectId Project ID for filtering results. (required)
     * @param metaName The name of metadat. (required)
     * @return ApiResponse&lt;ProjectMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProjectMetadata> projectsProjectIdMetadatasMetaNameGetWithHttpInfo(Long projectId, String metaName) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdMetadatasMetaNameGetValidateBeforeCall(projectId, metaName, null, null);
        Type localVarReturnType = new TypeToken<ProjectMetadata>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get project metadata (asynchronously)
     * This endpoint returns specified metadata of a project. 
     * @param projectId Project ID for filtering results. (required)
     * @param metaName The name of metadat. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdMetadatasMetaNameGetAsync(Long projectId, String metaName, final ApiCallback<ProjectMetadata> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdMetadatasMetaNameGetValidateBeforeCall(projectId, metaName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProjectMetadata>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdMetadatasMetaNamePut
     * @param projectId The ID of project. (required)
     * @param metaName The name of metadat. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdMetadatasMetaNamePutCall(Long projectId, String metaName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/metadatas/{meta_name}"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "meta_name" + "\\}", apiClient.escapeString(metaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdMetadatasMetaNamePutValidateBeforeCall(Long projectId, String metaName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdMetadatasMetaNamePut(Async)");
        }
        
        // verify the required parameter 'metaName' is set
        if (metaName == null) {
            throw new ApiException("Missing the required parameter 'metaName' when calling projectsProjectIdMetadatasMetaNamePut(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdMetadatasMetaNamePutCall(projectId, metaName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update metadata of a project.
     * This endpoint is aimed to update the metadata of a project. 
     * @param projectId The ID of project. (required)
     * @param metaName The name of metadat. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void projectsProjectIdMetadatasMetaNamePut(Long projectId, String metaName) throws ApiException {
        projectsProjectIdMetadatasMetaNamePutWithHttpInfo(projectId, metaName);
    }

    /**
     * Update metadata of a project.
     * This endpoint is aimed to update the metadata of a project. 
     * @param projectId The ID of project. (required)
     * @param metaName The name of metadat. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> projectsProjectIdMetadatasMetaNamePutWithHttpInfo(Long projectId, String metaName) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdMetadatasMetaNamePutValidateBeforeCall(projectId, metaName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update metadata of a project. (asynchronously)
     * This endpoint is aimed to update the metadata of a project. 
     * @param projectId The ID of project. (required)
     * @param metaName The name of metadat. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdMetadatasMetaNamePutAsync(Long projectId, String metaName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdMetadatasMetaNamePutValidateBeforeCall(projectId, metaName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdMetadatasPost
     * @param projectId Selected project ID. (required)
     * @param metadata The metadata of project. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdMetadatasPostCall(Long projectId, ProjectMetadata metadata, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = metadata;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/metadatas"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdMetadatasPostValidateBeforeCall(Long projectId, ProjectMetadata metadata, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdMetadatasPost(Async)");
        }
        
        // verify the required parameter 'metadata' is set
        if (metadata == null) {
            throw new ApiException("Missing the required parameter 'metadata' when calling projectsProjectIdMetadatasPost(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdMetadatasPostCall(projectId, metadata, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add metadata for the project.
     * This endpoint is aimed to add metadata of a project. 
     * @param projectId Selected project ID. (required)
     * @param metadata The metadata of project. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void projectsProjectIdMetadatasPost(Long projectId, ProjectMetadata metadata) throws ApiException {
        projectsProjectIdMetadatasPostWithHttpInfo(projectId, metadata);
    }

    /**
     * Add metadata for the project.
     * This endpoint is aimed to add metadata of a project. 
     * @param projectId Selected project ID. (required)
     * @param metadata The metadata of project. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> projectsProjectIdMetadatasPostWithHttpInfo(Long projectId, ProjectMetadata metadata) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdMetadatasPostValidateBeforeCall(projectId, metadata, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add metadata for the project. (asynchronously)
     * This endpoint is aimed to add metadata of a project. 
     * @param projectId Selected project ID. (required)
     * @param metadata The metadata of project. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdMetadatasPostAsync(Long projectId, ProjectMetadata metadata, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdMetadatasPostValidateBeforeCall(projectId, metadata, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdPut
     * @param projectId Selected project ID. (required)
     * @param project Updates of project. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdPutCall(Long projectId, ProjectReq project, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = project;

        // create path and map variables
        String localVarPath = "/projects/{project_id}"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdPutValidateBeforeCall(Long projectId, ProjectReq project, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdPut(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling projectsProjectIdPut(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdPutCall(projectId, project, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update properties for a selected project.
     * This endpoint is aimed to update the properties of a project. 
     * @param projectId Selected project ID. (required)
     * @param project Updates of project. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void projectsProjectIdPut(Long projectId, ProjectReq project) throws ApiException {
        projectsProjectIdPutWithHttpInfo(projectId, project);
    }

    /**
     * Update properties for a selected project.
     * This endpoint is aimed to update the properties of a project. 
     * @param projectId Selected project ID. (required)
     * @param project Updates of project. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> projectsProjectIdPutWithHttpInfo(Long projectId, ProjectReq project) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdPutValidateBeforeCall(projectId, project, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update properties for a selected project. (asynchronously)
     * This endpoint is aimed to update the properties of a project. 
     * @param projectId Selected project ID. (required)
     * @param project Updates of project. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdPutAsync(Long projectId, ProjectReq project, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdPutValidateBeforeCall(projectId, project, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdRobotsGet
     * @param projectId Relevant project ID. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdRobotsGetCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/robots"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdRobotsGetValidateBeforeCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdRobotsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdRobotsGetCall(projectId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all robot accounts of specified project
     * Get all robot accounts of specified project
     * @param projectId Relevant project ID. (required)
     * @return List&lt;RobotAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<RobotAccount> projectsProjectIdRobotsGet(Long projectId) throws ApiException {
        ApiResponse<List<RobotAccount>> resp = projectsProjectIdRobotsGetWithHttpInfo(projectId);
        return resp.getData();
    }

    /**
     * Get all robot accounts of specified project
     * Get all robot accounts of specified project
     * @param projectId Relevant project ID. (required)
     * @return ApiResponse&lt;List&lt;RobotAccount&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<RobotAccount>> projectsProjectIdRobotsGetWithHttpInfo(Long projectId) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdRobotsGetValidateBeforeCall(projectId, null, null);
        Type localVarReturnType = new TypeToken<List<RobotAccount>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all robot accounts of specified project (asynchronously)
     * Get all robot accounts of specified project
     * @param projectId Relevant project ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdRobotsGetAsync(Long projectId, final ApiCallback<List<RobotAccount>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdRobotsGetValidateBeforeCall(projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<RobotAccount>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdRobotsPost
     * @param projectId Relevant project ID. (required)
     * @param robot Request body of creating a robot account. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdRobotsPostCall(Long projectId, RobotAccountCreate robot, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = robot;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/robots"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdRobotsPostValidateBeforeCall(Long projectId, RobotAccountCreate robot, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdRobotsPost(Async)");
        }
        
        // verify the required parameter 'robot' is set
        if (robot == null) {
            throw new ApiException("Missing the required parameter 'robot' when calling projectsProjectIdRobotsPost(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdRobotsPostCall(projectId, robot, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a robot account for project
     * Create a robot account for project
     * @param projectId Relevant project ID. (required)
     * @param robot Request body of creating a robot account. (required)
     * @return RobotAccountPostRep
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RobotAccountPostRep projectsProjectIdRobotsPost(Long projectId, RobotAccountCreate robot) throws ApiException {
        ApiResponse<RobotAccountPostRep> resp = projectsProjectIdRobotsPostWithHttpInfo(projectId, robot);
        return resp.getData();
    }

    /**
     * Create a robot account for project
     * Create a robot account for project
     * @param projectId Relevant project ID. (required)
     * @param robot Request body of creating a robot account. (required)
     * @return ApiResponse&lt;RobotAccountPostRep&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RobotAccountPostRep> projectsProjectIdRobotsPostWithHttpInfo(Long projectId, RobotAccountCreate robot) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdRobotsPostValidateBeforeCall(projectId, robot, null, null);
        Type localVarReturnType = new TypeToken<RobotAccountPostRep>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a robot account for project (asynchronously)
     * Create a robot account for project
     * @param projectId Relevant project ID. (required)
     * @param robot Request body of creating a robot account. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdRobotsPostAsync(Long projectId, RobotAccountCreate robot, final ApiCallback<RobotAccountPostRep> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdRobotsPostValidateBeforeCall(projectId, robot, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RobotAccountPostRep>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdRobotsRobotIdDelete
     * @param projectId Relevant project ID. (required)
     * @param robotId The ID of robot account. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdRobotsRobotIdDeleteCall(Long projectId, Long robotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/robots/{robot_id}"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "robot_id" + "\\}", apiClient.escapeString(robotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdRobotsRobotIdDeleteValidateBeforeCall(Long projectId, Long robotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdRobotsRobotIdDelete(Async)");
        }
        
        // verify the required parameter 'robotId' is set
        if (robotId == null) {
            throw new ApiException("Missing the required parameter 'robotId' when calling projectsProjectIdRobotsRobotIdDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdRobotsRobotIdDeleteCall(projectId, robotId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete the specified robot account
     * Delete the specified robot account
     * @param projectId Relevant project ID. (required)
     * @param robotId The ID of robot account. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void projectsProjectIdRobotsRobotIdDelete(Long projectId, Long robotId) throws ApiException {
        projectsProjectIdRobotsRobotIdDeleteWithHttpInfo(projectId, robotId);
    }

    /**
     * Delete the specified robot account
     * Delete the specified robot account
     * @param projectId Relevant project ID. (required)
     * @param robotId The ID of robot account. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> projectsProjectIdRobotsRobotIdDeleteWithHttpInfo(Long projectId, Long robotId) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdRobotsRobotIdDeleteValidateBeforeCall(projectId, robotId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete the specified robot account (asynchronously)
     * Delete the specified robot account
     * @param projectId Relevant project ID. (required)
     * @param robotId The ID of robot account. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdRobotsRobotIdDeleteAsync(Long projectId, Long robotId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdRobotsRobotIdDeleteValidateBeforeCall(projectId, robotId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdRobotsRobotIdGet
     * @param projectId Relevant project ID. (required)
     * @param robotId The ID of robot account. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdRobotsRobotIdGetCall(Long projectId, Long robotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/robots/{robot_id}"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "robot_id" + "\\}", apiClient.escapeString(robotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdRobotsRobotIdGetValidateBeforeCall(Long projectId, Long robotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdRobotsRobotIdGet(Async)");
        }
        
        // verify the required parameter 'robotId' is set
        if (robotId == null) {
            throw new ApiException("Missing the required parameter 'robotId' when calling projectsProjectIdRobotsRobotIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdRobotsRobotIdGetCall(projectId, robotId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Return the infor of the specified robot account.
     * Return the infor of the specified robot account.
     * @param projectId Relevant project ID. (required)
     * @param robotId The ID of robot account. (required)
     * @return RobotAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RobotAccount projectsProjectIdRobotsRobotIdGet(Long projectId, Long robotId) throws ApiException {
        ApiResponse<RobotAccount> resp = projectsProjectIdRobotsRobotIdGetWithHttpInfo(projectId, robotId);
        return resp.getData();
    }

    /**
     * Return the infor of the specified robot account.
     * Return the infor of the specified robot account.
     * @param projectId Relevant project ID. (required)
     * @param robotId The ID of robot account. (required)
     * @return ApiResponse&lt;RobotAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RobotAccount> projectsProjectIdRobotsRobotIdGetWithHttpInfo(Long projectId, Long robotId) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdRobotsRobotIdGetValidateBeforeCall(projectId, robotId, null, null);
        Type localVarReturnType = new TypeToken<RobotAccount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return the infor of the specified robot account. (asynchronously)
     * Return the infor of the specified robot account.
     * @param projectId Relevant project ID. (required)
     * @param robotId The ID of robot account. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdRobotsRobotIdGetAsync(Long projectId, Long robotId, final ApiCallback<RobotAccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdRobotsRobotIdGetValidateBeforeCall(projectId, robotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RobotAccount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdRobotsRobotIdPut
     * @param projectId Relevant project ID. (required)
     * @param robotId The ID of robot account. (required)
     * @param robot Request body of enable/disable a robot account. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdRobotsRobotIdPutCall(Long projectId, Long robotId, RobotAccountUpdate robot, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = robot;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/robots/{robot_id}"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "robot_id" + "\\}", apiClient.escapeString(robotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdRobotsRobotIdPutValidateBeforeCall(Long projectId, Long robotId, RobotAccountUpdate robot, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdRobotsRobotIdPut(Async)");
        }
        
        // verify the required parameter 'robotId' is set
        if (robotId == null) {
            throw new ApiException("Missing the required parameter 'robotId' when calling projectsProjectIdRobotsRobotIdPut(Async)");
        }
        
        // verify the required parameter 'robot' is set
        if (robot == null) {
            throw new ApiException("Missing the required parameter 'robot' when calling projectsProjectIdRobotsRobotIdPut(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdRobotsRobotIdPutCall(projectId, robotId, robot, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update status of robot account.
     * Used to disable/enable a specified robot account.
     * @param projectId Relevant project ID. (required)
     * @param robotId The ID of robot account. (required)
     * @param robot Request body of enable/disable a robot account. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void projectsProjectIdRobotsRobotIdPut(Long projectId, Long robotId, RobotAccountUpdate robot) throws ApiException {
        projectsProjectIdRobotsRobotIdPutWithHttpInfo(projectId, robotId, robot);
    }

    /**
     * Update status of robot account.
     * Used to disable/enable a specified robot account.
     * @param projectId Relevant project ID. (required)
     * @param robotId The ID of robot account. (required)
     * @param robot Request body of enable/disable a robot account. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> projectsProjectIdRobotsRobotIdPutWithHttpInfo(Long projectId, Long robotId, RobotAccountUpdate robot) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdRobotsRobotIdPutValidateBeforeCall(projectId, robotId, robot, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update status of robot account. (asynchronously)
     * Used to disable/enable a specified robot account.
     * @param projectId Relevant project ID. (required)
     * @param robotId The ID of robot account. (required)
     * @param robot Request body of enable/disable a robot account. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdRobotsRobotIdPutAsync(Long projectId, Long robotId, RobotAccountUpdate robot, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdRobotsRobotIdPutValidateBeforeCall(projectId, robotId, robot, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdScannerCandidatesGet
     * @param projectId The project identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdScannerCandidatesGetCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/scanner/candidates"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdScannerCandidatesGetValidateBeforeCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdScannerCandidatesGet(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdScannerCandidatesGetCall(projectId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get scanner registration candidates for configurating project level scanner
     * Retrieve the system configured scanner registrations as candidates of setting project level scanner. 
     * @param projectId The project identifier. (required)
     * @return List&lt;ScannerRegistration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ScannerRegistration> projectsProjectIdScannerCandidatesGet(Long projectId) throws ApiException {
        ApiResponse<List<ScannerRegistration>> resp = projectsProjectIdScannerCandidatesGetWithHttpInfo(projectId);
        return resp.getData();
    }

    /**
     * Get scanner registration candidates for configurating project level scanner
     * Retrieve the system configured scanner registrations as candidates of setting project level scanner. 
     * @param projectId The project identifier. (required)
     * @return ApiResponse&lt;List&lt;ScannerRegistration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ScannerRegistration>> projectsProjectIdScannerCandidatesGetWithHttpInfo(Long projectId) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdScannerCandidatesGetValidateBeforeCall(projectId, null, null);
        Type localVarReturnType = new TypeToken<List<ScannerRegistration>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get scanner registration candidates for configurating project level scanner (asynchronously)
     * Retrieve the system configured scanner registrations as candidates of setting project level scanner. 
     * @param projectId The project identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdScannerCandidatesGetAsync(Long projectId, final ApiCallback<List<ScannerRegistration>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdScannerCandidatesGetValidateBeforeCall(projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ScannerRegistration>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdScannerGet
     * @param projectId The project identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdScannerGetCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/scanner"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdScannerGetValidateBeforeCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdScannerGet(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdScannerGetCall(projectId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get project level scanner
     * Get the scanner registration of the specified project. If no scanner registration is configured for the specified project, the system default scanner registration will be returned.
     * @param projectId The project identifier. (required)
     * @return ScannerRegistration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScannerRegistration projectsProjectIdScannerGet(Long projectId) throws ApiException {
        ApiResponse<ScannerRegistration> resp = projectsProjectIdScannerGetWithHttpInfo(projectId);
        return resp.getData();
    }

    /**
     * Get project level scanner
     * Get the scanner registration of the specified project. If no scanner registration is configured for the specified project, the system default scanner registration will be returned.
     * @param projectId The project identifier. (required)
     * @return ApiResponse&lt;ScannerRegistration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScannerRegistration> projectsProjectIdScannerGetWithHttpInfo(Long projectId) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdScannerGetValidateBeforeCall(projectId, null, null);
        Type localVarReturnType = new TypeToken<ScannerRegistration>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get project level scanner (asynchronously)
     * Get the scanner registration of the specified project. If no scanner registration is configured for the specified project, the system default scanner registration will be returned.
     * @param projectId The project identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdScannerGetAsync(Long projectId, final ApiCallback<ScannerRegistration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdScannerGetValidateBeforeCall(projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScannerRegistration>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdSummaryGet
     * @param projectId Relevant project ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdSummaryGetCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/summary"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdSummaryGetValidateBeforeCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdSummaryGet(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdSummaryGetCall(projectId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get summary of the project.
     * Get summary of the project.
     * @param projectId Relevant project ID (required)
     * @return ProjectSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProjectSummary projectsProjectIdSummaryGet(Long projectId) throws ApiException {
        ApiResponse<ProjectSummary> resp = projectsProjectIdSummaryGetWithHttpInfo(projectId);
        return resp.getData();
    }

    /**
     * Get summary of the project.
     * Get summary of the project.
     * @param projectId Relevant project ID (required)
     * @return ApiResponse&lt;ProjectSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProjectSummary> projectsProjectIdSummaryGetWithHttpInfo(Long projectId) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdSummaryGetValidateBeforeCall(projectId, null, null);
        Type localVarReturnType = new TypeToken<ProjectSummary>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get summary of the project. (asynchronously)
     * Get summary of the project.
     * @param projectId Relevant project ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdSummaryGetAsync(Long projectId, final ApiCallback<ProjectSummary> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdSummaryGetValidateBeforeCall(projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProjectSummary>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdWebhookJobsGet
     * @param projectId Relevant project ID. (required)
     * @param policyId The policy ID. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdWebhookJobsGetCall(Long projectId, Long policyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/webhook/jobs"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (policyId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("policy_id", policyId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdWebhookJobsGetValidateBeforeCall(Long projectId, Long policyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdWebhookJobsGet(Async)");
        }
        
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling projectsProjectIdWebhookJobsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdWebhookJobsGetCall(projectId, policyId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List project webhook jobs
     * This endpoint returns webhook jobs of a project. 
     * @param projectId Relevant project ID. (required)
     * @param policyId The policy ID. (required)
     * @return List&lt;WebhookJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<WebhookJob> projectsProjectIdWebhookJobsGet(Long projectId, Long policyId) throws ApiException {
        ApiResponse<List<WebhookJob>> resp = projectsProjectIdWebhookJobsGetWithHttpInfo(projectId, policyId);
        return resp.getData();
    }

    /**
     * List project webhook jobs
     * This endpoint returns webhook jobs of a project. 
     * @param projectId Relevant project ID. (required)
     * @param policyId The policy ID. (required)
     * @return ApiResponse&lt;List&lt;WebhookJob&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<WebhookJob>> projectsProjectIdWebhookJobsGetWithHttpInfo(Long projectId, Long policyId) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdWebhookJobsGetValidateBeforeCall(projectId, policyId, null, null);
        Type localVarReturnType = new TypeToken<List<WebhookJob>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List project webhook jobs (asynchronously)
     * This endpoint returns webhook jobs of a project. 
     * @param projectId Relevant project ID. (required)
     * @param policyId The policy ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdWebhookJobsGetAsync(Long projectId, Long policyId, final ApiCallback<List<WebhookJob>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdWebhookJobsGetValidateBeforeCall(projectId, policyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<WebhookJob>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdWebhookLasttriggerGet
     * @param projectId Relevant project ID. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdWebhookLasttriggerGetCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/webhook/lasttrigger"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdWebhookLasttriggerGetValidateBeforeCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdWebhookLasttriggerGet(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdWebhookLasttriggerGetCall(projectId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get project webhook policy last trigger info
     * This endpoint returns last trigger information of project webhook policy. 
     * @param projectId Relevant project ID. (required)
     * @return List&lt;WebhookLastTrigger&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<WebhookLastTrigger> projectsProjectIdWebhookLasttriggerGet(Long projectId) throws ApiException {
        ApiResponse<List<WebhookLastTrigger>> resp = projectsProjectIdWebhookLasttriggerGetWithHttpInfo(projectId);
        return resp.getData();
    }

    /**
     * Get project webhook policy last trigger info
     * This endpoint returns last trigger information of project webhook policy. 
     * @param projectId Relevant project ID. (required)
     * @return ApiResponse&lt;List&lt;WebhookLastTrigger&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<WebhookLastTrigger>> projectsProjectIdWebhookLasttriggerGetWithHttpInfo(Long projectId) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdWebhookLasttriggerGetValidateBeforeCall(projectId, null, null);
        Type localVarReturnType = new TypeToken<List<WebhookLastTrigger>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get project webhook policy last trigger info (asynchronously)
     * This endpoint returns last trigger information of project webhook policy. 
     * @param projectId Relevant project ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdWebhookLasttriggerGetAsync(Long projectId, final ApiCallback<List<WebhookLastTrigger>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdWebhookLasttriggerGetValidateBeforeCall(projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<WebhookLastTrigger>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdWebhookPoliciesGet
     * @param projectId Relevant project ID. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdWebhookPoliciesGetCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/webhook/policies"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdWebhookPoliciesGetValidateBeforeCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdWebhookPoliciesGet(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdWebhookPoliciesGetCall(projectId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List project webhook policies.
     * This endpoint returns webhook policies of a project. 
     * @param projectId Relevant project ID. (required)
     * @return List&lt;WebhookPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<WebhookPolicy> projectsProjectIdWebhookPoliciesGet(Long projectId) throws ApiException {
        ApiResponse<List<WebhookPolicy>> resp = projectsProjectIdWebhookPoliciesGetWithHttpInfo(projectId);
        return resp.getData();
    }

    /**
     * List project webhook policies.
     * This endpoint returns webhook policies of a project. 
     * @param projectId Relevant project ID. (required)
     * @return ApiResponse&lt;List&lt;WebhookPolicy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<WebhookPolicy>> projectsProjectIdWebhookPoliciesGetWithHttpInfo(Long projectId) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdWebhookPoliciesGetValidateBeforeCall(projectId, null, null);
        Type localVarReturnType = new TypeToken<List<WebhookPolicy>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List project webhook policies. (asynchronously)
     * This endpoint returns webhook policies of a project. 
     * @param projectId Relevant project ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdWebhookPoliciesGetAsync(Long projectId, final ApiCallback<List<WebhookPolicy>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdWebhookPoliciesGetValidateBeforeCall(projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<WebhookPolicy>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdWebhookPoliciesPolicyIdDelete
     * @param projectId Relevant project ID. (required)
     * @param policyId The id of webhook policy. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdWebhookPoliciesPolicyIdDeleteCall(Long projectId, Long policyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/webhook/policies/{policy_id}"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "policy_id" + "\\}", apiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdWebhookPoliciesPolicyIdDeleteValidateBeforeCall(Long projectId, Long policyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdWebhookPoliciesPolicyIdDelete(Async)");
        }
        
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling projectsProjectIdWebhookPoliciesPolicyIdDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdWebhookPoliciesPolicyIdDeleteCall(projectId, policyId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete webhook policy of a project
     * This endpoint is aimed to delete webhookpolicy of a project. 
     * @param projectId Relevant project ID. (required)
     * @param policyId The id of webhook policy. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void projectsProjectIdWebhookPoliciesPolicyIdDelete(Long projectId, Long policyId) throws ApiException {
        projectsProjectIdWebhookPoliciesPolicyIdDeleteWithHttpInfo(projectId, policyId);
    }

    /**
     * Delete webhook policy of a project
     * This endpoint is aimed to delete webhookpolicy of a project. 
     * @param projectId Relevant project ID. (required)
     * @param policyId The id of webhook policy. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> projectsProjectIdWebhookPoliciesPolicyIdDeleteWithHttpInfo(Long projectId, Long policyId) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdWebhookPoliciesPolicyIdDeleteValidateBeforeCall(projectId, policyId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete webhook policy of a project (asynchronously)
     * This endpoint is aimed to delete webhookpolicy of a project. 
     * @param projectId Relevant project ID. (required)
     * @param policyId The id of webhook policy. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdWebhookPoliciesPolicyIdDeleteAsync(Long projectId, Long policyId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdWebhookPoliciesPolicyIdDeleteValidateBeforeCall(projectId, policyId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdWebhookPoliciesPolicyIdGet
     * @param projectId Relevant project ID. (required)
     * @param policyId The id of webhook policy. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdWebhookPoliciesPolicyIdGetCall(Long projectId, Long policyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/webhook/policies/{policy_id}"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "policy_id" + "\\}", apiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdWebhookPoliciesPolicyIdGetValidateBeforeCall(Long projectId, Long policyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdWebhookPoliciesPolicyIdGet(Async)");
        }
        
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling projectsProjectIdWebhookPoliciesPolicyIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdWebhookPoliciesPolicyIdGetCall(projectId, policyId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get project webhook policy
     * This endpoint returns specified webhook policy of a project. 
     * @param projectId Relevant project ID. (required)
     * @param policyId The id of webhook policy. (required)
     * @return WebhookPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WebhookPolicy projectsProjectIdWebhookPoliciesPolicyIdGet(Long projectId, Long policyId) throws ApiException {
        ApiResponse<WebhookPolicy> resp = projectsProjectIdWebhookPoliciesPolicyIdGetWithHttpInfo(projectId, policyId);
        return resp.getData();
    }

    /**
     * Get project webhook policy
     * This endpoint returns specified webhook policy of a project. 
     * @param projectId Relevant project ID. (required)
     * @param policyId The id of webhook policy. (required)
     * @return ApiResponse&lt;WebhookPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WebhookPolicy> projectsProjectIdWebhookPoliciesPolicyIdGetWithHttpInfo(Long projectId, Long policyId) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdWebhookPoliciesPolicyIdGetValidateBeforeCall(projectId, policyId, null, null);
        Type localVarReturnType = new TypeToken<WebhookPolicy>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get project webhook policy (asynchronously)
     * This endpoint returns specified webhook policy of a project. 
     * @param projectId Relevant project ID. (required)
     * @param policyId The id of webhook policy. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdWebhookPoliciesPolicyIdGetAsync(Long projectId, Long policyId, final ApiCallback<WebhookPolicy> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdWebhookPoliciesPolicyIdGetValidateBeforeCall(projectId, policyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WebhookPolicy>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdWebhookPoliciesPolicyIdPut
     * @param projectId Relevant project ID. (required)
     * @param policyId The id of webhook policy. (required)
     * @param policy All properties needed except \&quot;id\&quot;, \&quot;project_id\&quot;, \&quot;creation_time\&quot;, \&quot;update_time\&quot;. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdWebhookPoliciesPolicyIdPutCall(Long projectId, Long policyId, WebhookPolicy policy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = policy;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/webhook/policies/{policy_id}"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "policy_id" + "\\}", apiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdWebhookPoliciesPolicyIdPutValidateBeforeCall(Long projectId, Long policyId, WebhookPolicy policy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdWebhookPoliciesPolicyIdPut(Async)");
        }
        
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling projectsProjectIdWebhookPoliciesPolicyIdPut(Async)");
        }
        
        // verify the required parameter 'policy' is set
        if (policy == null) {
            throw new ApiException("Missing the required parameter 'policy' when calling projectsProjectIdWebhookPoliciesPolicyIdPut(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdWebhookPoliciesPolicyIdPutCall(projectId, policyId, policy, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update webhook policy of a project.
     * This endpoint is aimed to update the webhook policy of a project. 
     * @param projectId Relevant project ID. (required)
     * @param policyId The id of webhook policy. (required)
     * @param policy All properties needed except \&quot;id\&quot;, \&quot;project_id\&quot;, \&quot;creation_time\&quot;, \&quot;update_time\&quot;. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void projectsProjectIdWebhookPoliciesPolicyIdPut(Long projectId, Long policyId, WebhookPolicy policy) throws ApiException {
        projectsProjectIdWebhookPoliciesPolicyIdPutWithHttpInfo(projectId, policyId, policy);
    }

    /**
     * Update webhook policy of a project.
     * This endpoint is aimed to update the webhook policy of a project. 
     * @param projectId Relevant project ID. (required)
     * @param policyId The id of webhook policy. (required)
     * @param policy All properties needed except \&quot;id\&quot;, \&quot;project_id\&quot;, \&quot;creation_time\&quot;, \&quot;update_time\&quot;. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> projectsProjectIdWebhookPoliciesPolicyIdPutWithHttpInfo(Long projectId, Long policyId, WebhookPolicy policy) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdWebhookPoliciesPolicyIdPutValidateBeforeCall(projectId, policyId, policy, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update webhook policy of a project. (asynchronously)
     * This endpoint is aimed to update the webhook policy of a project. 
     * @param projectId Relevant project ID. (required)
     * @param policyId The id of webhook policy. (required)
     * @param policy All properties needed except \&quot;id\&quot;, \&quot;project_id\&quot;, \&quot;creation_time\&quot;, \&quot;update_time\&quot;. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdWebhookPoliciesPolicyIdPutAsync(Long projectId, Long policyId, WebhookPolicy policy, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdWebhookPoliciesPolicyIdPutValidateBeforeCall(projectId, policyId, policy, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdWebhookPoliciesPost
     * @param projectId Relevant project ID (required)
     * @param policy Properties \&quot;targets\&quot; and \&quot;event_types\&quot; needed. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdWebhookPoliciesPostCall(Long projectId, WebhookPolicy policy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = policy;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/webhook/policies"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdWebhookPoliciesPostValidateBeforeCall(Long projectId, WebhookPolicy policy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdWebhookPoliciesPost(Async)");
        }
        
        // verify the required parameter 'policy' is set
        if (policy == null) {
            throw new ApiException("Missing the required parameter 'policy' when calling projectsProjectIdWebhookPoliciesPost(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdWebhookPoliciesPostCall(projectId, policy, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create project webhook policy.
     * This endpoint create a webhook policy if the project does not have one. 
     * @param projectId Relevant project ID (required)
     * @param policy Properties \&quot;targets\&quot; and \&quot;event_types\&quot; needed. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void projectsProjectIdWebhookPoliciesPost(Long projectId, WebhookPolicy policy) throws ApiException {
        projectsProjectIdWebhookPoliciesPostWithHttpInfo(projectId, policy);
    }

    /**
     * Create project webhook policy.
     * This endpoint create a webhook policy if the project does not have one. 
     * @param projectId Relevant project ID (required)
     * @param policy Properties \&quot;targets\&quot; and \&quot;event_types\&quot; needed. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> projectsProjectIdWebhookPoliciesPostWithHttpInfo(Long projectId, WebhookPolicy policy) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdWebhookPoliciesPostValidateBeforeCall(projectId, policy, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create project webhook policy. (asynchronously)
     * This endpoint create a webhook policy if the project does not have one. 
     * @param projectId Relevant project ID (required)
     * @param policy Properties \&quot;targets\&quot; and \&quot;event_types\&quot; needed. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdWebhookPoliciesPostAsync(Long projectId, WebhookPolicy policy, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdWebhookPoliciesPostValidateBeforeCall(projectId, policy, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for projectsProjectIdWebhookPoliciesTestPost
     * @param projectId Relevant project ID. (required)
     * @param policy Only property \&quot;targets\&quot; needed. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdWebhookPoliciesTestPostCall(Long projectId, WebhookPolicy policy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = policy;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/webhook/policies/test"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectsProjectIdWebhookPoliciesTestPostValidateBeforeCall(Long projectId, WebhookPolicy policy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsProjectIdWebhookPoliciesTestPost(Async)");
        }
        
        // verify the required parameter 'policy' is set
        if (policy == null) {
            throw new ApiException("Missing the required parameter 'policy' when calling projectsProjectIdWebhookPoliciesTestPost(Async)");
        }
        

        com.squareup.okhttp.Call call = projectsProjectIdWebhookPoliciesTestPostCall(projectId, policy, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Test project webhook connection
     * This endpoint tests webhook connection of a project. 
     * @param projectId Relevant project ID. (required)
     * @param policy Only property \&quot;targets\&quot; needed. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void projectsProjectIdWebhookPoliciesTestPost(Long projectId, WebhookPolicy policy) throws ApiException {
        projectsProjectIdWebhookPoliciesTestPostWithHttpInfo(projectId, policy);
    }

    /**
     * Test project webhook connection
     * This endpoint tests webhook connection of a project. 
     * @param projectId Relevant project ID. (required)
     * @param policy Only property \&quot;targets\&quot; needed. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> projectsProjectIdWebhookPoliciesTestPostWithHttpInfo(Long projectId, WebhookPolicy policy) throws ApiException {
        com.squareup.okhttp.Call call = projectsProjectIdWebhookPoliciesTestPostValidateBeforeCall(projectId, policy, null, null);
        return apiClient.execute(call);
    }

    /**
     * Test project webhook connection (asynchronously)
     * This endpoint tests webhook connection of a project. 
     * @param projectId Relevant project ID. (required)
     * @param policy Only property \&quot;targets\&quot; needed. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectsProjectIdWebhookPoliciesTestPostAsync(Long projectId, WebhookPolicy policy, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectsProjectIdWebhookPoliciesTestPostValidateBeforeCall(projectId, policy, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for quotasGet
     * @param reference The reference type of quota. (optional)
     * @param referenceId The reference id of quota. (optional)
     * @param sort Sort method, valid values include: &#39;hard.resource_name&#39;, &#39;-hard.resource_name&#39;, &#39;used.resource_name&#39;, &#39;-used.resource_name&#39;. Here &#39;-&#39; stands for descending order, resource_name should be the real resource name of the quota.  (optional)
     * @param page The page number, default is 1. (optional)
     * @param pageSize The size of per page, default is 10, maximum is 100. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call quotasGetCall(String reference, String referenceId, String sort, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quotas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (reference != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reference", reference));
        if (referenceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reference_id", referenceId));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call quotasGetValidateBeforeCall(String reference, String referenceId, String sort, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = quotasGetCall(reference, referenceId, sort, page, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List quotas
     * List quotas
     * @param reference The reference type of quota. (optional)
     * @param referenceId The reference id of quota. (optional)
     * @param sort Sort method, valid values include: &#39;hard.resource_name&#39;, &#39;-hard.resource_name&#39;, &#39;used.resource_name&#39;, &#39;-used.resource_name&#39;. Here &#39;-&#39; stands for descending order, resource_name should be the real resource name of the quota.  (optional)
     * @param page The page number, default is 1. (optional)
     * @param pageSize The size of per page, default is 10, maximum is 100. (optional)
     * @return List&lt;Quota&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Quota> quotasGet(String reference, String referenceId, String sort, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<List<Quota>> resp = quotasGetWithHttpInfo(reference, referenceId, sort, page, pageSize);
        return resp.getData();
    }

    /**
     * List quotas
     * List quotas
     * @param reference The reference type of quota. (optional)
     * @param referenceId The reference id of quota. (optional)
     * @param sort Sort method, valid values include: &#39;hard.resource_name&#39;, &#39;-hard.resource_name&#39;, &#39;used.resource_name&#39;, &#39;-used.resource_name&#39;. Here &#39;-&#39; stands for descending order, resource_name should be the real resource name of the quota.  (optional)
     * @param page The page number, default is 1. (optional)
     * @param pageSize The size of per page, default is 10, maximum is 100. (optional)
     * @return ApiResponse&lt;List&lt;Quota&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Quota>> quotasGetWithHttpInfo(String reference, String referenceId, String sort, Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = quotasGetValidateBeforeCall(reference, referenceId, sort, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<List<Quota>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List quotas (asynchronously)
     * List quotas
     * @param reference The reference type of quota. (optional)
     * @param referenceId The reference id of quota. (optional)
     * @param sort Sort method, valid values include: &#39;hard.resource_name&#39;, &#39;-hard.resource_name&#39;, &#39;used.resource_name&#39;, &#39;-used.resource_name&#39;. Here &#39;-&#39; stands for descending order, resource_name should be the real resource name of the quota.  (optional)
     * @param page The page number, default is 1. (optional)
     * @param pageSize The size of per page, default is 10, maximum is 100. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call quotasGetAsync(String reference, String referenceId, String sort, Integer page, Integer pageSize, final ApiCallback<List<Quota>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = quotasGetValidateBeforeCall(reference, referenceId, sort, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Quota>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for quotasIdGet
     * @param id Quota ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call quotasIdGetCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quotas/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call quotasIdGetValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling quotasIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = quotasIdGetCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the specified quota
     * Get the specified quota
     * @param id Quota ID (required)
     * @return Quota
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Quota quotasIdGet(Integer id) throws ApiException {
        ApiResponse<Quota> resp = quotasIdGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get the specified quota
     * Get the specified quota
     * @param id Quota ID (required)
     * @return ApiResponse&lt;Quota&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Quota> quotasIdGetWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = quotasIdGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<Quota>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the specified quota (asynchronously)
     * Get the specified quota
     * @param id Quota ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call quotasIdGetAsync(Integer id, final ApiCallback<Quota> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = quotasIdGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Quota>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for quotasIdPut
     * @param id Quota ID (required)
     * @param hard The new hard limits for the quota (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call quotasIdPutCall(Integer id, QuotaUpdateReq hard, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = hard;

        // create path and map variables
        String localVarPath = "/quotas/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call quotasIdPutValidateBeforeCall(Integer id, QuotaUpdateReq hard, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling quotasIdPut(Async)");
        }
        
        // verify the required parameter 'hard' is set
        if (hard == null) {
            throw new ApiException("Missing the required parameter 'hard' when calling quotasIdPut(Async)");
        }
        

        com.squareup.okhttp.Call call = quotasIdPutCall(id, hard, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update the specified quota
     * Update hard limits of the specified quota
     * @param id Quota ID (required)
     * @param hard The new hard limits for the quota (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void quotasIdPut(Integer id, QuotaUpdateReq hard) throws ApiException {
        quotasIdPutWithHttpInfo(id, hard);
    }

    /**
     * Update the specified quota
     * Update hard limits of the specified quota
     * @param id Quota ID (required)
     * @param hard The new hard limits for the quota (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> quotasIdPutWithHttpInfo(Integer id, QuotaUpdateReq hard) throws ApiException {
        com.squareup.okhttp.Call call = quotasIdPutValidateBeforeCall(id, hard, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update the specified quota (asynchronously)
     * Update hard limits of the specified quota
     * @param id Quota ID (required)
     * @param hard The new hard limits for the quota (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call quotasIdPutAsync(Integer id, QuotaUpdateReq hard, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = quotasIdPutValidateBeforeCall(id, hard, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for registriesGet
     * @param name Registry&#39;s name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call registriesGetCall(String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call registriesGetValidateBeforeCall(String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = registriesGetCall(name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List registries.
     * This endpoint let user list filtered registries by name, if name is nil, list returns all registries. 
     * @param name Registry&#39;s name. (optional)
     * @return List&lt;Registry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Registry> registriesGet(String name) throws ApiException {
        ApiResponse<List<Registry>> resp = registriesGetWithHttpInfo(name);
        return resp.getData();
    }

    /**
     * List registries.
     * This endpoint let user list filtered registries by name, if name is nil, list returns all registries. 
     * @param name Registry&#39;s name. (optional)
     * @return ApiResponse&lt;List&lt;Registry&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Registry>> registriesGetWithHttpInfo(String name) throws ApiException {
        com.squareup.okhttp.Call call = registriesGetValidateBeforeCall(name, null, null);
        Type localVarReturnType = new TypeToken<List<Registry>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List registries. (asynchronously)
     * This endpoint let user list filtered registries by name, if name is nil, list returns all registries. 
     * @param name Registry&#39;s name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registriesGetAsync(String name, final ApiCallback<List<Registry>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registriesGetValidateBeforeCall(name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Registry>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for registriesIdDelete
     * @param id The registry&#39;s ID. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call registriesIdDeleteCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registries/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call registriesIdDeleteValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling registriesIdDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = registriesIdDeleteCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete specific registry.
     * This endpoint is for to delete specific registry. 
     * @param id The registry&#39;s ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void registriesIdDelete(Long id) throws ApiException {
        registriesIdDeleteWithHttpInfo(id);
    }

    /**
     * Delete specific registry.
     * This endpoint is for to delete specific registry. 
     * @param id The registry&#39;s ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> registriesIdDeleteWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = registriesIdDeleteValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete specific registry. (asynchronously)
     * This endpoint is for to delete specific registry. 
     * @param id The registry&#39;s ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registriesIdDeleteAsync(Long id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registriesIdDeleteValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for registriesIdGet
     * @param id The registry ID. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call registriesIdGetCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registries/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call registriesIdGetValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling registriesIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = registriesIdGetCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get registry.
     * This endpoint is for get specific registry.
     * @param id The registry ID. (required)
     * @return Registry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Registry registriesIdGet(Long id) throws ApiException {
        ApiResponse<Registry> resp = registriesIdGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get registry.
     * This endpoint is for get specific registry.
     * @param id The registry ID. (required)
     * @return ApiResponse&lt;Registry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Registry> registriesIdGetWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = registriesIdGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<Registry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get registry. (asynchronously)
     * This endpoint is for get specific registry.
     * @param id The registry ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registriesIdGetAsync(Long id, final ApiCallback<Registry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registriesIdGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Registry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for registriesIdInfoGet
     * @param id The registry ID. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call registriesIdInfoGetCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registries/{id}/info"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call registriesIdInfoGetValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling registriesIdInfoGet(Async)");
        }
        

        com.squareup.okhttp.Call call = registriesIdInfoGetCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get registry info.
     * Get the info of one specific registry.
     * @param id The registry ID. (required)
     * @return RegistryInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RegistryInfo registriesIdInfoGet(Long id) throws ApiException {
        ApiResponse<RegistryInfo> resp = registriesIdInfoGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get registry info.
     * Get the info of one specific registry.
     * @param id The registry ID. (required)
     * @return ApiResponse&lt;RegistryInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RegistryInfo> registriesIdInfoGetWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = registriesIdInfoGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<RegistryInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get registry info. (asynchronously)
     * Get the info of one specific registry.
     * @param id The registry ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registriesIdInfoGetAsync(Long id, final ApiCallback<RegistryInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registriesIdInfoGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RegistryInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for registriesIdNamespaceGet
     * @param id The registry ID. (required)
     * @param name The name of namespace. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call registriesIdNamespaceGetCall(Integer id, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registries/{id}/namespace"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call registriesIdNamespaceGetValidateBeforeCall(Integer id, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling registriesIdNamespaceGet(Async)");
        }
        

        com.squareup.okhttp.Call call = registriesIdNamespaceGetCall(id, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List namespaces of registry
     * This endpoint let user list namespaces of registry according to query. 
     * @param id The registry ID. (required)
     * @param name The name of namespace. (optional)
     * @return List&lt;Namespace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Namespace> registriesIdNamespaceGet(Integer id, String name) throws ApiException {
        ApiResponse<List<Namespace>> resp = registriesIdNamespaceGetWithHttpInfo(id, name);
        return resp.getData();
    }

    /**
     * List namespaces of registry
     * This endpoint let user list namespaces of registry according to query. 
     * @param id The registry ID. (required)
     * @param name The name of namespace. (optional)
     * @return ApiResponse&lt;List&lt;Namespace&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Namespace>> registriesIdNamespaceGetWithHttpInfo(Integer id, String name) throws ApiException {
        com.squareup.okhttp.Call call = registriesIdNamespaceGetValidateBeforeCall(id, name, null, null);
        Type localVarReturnType = new TypeToken<List<Namespace>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List namespaces of registry (asynchronously)
     * This endpoint let user list namespaces of registry according to query. 
     * @param id The registry ID. (required)
     * @param name The name of namespace. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registriesIdNamespaceGetAsync(Integer id, String name, final ApiCallback<List<Namespace>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registriesIdNamespaceGetValidateBeforeCall(id, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Namespace>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for registriesIdPut
     * @param id The registry&#39;s ID. (required)
     * @param repoTarget Updates registry. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call registriesIdPutCall(Long id, PutRegistry repoTarget, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = repoTarget;

        // create path and map variables
        String localVarPath = "/registries/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call registriesIdPutValidateBeforeCall(Long id, PutRegistry repoTarget, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling registriesIdPut(Async)");
        }
        
        // verify the required parameter 'repoTarget' is set
        if (repoTarget == null) {
            throw new ApiException("Missing the required parameter 'repoTarget' when calling registriesIdPut(Async)");
        }
        

        com.squareup.okhttp.Call call = registriesIdPutCall(id, repoTarget, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a given registry.
     * This endpoint is for update a given registry. 
     * @param id The registry&#39;s ID. (required)
     * @param repoTarget Updates registry. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void registriesIdPut(Long id, PutRegistry repoTarget) throws ApiException {
        registriesIdPutWithHttpInfo(id, repoTarget);
    }

    /**
     * Update a given registry.
     * This endpoint is for update a given registry. 
     * @param id The registry&#39;s ID. (required)
     * @param repoTarget Updates registry. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> registriesIdPutWithHttpInfo(Long id, PutRegistry repoTarget) throws ApiException {
        com.squareup.okhttp.Call call = registriesIdPutValidateBeforeCall(id, repoTarget, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a given registry. (asynchronously)
     * This endpoint is for update a given registry. 
     * @param id The registry&#39;s ID. (required)
     * @param repoTarget Updates registry. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registriesIdPutAsync(Long id, PutRegistry repoTarget, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registriesIdPutValidateBeforeCall(id, repoTarget, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for registriesPingPost
     * @param registry Registry to ping. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call registriesPingPostCall(Registry registry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = registry;

        // create path and map variables
        String localVarPath = "/registries/ping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call registriesPingPostValidateBeforeCall(Registry registry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'registry' is set
        if (registry == null) {
            throw new ApiException("Missing the required parameter 'registry' when calling registriesPingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = registriesPingPostCall(registry, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Ping status of a registry.
     * This endpoint checks status of a registry, the registry can be given by ID or URL (together with credential) 
     * @param registry Registry to ping. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void registriesPingPost(Registry registry) throws ApiException {
        registriesPingPostWithHttpInfo(registry);
    }

    /**
     * Ping status of a registry.
     * This endpoint checks status of a registry, the registry can be given by ID or URL (together with credential) 
     * @param registry Registry to ping. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> registriesPingPostWithHttpInfo(Registry registry) throws ApiException {
        com.squareup.okhttp.Call call = registriesPingPostValidateBeforeCall(registry, null, null);
        return apiClient.execute(call);
    }

    /**
     * Ping status of a registry. (asynchronously)
     * This endpoint checks status of a registry, the registry can be given by ID or URL (together with credential) 
     * @param registry Registry to ping. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registriesPingPostAsync(Registry registry, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registriesPingPostValidateBeforeCall(registry, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for registriesPost
     * @param registry New created registry. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call registriesPostCall(Registry registry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = registry;

        // create path and map variables
        String localVarPath = "/registries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call registriesPostValidateBeforeCall(Registry registry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'registry' is set
        if (registry == null) {
            throw new ApiException("Missing the required parameter 'registry' when calling registriesPost(Async)");
        }
        

        com.squareup.okhttp.Call call = registriesPostCall(registry, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new registry.
     * This endpoint is for user to create a new registry. 
     * @param registry New created registry. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void registriesPost(Registry registry) throws ApiException {
        registriesPostWithHttpInfo(registry);
    }

    /**
     * Create a new registry.
     * This endpoint is for user to create a new registry. 
     * @param registry New created registry. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> registriesPostWithHttpInfo(Registry registry) throws ApiException {
        com.squareup.okhttp.Call call = registriesPostValidateBeforeCall(registry, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create a new registry. (asynchronously)
     * This endpoint is for user to create a new registry. 
     * @param registry New created registry. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registriesPostAsync(Registry registry, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registriesPostValidateBeforeCall(registry, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for replicationAdaptersGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replicationAdaptersGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/replication/adapters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replicationAdaptersGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = replicationAdaptersGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * List supported adapters.
     * This endpoint let user list supported adapters. 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> replicationAdaptersGet() throws ApiException {
        ApiResponse<List<String>> resp = replicationAdaptersGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * List supported adapters.
     * This endpoint let user list supported adapters. 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> replicationAdaptersGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = replicationAdaptersGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List supported adapters. (asynchronously)
     * This endpoint let user list supported adapters. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replicationAdaptersGetAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replicationAdaptersGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for replicationExecutionsGet
     * @param policyId The policy ID. (optional)
     * @param status The execution status. (optional)
     * @param trigger The trigger mode. (optional)
     * @param page The page. (optional)
     * @param pageSize The page size. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replicationExecutionsGetCall(Integer policyId, String status, String trigger, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/replication/executions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (policyId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("policy_id", policyId));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (trigger != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("trigger", trigger));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replicationExecutionsGetValidateBeforeCall(Integer policyId, String status, String trigger, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = replicationExecutionsGetCall(policyId, status, trigger, page, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List replication executions.
     * This endpoint let user list replication executions. 
     * @param policyId The policy ID. (optional)
     * @param status The execution status. (optional)
     * @param trigger The trigger mode. (optional)
     * @param page The page. (optional)
     * @param pageSize The page size. (optional)
     * @return List&lt;ReplicationExecution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ReplicationExecution> replicationExecutionsGet(Integer policyId, String status, String trigger, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<List<ReplicationExecution>> resp = replicationExecutionsGetWithHttpInfo(policyId, status, trigger, page, pageSize);
        return resp.getData();
    }

    /**
     * List replication executions.
     * This endpoint let user list replication executions. 
     * @param policyId The policy ID. (optional)
     * @param status The execution status. (optional)
     * @param trigger The trigger mode. (optional)
     * @param page The page. (optional)
     * @param pageSize The page size. (optional)
     * @return ApiResponse&lt;List&lt;ReplicationExecution&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ReplicationExecution>> replicationExecutionsGetWithHttpInfo(Integer policyId, String status, String trigger, Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = replicationExecutionsGetValidateBeforeCall(policyId, status, trigger, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<List<ReplicationExecution>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List replication executions. (asynchronously)
     * This endpoint let user list replication executions. 
     * @param policyId The policy ID. (optional)
     * @param status The execution status. (optional)
     * @param trigger The trigger mode. (optional)
     * @param page The page. (optional)
     * @param pageSize The page size. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replicationExecutionsGetAsync(Integer policyId, String status, String trigger, Integer page, Integer pageSize, final ApiCallback<List<ReplicationExecution>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replicationExecutionsGetValidateBeforeCall(policyId, status, trigger, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ReplicationExecution>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for replicationExecutionsIdGet
     * @param id The execution ID. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replicationExecutionsIdGetCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/replication/executions/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replicationExecutionsIdGetValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling replicationExecutionsIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = replicationExecutionsIdGetCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the execution of the replication.
     * This endpoint is for user to get one execution of the replication. 
     * @param id The execution ID. (required)
     * @return ReplicationExecution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReplicationExecution replicationExecutionsIdGet(Long id) throws ApiException {
        ApiResponse<ReplicationExecution> resp = replicationExecutionsIdGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get the execution of the replication.
     * This endpoint is for user to get one execution of the replication. 
     * @param id The execution ID. (required)
     * @return ApiResponse&lt;ReplicationExecution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReplicationExecution> replicationExecutionsIdGetWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = replicationExecutionsIdGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<ReplicationExecution>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the execution of the replication. (asynchronously)
     * This endpoint is for user to get one execution of the replication. 
     * @param id The execution ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replicationExecutionsIdGetAsync(Long id, final ApiCallback<ReplicationExecution> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replicationExecutionsIdGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReplicationExecution>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for replicationExecutionsIdPut
     * @param id The execution ID. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replicationExecutionsIdPutCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/replication/executions/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replicationExecutionsIdPutValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling replicationExecutionsIdPut(Async)");
        }
        

        com.squareup.okhttp.Call call = replicationExecutionsIdPutCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Stop the execution of the replication.
     * This endpoint is for user to stop one execution of the replication. 
     * @param id The execution ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void replicationExecutionsIdPut(Long id) throws ApiException {
        replicationExecutionsIdPutWithHttpInfo(id);
    }

    /**
     * Stop the execution of the replication.
     * This endpoint is for user to stop one execution of the replication. 
     * @param id The execution ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> replicationExecutionsIdPutWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = replicationExecutionsIdPutValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Stop the execution of the replication. (asynchronously)
     * This endpoint is for user to stop one execution of the replication. 
     * @param id The execution ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replicationExecutionsIdPutAsync(Long id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replicationExecutionsIdPutValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for replicationExecutionsIdTasksGet
     * @param id The execution ID. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replicationExecutionsIdTasksGetCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/replication/executions/{id}/tasks"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replicationExecutionsIdTasksGetValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling replicationExecutionsIdTasksGet(Async)");
        }
        

        com.squareup.okhttp.Call call = replicationExecutionsIdTasksGetCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the task list of one execution.
     * This endpoint is for user to get the task list of one execution. 
     * @param id The execution ID. (required)
     * @return List&lt;ReplicationTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ReplicationTask> replicationExecutionsIdTasksGet(Long id) throws ApiException {
        ApiResponse<List<ReplicationTask>> resp = replicationExecutionsIdTasksGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get the task list of one execution.
     * This endpoint is for user to get the task list of one execution. 
     * @param id The execution ID. (required)
     * @return ApiResponse&lt;List&lt;ReplicationTask&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ReplicationTask>> replicationExecutionsIdTasksGetWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = replicationExecutionsIdTasksGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<List<ReplicationTask>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the task list of one execution. (asynchronously)
     * This endpoint is for user to get the task list of one execution. 
     * @param id The execution ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replicationExecutionsIdTasksGetAsync(Long id, final ApiCallback<List<ReplicationTask>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replicationExecutionsIdTasksGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ReplicationTask>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for replicationExecutionsIdTasksTaskIdLogGet
     * @param id The execution ID. (required)
     * @param taskId The task ID. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replicationExecutionsIdTasksTaskIdLogGetCall(Long id, Long taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/replication/executions/{id}/tasks/{task_id}/log"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "task_id" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replicationExecutionsIdTasksTaskIdLogGetValidateBeforeCall(Long id, Long taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling replicationExecutionsIdTasksTaskIdLogGet(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling replicationExecutionsIdTasksTaskIdLogGet(Async)");
        }
        

        com.squareup.okhttp.Call call = replicationExecutionsIdTasksTaskIdLogGetCall(id, taskId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the log of one task.
     * This endpoint is for user to get the log of one task. 
     * @param id The execution ID. (required)
     * @param taskId The task ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void replicationExecutionsIdTasksTaskIdLogGet(Long id, Long taskId) throws ApiException {
        replicationExecutionsIdTasksTaskIdLogGetWithHttpInfo(id, taskId);
    }

    /**
     * Get the log of one task.
     * This endpoint is for user to get the log of one task. 
     * @param id The execution ID. (required)
     * @param taskId The task ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> replicationExecutionsIdTasksTaskIdLogGetWithHttpInfo(Long id, Long taskId) throws ApiException {
        com.squareup.okhttp.Call call = replicationExecutionsIdTasksTaskIdLogGetValidateBeforeCall(id, taskId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the log of one task. (asynchronously)
     * This endpoint is for user to get the log of one task. 
     * @param id The execution ID. (required)
     * @param taskId The task ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replicationExecutionsIdTasksTaskIdLogGetAsync(Long id, Long taskId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replicationExecutionsIdTasksTaskIdLogGetValidateBeforeCall(id, taskId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for replicationExecutionsPost
     * @param execution The execution that needs to be started, only the property \&quot;policy_id\&quot; is needed. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replicationExecutionsPostCall(ReplicationExecution execution, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = execution;

        // create path and map variables
        String localVarPath = "/replication/executions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replicationExecutionsPostValidateBeforeCall(ReplicationExecution execution, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'execution' is set
        if (execution == null) {
            throw new ApiException("Missing the required parameter 'execution' when calling replicationExecutionsPost(Async)");
        }
        

        com.squareup.okhttp.Call call = replicationExecutionsPostCall(execution, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Start one execution of the replication.
     * This endpoint is for user to start one execution of the replication. 
     * @param execution The execution that needs to be started, only the property \&quot;policy_id\&quot; is needed. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void replicationExecutionsPost(ReplicationExecution execution) throws ApiException {
        replicationExecutionsPostWithHttpInfo(execution);
    }

    /**
     * Start one execution of the replication.
     * This endpoint is for user to start one execution of the replication. 
     * @param execution The execution that needs to be started, only the property \&quot;policy_id\&quot; is needed. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> replicationExecutionsPostWithHttpInfo(ReplicationExecution execution) throws ApiException {
        com.squareup.okhttp.Call call = replicationExecutionsPostValidateBeforeCall(execution, null, null);
        return apiClient.execute(call);
    }

    /**
     * Start one execution of the replication. (asynchronously)
     * This endpoint is for user to start one execution of the replication. 
     * @param execution The execution that needs to be started, only the property \&quot;policy_id\&quot; is needed. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replicationExecutionsPostAsync(ReplicationExecution execution, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replicationExecutionsPostValidateBeforeCall(execution, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for replicationPoliciesGet
     * @param name The replication policy name. (optional)
     * @param page The page nubmer. (optional)
     * @param pageSize The size of per page. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replicationPoliciesGetCall(String name, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/replication/policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replicationPoliciesGetValidateBeforeCall(String name, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = replicationPoliciesGetCall(name, page, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List replication policies
     * This endpoint let user list replication policies 
     * @param name The replication policy name. (optional)
     * @param page The page nubmer. (optional)
     * @param pageSize The size of per page. (optional)
     * @return List&lt;ReplicationPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ReplicationPolicy> replicationPoliciesGet(String name, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<List<ReplicationPolicy>> resp = replicationPoliciesGetWithHttpInfo(name, page, pageSize);
        return resp.getData();
    }

    /**
     * List replication policies
     * This endpoint let user list replication policies 
     * @param name The replication policy name. (optional)
     * @param page The page nubmer. (optional)
     * @param pageSize The size of per page. (optional)
     * @return ApiResponse&lt;List&lt;ReplicationPolicy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ReplicationPolicy>> replicationPoliciesGetWithHttpInfo(String name, Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = replicationPoliciesGetValidateBeforeCall(name, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<List<ReplicationPolicy>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List replication policies (asynchronously)
     * This endpoint let user list replication policies 
     * @param name The replication policy name. (optional)
     * @param page The page nubmer. (optional)
     * @param pageSize The size of per page. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replicationPoliciesGetAsync(String name, Integer page, Integer pageSize, final ApiCallback<List<ReplicationPolicy>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replicationPoliciesGetValidateBeforeCall(name, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ReplicationPolicy>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for replicationPoliciesIdDelete
     * @param id Replication policy ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replicationPoliciesIdDeleteCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/replication/policies/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replicationPoliciesIdDeleteValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling replicationPoliciesIdDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = replicationPoliciesIdDeleteCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete the replication policy specified by ID.
     * Delete the replication policy specified by ID. 
     * @param id Replication policy ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void replicationPoliciesIdDelete(Long id) throws ApiException {
        replicationPoliciesIdDeleteWithHttpInfo(id);
    }

    /**
     * Delete the replication policy specified by ID.
     * Delete the replication policy specified by ID. 
     * @param id Replication policy ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> replicationPoliciesIdDeleteWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = replicationPoliciesIdDeleteValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete the replication policy specified by ID. (asynchronously)
     * Delete the replication policy specified by ID. 
     * @param id Replication policy ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replicationPoliciesIdDeleteAsync(Long id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replicationPoliciesIdDeleteValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for replicationPoliciesIdGet
     * @param id policy ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replicationPoliciesIdGetCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/replication/policies/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replicationPoliciesIdGetValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling replicationPoliciesIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = replicationPoliciesIdGetCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get replication policy.
     * This endpoint let user get replication policy by specific ID. 
     * @param id policy ID (required)
     * @return ReplicationPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReplicationPolicy replicationPoliciesIdGet(Long id) throws ApiException {
        ApiResponse<ReplicationPolicy> resp = replicationPoliciesIdGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get replication policy.
     * This endpoint let user get replication policy by specific ID. 
     * @param id policy ID (required)
     * @return ApiResponse&lt;ReplicationPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReplicationPolicy> replicationPoliciesIdGetWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = replicationPoliciesIdGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<ReplicationPolicy>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get replication policy. (asynchronously)
     * This endpoint let user get replication policy by specific ID. 
     * @param id policy ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replicationPoliciesIdGetAsync(Long id, final ApiCallback<ReplicationPolicy> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replicationPoliciesIdGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReplicationPolicy>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for replicationPoliciesIdPut
     * @param id policy ID (required)
     * @param policy The replication policy model. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replicationPoliciesIdPutCall(Long id, ReplicationPolicy policy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = policy;

        // create path and map variables
        String localVarPath = "/replication/policies/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replicationPoliciesIdPutValidateBeforeCall(Long id, ReplicationPolicy policy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling replicationPoliciesIdPut(Async)");
        }
        
        // verify the required parameter 'policy' is set
        if (policy == null) {
            throw new ApiException("Missing the required parameter 'policy' when calling replicationPoliciesIdPut(Async)");
        }
        

        com.squareup.okhttp.Call call = replicationPoliciesIdPutCall(id, policy, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update the replication policy
     * This endpoint let user update policy. 
     * @param id policy ID (required)
     * @param policy The replication policy model. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void replicationPoliciesIdPut(Long id, ReplicationPolicy policy) throws ApiException {
        replicationPoliciesIdPutWithHttpInfo(id, policy);
    }

    /**
     * Update the replication policy
     * This endpoint let user update policy. 
     * @param id policy ID (required)
     * @param policy The replication policy model. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> replicationPoliciesIdPutWithHttpInfo(Long id, ReplicationPolicy policy) throws ApiException {
        com.squareup.okhttp.Call call = replicationPoliciesIdPutValidateBeforeCall(id, policy, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update the replication policy (asynchronously)
     * This endpoint let user update policy. 
     * @param id policy ID (required)
     * @param policy The replication policy model. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replicationPoliciesIdPutAsync(Long id, ReplicationPolicy policy, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replicationPoliciesIdPutValidateBeforeCall(id, policy, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for replicationPoliciesPost
     * @param policy The policy model. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replicationPoliciesPostCall(ReplicationPolicy policy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = policy;

        // create path and map variables
        String localVarPath = "/replication/policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replicationPoliciesPostValidateBeforeCall(ReplicationPolicy policy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'policy' is set
        if (policy == null) {
            throw new ApiException("Missing the required parameter 'policy' when calling replicationPoliciesPost(Async)");
        }
        

        com.squareup.okhttp.Call call = replicationPoliciesPostCall(policy, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a replication policy
     * This endpoint let user create a replication policy 
     * @param policy The policy model. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void replicationPoliciesPost(ReplicationPolicy policy) throws ApiException {
        replicationPoliciesPostWithHttpInfo(policy);
    }

    /**
     * Create a replication policy
     * This endpoint let user create a replication policy 
     * @param policy The policy model. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> replicationPoliciesPostWithHttpInfo(ReplicationPolicy policy) throws ApiException {
        com.squareup.okhttp.Call call = replicationPoliciesPostValidateBeforeCall(policy, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create a replication policy (asynchronously)
     * This endpoint let user create a replication policy 
     * @param policy The policy model. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replicationPoliciesPostAsync(ReplicationPolicy policy, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replicationPoliciesPostValidateBeforeCall(policy, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for repositoriesGet
     * @param projectId Relevant project ID. (required)
     * @param q Repo name for filtering results. (optional)
     * @param sort Sort method, valid values include: &#39;name&#39;, &#39;-name&#39;, &#39;creation_time&#39;, &#39;-creation_time&#39;, &#39;update_time&#39;, &#39;-update_time&#39;. Here &#39;-&#39; stands for descending order.  (optional)
     * @param labelId The ID of label used to filter the result. (optional)
     * @param page The page number, default is 1. (optional)
     * @param pageSize The size of per page, default is 10, maximum is 100. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call repositoriesGetCall(Integer projectId, String q, String sort, Integer labelId, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (projectId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("project_id", projectId));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (labelId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("label_id", labelId));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call repositoriesGetValidateBeforeCall(Integer projectId, String q, String sort, Integer labelId, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling repositoriesGet(Async)");
        }
        

        com.squareup.okhttp.Call call = repositoriesGetCall(projectId, q, sort, labelId, page, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get repositories accompany with relevant project and repo name.
     * This endpoint lets user search repositories accompanying with relevant project ID and repo name. Repositories can be sorted by repo name, creation_time, update_time in either ascending or descending order. 
     * @param projectId Relevant project ID. (required)
     * @param q Repo name for filtering results. (optional)
     * @param sort Sort method, valid values include: &#39;name&#39;, &#39;-name&#39;, &#39;creation_time&#39;, &#39;-creation_time&#39;, &#39;update_time&#39;, &#39;-update_time&#39;. Here &#39;-&#39; stands for descending order.  (optional)
     * @param labelId The ID of label used to filter the result. (optional)
     * @param page The page number, default is 1. (optional)
     * @param pageSize The size of per page, default is 10, maximum is 100. (optional)
     * @return List&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Repository> repositoriesGet(Integer projectId, String q, String sort, Integer labelId, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<List<Repository>> resp = repositoriesGetWithHttpInfo(projectId, q, sort, labelId, page, pageSize);
        return resp.getData();
    }

    /**
     * Get repositories accompany with relevant project and repo name.
     * This endpoint lets user search repositories accompanying with relevant project ID and repo name. Repositories can be sorted by repo name, creation_time, update_time in either ascending or descending order. 
     * @param projectId Relevant project ID. (required)
     * @param q Repo name for filtering results. (optional)
     * @param sort Sort method, valid values include: &#39;name&#39;, &#39;-name&#39;, &#39;creation_time&#39;, &#39;-creation_time&#39;, &#39;update_time&#39;, &#39;-update_time&#39;. Here &#39;-&#39; stands for descending order.  (optional)
     * @param labelId The ID of label used to filter the result. (optional)
     * @param page The page number, default is 1. (optional)
     * @param pageSize The size of per page, default is 10, maximum is 100. (optional)
     * @return ApiResponse&lt;List&lt;Repository&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Repository>> repositoriesGetWithHttpInfo(Integer projectId, String q, String sort, Integer labelId, Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = repositoriesGetValidateBeforeCall(projectId, q, sort, labelId, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<List<Repository>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get repositories accompany with relevant project and repo name. (asynchronously)
     * This endpoint lets user search repositories accompanying with relevant project ID and repo name. Repositories can be sorted by repo name, creation_time, update_time in either ascending or descending order. 
     * @param projectId Relevant project ID. (required)
     * @param q Repo name for filtering results. (optional)
     * @param sort Sort method, valid values include: &#39;name&#39;, &#39;-name&#39;, &#39;creation_time&#39;, &#39;-creation_time&#39;, &#39;update_time&#39;, &#39;-update_time&#39;. Here &#39;-&#39; stands for descending order.  (optional)
     * @param labelId The ID of label used to filter the result. (optional)
     * @param page The page number, default is 1. (optional)
     * @param pageSize The size of per page, default is 10, maximum is 100. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call repositoriesGetAsync(Integer projectId, String q, String sort, Integer labelId, Integer page, Integer pageSize, final ApiCallback<List<Repository>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = repositoriesGetValidateBeforeCall(projectId, q, sort, labelId, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Repository>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for repositoriesRepoNameDelete
     * @param repoName The name of repository which will be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call repositoriesRepoNameDeleteCall(String repoName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{repo_name}"
            .replaceAll("\\{" + "repo_name" + "\\}", apiClient.escapeString(repoName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call repositoriesRepoNameDeleteValidateBeforeCall(String repoName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repoName' is set
        if (repoName == null) {
            throw new ApiException("Missing the required parameter 'repoName' when calling repositoriesRepoNameDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = repositoriesRepoNameDeleteCall(repoName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a repository.
     * This endpoint let user delete a repository with name. 
     * @param repoName The name of repository which will be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void repositoriesRepoNameDelete(String repoName) throws ApiException {
        repositoriesRepoNameDeleteWithHttpInfo(repoName);
    }

    /**
     * Delete a repository.
     * This endpoint let user delete a repository with name. 
     * @param repoName The name of repository which will be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> repositoriesRepoNameDeleteWithHttpInfo(String repoName) throws ApiException {
        com.squareup.okhttp.Call call = repositoriesRepoNameDeleteValidateBeforeCall(repoName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a repository. (asynchronously)
     * This endpoint let user delete a repository with name. 
     * @param repoName The name of repository which will be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call repositoriesRepoNameDeleteAsync(String repoName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = repositoriesRepoNameDeleteValidateBeforeCall(repoName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for repositoriesRepoNameLabelsGet
     * @param repoName The name of repository. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call repositoriesRepoNameLabelsGetCall(String repoName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{repo_name}/labels"
            .replaceAll("\\{" + "repo_name" + "\\}", apiClient.escapeString(repoName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call repositoriesRepoNameLabelsGetValidateBeforeCall(String repoName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repoName' is set
        if (repoName == null) {
            throw new ApiException("Missing the required parameter 'repoName' when calling repositoriesRepoNameLabelsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = repositoriesRepoNameLabelsGetCall(repoName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get labels of a repository.
     * Get labels of a repository specified by the repo_name. 
     * @param repoName The name of repository. (required)
     * @return List&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Label> repositoriesRepoNameLabelsGet(String repoName) throws ApiException {
        ApiResponse<List<Label>> resp = repositoriesRepoNameLabelsGetWithHttpInfo(repoName);
        return resp.getData();
    }

    /**
     * Get labels of a repository.
     * Get labels of a repository specified by the repo_name. 
     * @param repoName The name of repository. (required)
     * @return ApiResponse&lt;List&lt;Label&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Label>> repositoriesRepoNameLabelsGetWithHttpInfo(String repoName) throws ApiException {
        com.squareup.okhttp.Call call = repositoriesRepoNameLabelsGetValidateBeforeCall(repoName, null, null);
        Type localVarReturnType = new TypeToken<List<Label>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get labels of a repository. (asynchronously)
     * Get labels of a repository specified by the repo_name. 
     * @param repoName The name of repository. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call repositoriesRepoNameLabelsGetAsync(String repoName, final ApiCallback<List<Label>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = repositoriesRepoNameLabelsGetValidateBeforeCall(repoName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Label>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for repositoriesRepoNameLabelsLabelIdDelete
     * @param repoName The name of repository. (required)
     * @param labelId The ID of label. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call repositoriesRepoNameLabelsLabelIdDeleteCall(String repoName, Integer labelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{repo_name}/labels/{label_id}"
            .replaceAll("\\{" + "repo_name" + "\\}", apiClient.escapeString(repoName.toString()))
            .replaceAll("\\{" + "label_id" + "\\}", apiClient.escapeString(labelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call repositoriesRepoNameLabelsLabelIdDeleteValidateBeforeCall(String repoName, Integer labelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repoName' is set
        if (repoName == null) {
            throw new ApiException("Missing the required parameter 'repoName' when calling repositoriesRepoNameLabelsLabelIdDelete(Async)");
        }
        
        // verify the required parameter 'labelId' is set
        if (labelId == null) {
            throw new ApiException("Missing the required parameter 'labelId' when calling repositoriesRepoNameLabelsLabelIdDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = repositoriesRepoNameLabelsLabelIdDeleteCall(repoName, labelId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete label from the repository.
     * Delete the label from the repository specified by the repo_name. 
     * @param repoName The name of repository. (required)
     * @param labelId The ID of label. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void repositoriesRepoNameLabelsLabelIdDelete(String repoName, Integer labelId) throws ApiException {
        repositoriesRepoNameLabelsLabelIdDeleteWithHttpInfo(repoName, labelId);
    }

    /**
     * Delete label from the repository.
     * Delete the label from the repository specified by the repo_name. 
     * @param repoName The name of repository. (required)
     * @param labelId The ID of label. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> repositoriesRepoNameLabelsLabelIdDeleteWithHttpInfo(String repoName, Integer labelId) throws ApiException {
        com.squareup.okhttp.Call call = repositoriesRepoNameLabelsLabelIdDeleteValidateBeforeCall(repoName, labelId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete label from the repository. (asynchronously)
     * Delete the label from the repository specified by the repo_name. 
     * @param repoName The name of repository. (required)
     * @param labelId The ID of label. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call repositoriesRepoNameLabelsLabelIdDeleteAsync(String repoName, Integer labelId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = repositoriesRepoNameLabelsLabelIdDeleteValidateBeforeCall(repoName, labelId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for repositoriesRepoNameLabelsPost
     * @param repoName The name of repository. (required)
     * @param label Only the ID property is required. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call repositoriesRepoNameLabelsPostCall(String repoName, Label label, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = label;

        // create path and map variables
        String localVarPath = "/repositories/{repo_name}/labels"
            .replaceAll("\\{" + "repo_name" + "\\}", apiClient.escapeString(repoName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call repositoriesRepoNameLabelsPostValidateBeforeCall(String repoName, Label label, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repoName' is set
        if (repoName == null) {
            throw new ApiException("Missing the required parameter 'repoName' when calling repositoriesRepoNameLabelsPost(Async)");
        }
        
        // verify the required parameter 'label' is set
        if (label == null) {
            throw new ApiException("Missing the required parameter 'label' when calling repositoriesRepoNameLabelsPost(Async)");
        }
        

        com.squareup.okhttp.Call call = repositoriesRepoNameLabelsPostCall(repoName, label, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add a label to the repository.
     * Add a label to the repository. 
     * @param repoName The name of repository. (required)
     * @param label Only the ID property is required. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void repositoriesRepoNameLabelsPost(String repoName, Label label) throws ApiException {
        repositoriesRepoNameLabelsPostWithHttpInfo(repoName, label);
    }

    /**
     * Add a label to the repository.
     * Add a label to the repository. 
     * @param repoName The name of repository. (required)
     * @param label Only the ID property is required. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> repositoriesRepoNameLabelsPostWithHttpInfo(String repoName, Label label) throws ApiException {
        com.squareup.okhttp.Call call = repositoriesRepoNameLabelsPostValidateBeforeCall(repoName, label, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add a label to the repository. (asynchronously)
     * Add a label to the repository. 
     * @param repoName The name of repository. (required)
     * @param label Only the ID property is required. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call repositoriesRepoNameLabelsPostAsync(String repoName, Label label, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = repositoriesRepoNameLabelsPostValidateBeforeCall(repoName, label, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for repositoriesRepoNamePut
     * @param repoName The name of repository which will be deleted. (required)
     * @param description The description of the repository. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call repositoriesRepoNamePutCall(String repoName, RepositoryDescription description, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = description;

        // create path and map variables
        String localVarPath = "/repositories/{repo_name}"
            .replaceAll("\\{" + "repo_name" + "\\}", apiClient.escapeString(repoName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call repositoriesRepoNamePutValidateBeforeCall(String repoName, RepositoryDescription description, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repoName' is set
        if (repoName == null) {
            throw new ApiException("Missing the required parameter 'repoName' when calling repositoriesRepoNamePut(Async)");
        }
        
        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling repositoriesRepoNamePut(Async)");
        }
        

        com.squareup.okhttp.Call call = repositoriesRepoNamePutCall(repoName, description, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update description of the repository.
     * This endpoint is used to update description of the repository. 
     * @param repoName The name of repository which will be deleted. (required)
     * @param description The description of the repository. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void repositoriesRepoNamePut(String repoName, RepositoryDescription description) throws ApiException {
        repositoriesRepoNamePutWithHttpInfo(repoName, description);
    }

    /**
     * Update description of the repository.
     * This endpoint is used to update description of the repository. 
     * @param repoName The name of repository which will be deleted. (required)
     * @param description The description of the repository. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> repositoriesRepoNamePutWithHttpInfo(String repoName, RepositoryDescription description) throws ApiException {
        com.squareup.okhttp.Call call = repositoriesRepoNamePutValidateBeforeCall(repoName, description, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update description of the repository. (asynchronously)
     * This endpoint is used to update description of the repository. 
     * @param repoName The name of repository which will be deleted. (required)
     * @param description The description of the repository. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call repositoriesRepoNamePutAsync(String repoName, RepositoryDescription description, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = repositoriesRepoNamePutValidateBeforeCall(repoName, description, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for repositoriesRepoNameSignaturesGet
     * @param repoName repository name. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call repositoriesRepoNameSignaturesGetCall(String repoName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{repo_name}/signatures"
            .replaceAll("\\{" + "repo_name" + "\\}", apiClient.escapeString(repoName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call repositoriesRepoNameSignaturesGetValidateBeforeCall(String repoName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repoName' is set
        if (repoName == null) {
            throw new ApiException("Missing the required parameter 'repoName' when calling repositoriesRepoNameSignaturesGet(Async)");
        }
        

        com.squareup.okhttp.Call call = repositoriesRepoNameSignaturesGetCall(repoName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get signature information of a repository
     * This endpoint aims to retrieve signature information of a repository, the data is from the nested notary instance of Harbor. If the repository does not have any signature information in notary, this API will return an empty list with response code 200, instead of 404 
     * @param repoName repository name. (required)
     * @return List&lt;RepoSignature&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<RepoSignature> repositoriesRepoNameSignaturesGet(String repoName) throws ApiException {
        ApiResponse<List<RepoSignature>> resp = repositoriesRepoNameSignaturesGetWithHttpInfo(repoName);
        return resp.getData();
    }

    /**
     * Get signature information of a repository
     * This endpoint aims to retrieve signature information of a repository, the data is from the nested notary instance of Harbor. If the repository does not have any signature information in notary, this API will return an empty list with response code 200, instead of 404 
     * @param repoName repository name. (required)
     * @return ApiResponse&lt;List&lt;RepoSignature&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<RepoSignature>> repositoriesRepoNameSignaturesGetWithHttpInfo(String repoName) throws ApiException {
        com.squareup.okhttp.Call call = repositoriesRepoNameSignaturesGetValidateBeforeCall(repoName, null, null);
        Type localVarReturnType = new TypeToken<List<RepoSignature>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get signature information of a repository (asynchronously)
     * This endpoint aims to retrieve signature information of a repository, the data is from the nested notary instance of Harbor. If the repository does not have any signature information in notary, this API will return an empty list with response code 200, instead of 404 
     * @param repoName repository name. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call repositoriesRepoNameSignaturesGetAsync(String repoName, final ApiCallback<List<RepoSignature>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = repositoriesRepoNameSignaturesGetValidateBeforeCall(repoName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<RepoSignature>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for repositoriesRepoNameTagsGet
     * @param repoName Relevant repository name. (required)
     * @param labelId A label ID. (optional)
     * @param detail Bool value indicating whether return detailed information of the tag, such as vulnerability scan info, if set to false, only tag name is returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call repositoriesRepoNameTagsGetCall(String repoName, String labelId, Boolean detail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{repo_name}/tags"
            .replaceAll("\\{" + "repo_name" + "\\}", apiClient.escapeString(repoName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (labelId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("label_id", labelId));
        if (detail != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("detail", detail));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call repositoriesRepoNameTagsGetValidateBeforeCall(String repoName, String labelId, Boolean detail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repoName' is set
        if (repoName == null) {
            throw new ApiException("Missing the required parameter 'repoName' when calling repositoriesRepoNameTagsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = repositoriesRepoNameTagsGetCall(repoName, labelId, detail, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get tags of a relevant repository.
     * This endpoint aims to retrieve tags from a relevant repository. If deployed with Notary, the signature property of response represents whether the image is singed or not. If the property is null, the image is unsigned. 
     * @param repoName Relevant repository name. (required)
     * @param labelId A label ID. (optional)
     * @param detail Bool value indicating whether return detailed information of the tag, such as vulnerability scan info, if set to false, only tag name is returned. (optional)
     * @return List&lt;DetailedTag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DetailedTag> repositoriesRepoNameTagsGet(String repoName, String labelId, Boolean detail) throws ApiException {
        ApiResponse<List<DetailedTag>> resp = repositoriesRepoNameTagsGetWithHttpInfo(repoName, labelId, detail);
        return resp.getData();
    }

    /**
     * Get tags of a relevant repository.
     * This endpoint aims to retrieve tags from a relevant repository. If deployed with Notary, the signature property of response represents whether the image is singed or not. If the property is null, the image is unsigned. 
     * @param repoName Relevant repository name. (required)
     * @param labelId A label ID. (optional)
     * @param detail Bool value indicating whether return detailed information of the tag, such as vulnerability scan info, if set to false, only tag name is returned. (optional)
     * @return ApiResponse&lt;List&lt;DetailedTag&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DetailedTag>> repositoriesRepoNameTagsGetWithHttpInfo(String repoName, String labelId, Boolean detail) throws ApiException {
        com.squareup.okhttp.Call call = repositoriesRepoNameTagsGetValidateBeforeCall(repoName, labelId, detail, null, null);
        Type localVarReturnType = new TypeToken<List<DetailedTag>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get tags of a relevant repository. (asynchronously)
     * This endpoint aims to retrieve tags from a relevant repository. If deployed with Notary, the signature property of response represents whether the image is singed or not. If the property is null, the image is unsigned. 
     * @param repoName Relevant repository name. (required)
     * @param labelId A label ID. (optional)
     * @param detail Bool value indicating whether return detailed information of the tag, such as vulnerability scan info, if set to false, only tag name is returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call repositoriesRepoNameTagsGetAsync(String repoName, String labelId, Boolean detail, final ApiCallback<List<DetailedTag>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = repositoriesRepoNameTagsGetValidateBeforeCall(repoName, labelId, detail, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DetailedTag>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for repositoriesRepoNameTagsPost
     * @param repoName Relevant repository name. (required)
     * @param request Request to give source image and target tag. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call repositoriesRepoNameTagsPostCall(String repoName, RetagReq request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/repositories/{repo_name}/tags"
            .replaceAll("\\{" + "repo_name" + "\\}", apiClient.escapeString(repoName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call repositoriesRepoNameTagsPostValidateBeforeCall(String repoName, RetagReq request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repoName' is set
        if (repoName == null) {
            throw new ApiException("Missing the required parameter 'repoName' when calling repositoriesRepoNameTagsPost(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling repositoriesRepoNameTagsPost(Async)");
        }
        

        com.squareup.okhttp.Call call = repositoriesRepoNameTagsPostCall(repoName, request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retag an image
     * This endpoint tags an existing image with another tag in this repo, source images can be in different repos or projects. 
     * @param repoName Relevant repository name. (required)
     * @param request Request to give source image and target tag. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void repositoriesRepoNameTagsPost(String repoName, RetagReq request) throws ApiException {
        repositoriesRepoNameTagsPostWithHttpInfo(repoName, request);
    }

    /**
     * Retag an image
     * This endpoint tags an existing image with another tag in this repo, source images can be in different repos or projects. 
     * @param repoName Relevant repository name. (required)
     * @param request Request to give source image and target tag. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> repositoriesRepoNameTagsPostWithHttpInfo(String repoName, RetagReq request) throws ApiException {
        com.squareup.okhttp.Call call = repositoriesRepoNameTagsPostValidateBeforeCall(repoName, request, null, null);
        return apiClient.execute(call);
    }

    /**
     * Retag an image (asynchronously)
     * This endpoint tags an existing image with another tag in this repo, source images can be in different repos or projects. 
     * @param repoName Relevant repository name. (required)
     * @param request Request to give source image and target tag. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call repositoriesRepoNameTagsPostAsync(String repoName, RetagReq request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = repositoriesRepoNameTagsPostValidateBeforeCall(repoName, request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for repositoriesRepoNameTagsTagDelete
     * @param repoName The name of repository which will be deleted. (required)
     * @param tag Tag of a repository. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call repositoriesRepoNameTagsTagDeleteCall(String repoName, String tag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{repo_name}/tags/{tag}"
            .replaceAll("\\{" + "repo_name" + "\\}", apiClient.escapeString(repoName.toString()))
            .replaceAll("\\{" + "tag" + "\\}", apiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call repositoriesRepoNameTagsTagDeleteValidateBeforeCall(String repoName, String tag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repoName' is set
        if (repoName == null) {
            throw new ApiException("Missing the required parameter 'repoName' when calling repositoriesRepoNameTagsTagDelete(Async)");
        }
        
        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling repositoriesRepoNameTagsTagDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = repositoriesRepoNameTagsTagDeleteCall(repoName, tag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a tag in a repository.
     * This endpoint let user delete tags with repo name and tag. 
     * @param repoName The name of repository which will be deleted. (required)
     * @param tag Tag of a repository. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void repositoriesRepoNameTagsTagDelete(String repoName, String tag) throws ApiException {
        repositoriesRepoNameTagsTagDeleteWithHttpInfo(repoName, tag);
    }

    /**
     * Delete a tag in a repository.
     * This endpoint let user delete tags with repo name and tag. 
     * @param repoName The name of repository which will be deleted. (required)
     * @param tag Tag of a repository. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> repositoriesRepoNameTagsTagDeleteWithHttpInfo(String repoName, String tag) throws ApiException {
        com.squareup.okhttp.Call call = repositoriesRepoNameTagsTagDeleteValidateBeforeCall(repoName, tag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a tag in a repository. (asynchronously)
     * This endpoint let user delete tags with repo name and tag. 
     * @param repoName The name of repository which will be deleted. (required)
     * @param tag Tag of a repository. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call repositoriesRepoNameTagsTagDeleteAsync(String repoName, String tag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = repositoriesRepoNameTagsTagDeleteValidateBeforeCall(repoName, tag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for repositoriesRepoNameTagsTagGet
     * @param repoName Relevant repository name. (required)
     * @param tag Tag of the repository. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call repositoriesRepoNameTagsTagGetCall(String repoName, String tag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{repo_name}/tags/{tag}"
            .replaceAll("\\{" + "repo_name" + "\\}", apiClient.escapeString(repoName.toString()))
            .replaceAll("\\{" + "tag" + "\\}", apiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call repositoriesRepoNameTagsTagGetValidateBeforeCall(String repoName, String tag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repoName' is set
        if (repoName == null) {
            throw new ApiException("Missing the required parameter 'repoName' when calling repositoriesRepoNameTagsTagGet(Async)");
        }
        
        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling repositoriesRepoNameTagsTagGet(Async)");
        }
        

        com.squareup.okhttp.Call call = repositoriesRepoNameTagsTagGetCall(repoName, tag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the tag of the repository.
     * This endpoint aims to retrieve the tag of the repository. If deployed with Notary, the signature property of response represents whether the image is singed or not. If the property is null, the image is unsigned. 
     * @param repoName Relevant repository name. (required)
     * @param tag Tag of the repository. (required)
     * @return DetailedTag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DetailedTag repositoriesRepoNameTagsTagGet(String repoName, String tag) throws ApiException {
        ApiResponse<DetailedTag> resp = repositoriesRepoNameTagsTagGetWithHttpInfo(repoName, tag);
        return resp.getData();
    }

    /**
     * Get the tag of the repository.
     * This endpoint aims to retrieve the tag of the repository. If deployed with Notary, the signature property of response represents whether the image is singed or not. If the property is null, the image is unsigned. 
     * @param repoName Relevant repository name. (required)
     * @param tag Tag of the repository. (required)
     * @return ApiResponse&lt;DetailedTag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DetailedTag> repositoriesRepoNameTagsTagGetWithHttpInfo(String repoName, String tag) throws ApiException {
        com.squareup.okhttp.Call call = repositoriesRepoNameTagsTagGetValidateBeforeCall(repoName, tag, null, null);
        Type localVarReturnType = new TypeToken<DetailedTag>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the tag of the repository. (asynchronously)
     * This endpoint aims to retrieve the tag of the repository. If deployed with Notary, the signature property of response represents whether the image is singed or not. If the property is null, the image is unsigned. 
     * @param repoName Relevant repository name. (required)
     * @param tag Tag of the repository. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call repositoriesRepoNameTagsTagGetAsync(String repoName, String tag, final ApiCallback<DetailedTag> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = repositoriesRepoNameTagsTagGetValidateBeforeCall(repoName, tag, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DetailedTag>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for repositoriesRepoNameTagsTagLabelsGet
     * @param repoName The name of repository. (required)
     * @param tag The tag of the image. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call repositoriesRepoNameTagsTagLabelsGetCall(String repoName, String tag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{repo_name}/tags/{tag}/labels"
            .replaceAll("\\{" + "repo_name" + "\\}", apiClient.escapeString(repoName.toString()))
            .replaceAll("\\{" + "tag" + "\\}", apiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call repositoriesRepoNameTagsTagLabelsGetValidateBeforeCall(String repoName, String tag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repoName' is set
        if (repoName == null) {
            throw new ApiException("Missing the required parameter 'repoName' when calling repositoriesRepoNameTagsTagLabelsGet(Async)");
        }
        
        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling repositoriesRepoNameTagsTagLabelsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = repositoriesRepoNameTagsTagLabelsGetCall(repoName, tag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get labels of an image.
     * Get labels of an image specified by the repo_name and tag. 
     * @param repoName The name of repository. (required)
     * @param tag The tag of the image. (required)
     * @return List&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Label> repositoriesRepoNameTagsTagLabelsGet(String repoName, String tag) throws ApiException {
        ApiResponse<List<Label>> resp = repositoriesRepoNameTagsTagLabelsGetWithHttpInfo(repoName, tag);
        return resp.getData();
    }

    /**
     * Get labels of an image.
     * Get labels of an image specified by the repo_name and tag. 
     * @param repoName The name of repository. (required)
     * @param tag The tag of the image. (required)
     * @return ApiResponse&lt;List&lt;Label&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Label>> repositoriesRepoNameTagsTagLabelsGetWithHttpInfo(String repoName, String tag) throws ApiException {
        com.squareup.okhttp.Call call = repositoriesRepoNameTagsTagLabelsGetValidateBeforeCall(repoName, tag, null, null);
        Type localVarReturnType = new TypeToken<List<Label>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get labels of an image. (asynchronously)
     * Get labels of an image specified by the repo_name and tag. 
     * @param repoName The name of repository. (required)
     * @param tag The tag of the image. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call repositoriesRepoNameTagsTagLabelsGetAsync(String repoName, String tag, final ApiCallback<List<Label>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = repositoriesRepoNameTagsTagLabelsGetValidateBeforeCall(repoName, tag, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Label>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for repositoriesRepoNameTagsTagLabelsLabelIdDelete
     * @param repoName The name of repository. (required)
     * @param tag The tag of the image. (required)
     * @param labelId The ID of label. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call repositoriesRepoNameTagsTagLabelsLabelIdDeleteCall(String repoName, String tag, Integer labelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{repo_name}/tags/{tag}/labels/{label_id}"
            .replaceAll("\\{" + "repo_name" + "\\}", apiClient.escapeString(repoName.toString()))
            .replaceAll("\\{" + "tag" + "\\}", apiClient.escapeString(tag.toString()))
            .replaceAll("\\{" + "label_id" + "\\}", apiClient.escapeString(labelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call repositoriesRepoNameTagsTagLabelsLabelIdDeleteValidateBeforeCall(String repoName, String tag, Integer labelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repoName' is set
        if (repoName == null) {
            throw new ApiException("Missing the required parameter 'repoName' when calling repositoriesRepoNameTagsTagLabelsLabelIdDelete(Async)");
        }
        
        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling repositoriesRepoNameTagsTagLabelsLabelIdDelete(Async)");
        }
        
        // verify the required parameter 'labelId' is set
        if (labelId == null) {
            throw new ApiException("Missing the required parameter 'labelId' when calling repositoriesRepoNameTagsTagLabelsLabelIdDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = repositoriesRepoNameTagsTagLabelsLabelIdDeleteCall(repoName, tag, labelId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete label from the image.
     * Delete the label from the image specified by the repo_name and tag. 
     * @param repoName The name of repository. (required)
     * @param tag The tag of the image. (required)
     * @param labelId The ID of label. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void repositoriesRepoNameTagsTagLabelsLabelIdDelete(String repoName, String tag, Integer labelId) throws ApiException {
        repositoriesRepoNameTagsTagLabelsLabelIdDeleteWithHttpInfo(repoName, tag, labelId);
    }

    /**
     * Delete label from the image.
     * Delete the label from the image specified by the repo_name and tag. 
     * @param repoName The name of repository. (required)
     * @param tag The tag of the image. (required)
     * @param labelId The ID of label. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> repositoriesRepoNameTagsTagLabelsLabelIdDeleteWithHttpInfo(String repoName, String tag, Integer labelId) throws ApiException {
        com.squareup.okhttp.Call call = repositoriesRepoNameTagsTagLabelsLabelIdDeleteValidateBeforeCall(repoName, tag, labelId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete label from the image. (asynchronously)
     * Delete the label from the image specified by the repo_name and tag. 
     * @param repoName The name of repository. (required)
     * @param tag The tag of the image. (required)
     * @param labelId The ID of label. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call repositoriesRepoNameTagsTagLabelsLabelIdDeleteAsync(String repoName, String tag, Integer labelId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = repositoriesRepoNameTagsTagLabelsLabelIdDeleteValidateBeforeCall(repoName, tag, labelId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for repositoriesRepoNameTagsTagLabelsPost
     * @param repoName The name of repository. (required)
     * @param tag The tag of the image. (required)
     * @param label Only the ID property is required. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call repositoriesRepoNameTagsTagLabelsPostCall(String repoName, String tag, Label label, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = label;

        // create path and map variables
        String localVarPath = "/repositories/{repo_name}/tags/{tag}/labels"
            .replaceAll("\\{" + "repo_name" + "\\}", apiClient.escapeString(repoName.toString()))
            .replaceAll("\\{" + "tag" + "\\}", apiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call repositoriesRepoNameTagsTagLabelsPostValidateBeforeCall(String repoName, String tag, Label label, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repoName' is set
        if (repoName == null) {
            throw new ApiException("Missing the required parameter 'repoName' when calling repositoriesRepoNameTagsTagLabelsPost(Async)");
        }
        
        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling repositoriesRepoNameTagsTagLabelsPost(Async)");
        }
        
        // verify the required parameter 'label' is set
        if (label == null) {
            throw new ApiException("Missing the required parameter 'label' when calling repositoriesRepoNameTagsTagLabelsPost(Async)");
        }
        

        com.squareup.okhttp.Call call = repositoriesRepoNameTagsTagLabelsPostCall(repoName, tag, label, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add a label to image.
     * Add a label to the image. 
     * @param repoName The name of repository. (required)
     * @param tag The tag of the image. (required)
     * @param label Only the ID property is required. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void repositoriesRepoNameTagsTagLabelsPost(String repoName, String tag, Label label) throws ApiException {
        repositoriesRepoNameTagsTagLabelsPostWithHttpInfo(repoName, tag, label);
    }

    /**
     * Add a label to image.
     * Add a label to the image. 
     * @param repoName The name of repository. (required)
     * @param tag The tag of the image. (required)
     * @param label Only the ID property is required. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> repositoriesRepoNameTagsTagLabelsPostWithHttpInfo(String repoName, String tag, Label label) throws ApiException {
        com.squareup.okhttp.Call call = repositoriesRepoNameTagsTagLabelsPostValidateBeforeCall(repoName, tag, label, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add a label to image. (asynchronously)
     * Add a label to the image. 
     * @param repoName The name of repository. (required)
     * @param tag The tag of the image. (required)
     * @param label Only the ID property is required. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call repositoriesRepoNameTagsTagLabelsPostAsync(String repoName, String tag, Label label, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = repositoriesRepoNameTagsTagLabelsPostValidateBeforeCall(repoName, tag, label, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for repositoriesRepoNameTagsTagManifestGet
     * @param repoName Repository name (required)
     * @param tag Tag name (required)
     * @param version The version of manifest, valid value are \&quot;v1\&quot; and \&quot;v2\&quot;, default is \&quot;v2\&quot; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call repositoriesRepoNameTagsTagManifestGetCall(String repoName, String tag, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{repo_name}/tags/{tag}/manifest"
            .replaceAll("\\{" + "repo_name" + "\\}", apiClient.escapeString(repoName.toString()))
            .replaceAll("\\{" + "tag" + "\\}", apiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call repositoriesRepoNameTagsTagManifestGetValidateBeforeCall(String repoName, String tag, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repoName' is set
        if (repoName == null) {
            throw new ApiException("Missing the required parameter 'repoName' when calling repositoriesRepoNameTagsTagManifestGet(Async)");
        }
        
        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling repositoriesRepoNameTagsTagManifestGet(Async)");
        }
        

        com.squareup.okhttp.Call call = repositoriesRepoNameTagsTagManifestGetCall(repoName, tag, version, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get manifests of a relevant repository.
     * This endpoint aims to retreive manifests from a relevant repository. 
     * @param repoName Repository name (required)
     * @param tag Tag name (required)
     * @param version The version of manifest, valid value are \&quot;v1\&quot; and \&quot;v2\&quot;, default is \&quot;v2\&quot; (optional)
     * @return Manifest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Manifest repositoriesRepoNameTagsTagManifestGet(String repoName, String tag, String version) throws ApiException {
        ApiResponse<Manifest> resp = repositoriesRepoNameTagsTagManifestGetWithHttpInfo(repoName, tag, version);
        return resp.getData();
    }

    /**
     * Get manifests of a relevant repository.
     * This endpoint aims to retreive manifests from a relevant repository. 
     * @param repoName Repository name (required)
     * @param tag Tag name (required)
     * @param version The version of manifest, valid value are \&quot;v1\&quot; and \&quot;v2\&quot;, default is \&quot;v2\&quot; (optional)
     * @return ApiResponse&lt;Manifest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Manifest> repositoriesRepoNameTagsTagManifestGetWithHttpInfo(String repoName, String tag, String version) throws ApiException {
        com.squareup.okhttp.Call call = repositoriesRepoNameTagsTagManifestGetValidateBeforeCall(repoName, tag, version, null, null);
        Type localVarReturnType = new TypeToken<Manifest>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get manifests of a relevant repository. (asynchronously)
     * This endpoint aims to retreive manifests from a relevant repository. 
     * @param repoName Repository name (required)
     * @param tag Tag name (required)
     * @param version The version of manifest, valid value are \&quot;v1\&quot; and \&quot;v2\&quot;, default is \&quot;v2\&quot; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call repositoriesRepoNameTagsTagManifestGetAsync(String repoName, String tag, String version, final ApiCallback<Manifest> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = repositoriesRepoNameTagsTagManifestGetValidateBeforeCall(repoName, tag, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Manifest>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for repositoriesRepoNameTagsTagScanPost
     * @param repoName Repository name (required)
     * @param tag Tag name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call repositoriesRepoNameTagsTagScanPostCall(String repoName, String tag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{repo_name}/tags/{tag}/scan"
            .replaceAll("\\{" + "repo_name" + "\\}", apiClient.escapeString(repoName.toString()))
            .replaceAll("\\{" + "tag" + "\\}", apiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call repositoriesRepoNameTagsTagScanPostValidateBeforeCall(String repoName, String tag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repoName' is set
        if (repoName == null) {
            throw new ApiException("Missing the required parameter 'repoName' when calling repositoriesRepoNameTagsTagScanPost(Async)");
        }
        
        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling repositoriesRepoNameTagsTagScanPost(Async)");
        }
        

        com.squareup.okhttp.Call call = repositoriesRepoNameTagsTagScanPostCall(repoName, tag, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Scan the image.
     * Trigger a scan targeting the artifact identified by the repo_name and tag. 
     * @param repoName Repository name (required)
     * @param tag Tag name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void repositoriesRepoNameTagsTagScanPost(String repoName, String tag) throws ApiException {
        repositoriesRepoNameTagsTagScanPostWithHttpInfo(repoName, tag);
    }

    /**
     * Scan the image.
     * Trigger a scan targeting the artifact identified by the repo_name and tag. 
     * @param repoName Repository name (required)
     * @param tag Tag name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> repositoriesRepoNameTagsTagScanPostWithHttpInfo(String repoName, String tag) throws ApiException {
        com.squareup.okhttp.Call call = repositoriesRepoNameTagsTagScanPostValidateBeforeCall(repoName, tag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Scan the image. (asynchronously)
     * Trigger a scan targeting the artifact identified by the repo_name and tag. 
     * @param repoName Repository name (required)
     * @param tag Tag name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call repositoriesRepoNameTagsTagScanPostAsync(String repoName, String tag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = repositoriesRepoNameTagsTagScanPostValidateBeforeCall(repoName, tag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for repositoriesRepoNameTagsTagScanUuidLogGet
     * @param repoName Repository name (required)
     * @param tag Tag name (required)
     * @param uuid the scan unique identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call repositoriesRepoNameTagsTagScanUuidLogGetCall(String repoName, String tag, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{repo_name}/tags/{tag}/scan/{uuid}/log"
            .replaceAll("\\{" + "repo_name" + "\\}", apiClient.escapeString(repoName.toString()))
            .replaceAll("\\{" + "tag" + "\\}", apiClient.escapeString(tag.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call repositoriesRepoNameTagsTagScanUuidLogGetValidateBeforeCall(String repoName, String tag, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'repoName' is set
        if (repoName == null) {
            throw new ApiException("Missing the required parameter 'repoName' when calling repositoriesRepoNameTagsTagScanUuidLogGet(Async)");
        }
        
        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling repositoriesRepoNameTagsTagScanUuidLogGet(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling repositoriesRepoNameTagsTagScanUuidLogGet(Async)");
        }
        

        com.squareup.okhttp.Call call = repositoriesRepoNameTagsTagScanUuidLogGetCall(repoName, tag, uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get scan log
     * Get the log text stream for the given artifact and scan action.
     * @param repoName Repository name (required)
     * @param tag Tag name (required)
     * @param uuid the scan unique identifier (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String repositoriesRepoNameTagsTagScanUuidLogGet(String repoName, String tag, String uuid) throws ApiException {
        ApiResponse<String> resp = repositoriesRepoNameTagsTagScanUuidLogGetWithHttpInfo(repoName, tag, uuid);
        return resp.getData();
    }

    /**
     * Get scan log
     * Get the log text stream for the given artifact and scan action.
     * @param repoName Repository name (required)
     * @param tag Tag name (required)
     * @param uuid the scan unique identifier (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> repositoriesRepoNameTagsTagScanUuidLogGetWithHttpInfo(String repoName, String tag, String uuid) throws ApiException {
        com.squareup.okhttp.Call call = repositoriesRepoNameTagsTagScanUuidLogGetValidateBeforeCall(repoName, tag, uuid, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get scan log (asynchronously)
     * Get the log text stream for the given artifact and scan action.
     * @param repoName Repository name (required)
     * @param tag Tag name (required)
     * @param uuid the scan unique identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call repositoriesRepoNameTagsTagScanUuidLogGetAsync(String repoName, String tag, String uuid, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = repositoriesRepoNameTagsTagScanUuidLogGetValidateBeforeCall(repoName, tag, uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for repositoriesTopGet
     * @param count The number of the requested public repositories, default is 10 if not provided. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call repositoriesTopGetCall(Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/top";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call repositoriesTopGetValidateBeforeCall(Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = repositoriesTopGetCall(count, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get public repositories which are accessed most.
     * This endpoint aims to let users see the most popular public repositories 
     * @param count The number of the requested public repositories, default is 10 if not provided. (optional)
     * @return List&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Repository> repositoriesTopGet(Integer count) throws ApiException {
        ApiResponse<List<Repository>> resp = repositoriesTopGetWithHttpInfo(count);
        return resp.getData();
    }

    /**
     * Get public repositories which are accessed most.
     * This endpoint aims to let users see the most popular public repositories 
     * @param count The number of the requested public repositories, default is 10 if not provided. (optional)
     * @return ApiResponse&lt;List&lt;Repository&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Repository>> repositoriesTopGetWithHttpInfo(Integer count) throws ApiException {
        com.squareup.okhttp.Call call = repositoriesTopGetValidateBeforeCall(count, null, null);
        Type localVarReturnType = new TypeToken<List<Repository>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get public repositories which are accessed most. (asynchronously)
     * This endpoint aims to let users see the most popular public repositories 
     * @param count The number of the requested public repositories, default is 10 if not provided. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call repositoriesTopGetAsync(Integer count, final ApiCallback<List<Repository>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = repositoriesTopGetValidateBeforeCall(count, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Repository>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retentionsIdExecutionsEidPatch
     * @param id Retention ID. (required)
     * @param eid Retention execution ID. (required)
     * @param action The action, only support \&quot;stop\&quot; now. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retentionsIdExecutionsEidPatchCall(Long id, Long eid, Action1 action, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = action;

        // create path and map variables
        String localVarPath = "/retentions/{id}/executions/{eid}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "eid" + "\\}", apiClient.escapeString(eid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retentionsIdExecutionsEidPatchValidateBeforeCall(Long id, Long eid, Action1 action, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retentionsIdExecutionsEidPatch(Async)");
        }
        
        // verify the required parameter 'eid' is set
        if (eid == null) {
            throw new ApiException("Missing the required parameter 'eid' when calling retentionsIdExecutionsEidPatch(Async)");
        }
        
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling retentionsIdExecutionsEidPatch(Async)");
        }
        

        com.squareup.okhttp.Call call = retentionsIdExecutionsEidPatchCall(id, eid, action, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Stop a Retention job
     * Stop a Retention job, only support \&quot;stop\&quot; action now.
     * @param id Retention ID. (required)
     * @param eid Retention execution ID. (required)
     * @param action The action, only support \&quot;stop\&quot; now. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void retentionsIdExecutionsEidPatch(Long id, Long eid, Action1 action) throws ApiException {
        retentionsIdExecutionsEidPatchWithHttpInfo(id, eid, action);
    }

    /**
     * Stop a Retention job
     * Stop a Retention job, only support \&quot;stop\&quot; action now.
     * @param id Retention ID. (required)
     * @param eid Retention execution ID. (required)
     * @param action The action, only support \&quot;stop\&quot; now. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> retentionsIdExecutionsEidPatchWithHttpInfo(Long id, Long eid, Action1 action) throws ApiException {
        com.squareup.okhttp.Call call = retentionsIdExecutionsEidPatchValidateBeforeCall(id, eid, action, null, null);
        return apiClient.execute(call);
    }

    /**
     * Stop a Retention job (asynchronously)
     * Stop a Retention job, only support \&quot;stop\&quot; action now.
     * @param id Retention ID. (required)
     * @param eid Retention execution ID. (required)
     * @param action The action, only support \&quot;stop\&quot; now. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retentionsIdExecutionsEidPatchAsync(Long id, Long eid, Action1 action, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retentionsIdExecutionsEidPatchValidateBeforeCall(id, eid, action, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for retentionsIdExecutionsEidTasksGet
     * @param id Retention ID. (required)
     * @param eid Retention execution ID. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retentionsIdExecutionsEidTasksGetCall(Long id, Long eid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retentions/{id}/executions/{eid}/tasks"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "eid" + "\\}", apiClient.escapeString(eid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retentionsIdExecutionsEidTasksGetValidateBeforeCall(Long id, Long eid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retentionsIdExecutionsEidTasksGet(Async)");
        }
        
        // verify the required parameter 'eid' is set
        if (eid == null) {
            throw new ApiException("Missing the required parameter 'eid' when calling retentionsIdExecutionsEidTasksGet(Async)");
        }
        

        com.squareup.okhttp.Call call = retentionsIdExecutionsEidTasksGetCall(id, eid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Retention job tasks
     * Get Retention job tasks, each repository as a task.
     * @param id Retention ID. (required)
     * @param eid Retention execution ID. (required)
     * @return List&lt;RetentionExecutionTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<RetentionExecutionTask> retentionsIdExecutionsEidTasksGet(Long id, Long eid) throws ApiException {
        ApiResponse<List<RetentionExecutionTask>> resp = retentionsIdExecutionsEidTasksGetWithHttpInfo(id, eid);
        return resp.getData();
    }

    /**
     * Get Retention job tasks
     * Get Retention job tasks, each repository as a task.
     * @param id Retention ID. (required)
     * @param eid Retention execution ID. (required)
     * @return ApiResponse&lt;List&lt;RetentionExecutionTask&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<RetentionExecutionTask>> retentionsIdExecutionsEidTasksGetWithHttpInfo(Long id, Long eid) throws ApiException {
        com.squareup.okhttp.Call call = retentionsIdExecutionsEidTasksGetValidateBeforeCall(id, eid, null, null);
        Type localVarReturnType = new TypeToken<List<RetentionExecutionTask>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Retention job tasks (asynchronously)
     * Get Retention job tasks, each repository as a task.
     * @param id Retention ID. (required)
     * @param eid Retention execution ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retentionsIdExecutionsEidTasksGetAsync(Long id, Long eid, final ApiCallback<List<RetentionExecutionTask>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retentionsIdExecutionsEidTasksGetValidateBeforeCall(id, eid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<RetentionExecutionTask>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retentionsIdExecutionsEidTasksTidGet
     * @param id Retention ID. (required)
     * @param eid Retention execution ID. (required)
     * @param tid Retention execution ID. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retentionsIdExecutionsEidTasksTidGetCall(Long id, Long eid, Long tid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retentions/{id}/executions/{eid}/tasks/{tid}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "eid" + "\\}", apiClient.escapeString(eid.toString()))
            .replaceAll("\\{" + "tid" + "\\}", apiClient.escapeString(tid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retentionsIdExecutionsEidTasksTidGetValidateBeforeCall(Long id, Long eid, Long tid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retentionsIdExecutionsEidTasksTidGet(Async)");
        }
        
        // verify the required parameter 'eid' is set
        if (eid == null) {
            throw new ApiException("Missing the required parameter 'eid' when calling retentionsIdExecutionsEidTasksTidGet(Async)");
        }
        
        // verify the required parameter 'tid' is set
        if (tid == null) {
            throw new ApiException("Missing the required parameter 'tid' when calling retentionsIdExecutionsEidTasksTidGet(Async)");
        }
        

        com.squareup.okhttp.Call call = retentionsIdExecutionsEidTasksTidGetCall(id, eid, tid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Retention job task log
     * Get Retention job task log, tags ratain or deletion detail will be shown in a table.
     * @param id Retention ID. (required)
     * @param eid Retention execution ID. (required)
     * @param tid Retention execution ID. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String retentionsIdExecutionsEidTasksTidGet(Long id, Long eid, Long tid) throws ApiException {
        ApiResponse<String> resp = retentionsIdExecutionsEidTasksTidGetWithHttpInfo(id, eid, tid);
        return resp.getData();
    }

    /**
     * Get Retention job task log
     * Get Retention job task log, tags ratain or deletion detail will be shown in a table.
     * @param id Retention ID. (required)
     * @param eid Retention execution ID. (required)
     * @param tid Retention execution ID. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> retentionsIdExecutionsEidTasksTidGetWithHttpInfo(Long id, Long eid, Long tid) throws ApiException {
        com.squareup.okhttp.Call call = retentionsIdExecutionsEidTasksTidGetValidateBeforeCall(id, eid, tid, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Retention job task log (asynchronously)
     * Get Retention job task log, tags ratain or deletion detail will be shown in a table.
     * @param id Retention ID. (required)
     * @param eid Retention execution ID. (required)
     * @param tid Retention execution ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retentionsIdExecutionsEidTasksTidGetAsync(Long id, Long eid, Long tid, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retentionsIdExecutionsEidTasksTidGetValidateBeforeCall(id, eid, tid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retentionsIdExecutionsGet
     * @param id Retention ID. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retentionsIdExecutionsGetCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retentions/{id}/executions"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retentionsIdExecutionsGetValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retentionsIdExecutionsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = retentionsIdExecutionsGetCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a Retention job
     * Get a Retention job, job status may be delayed before job service schedule it up.
     * @param id Retention ID. (required)
     * @return List&lt;RetentionExecution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<RetentionExecution> retentionsIdExecutionsGet(Long id) throws ApiException {
        ApiResponse<List<RetentionExecution>> resp = retentionsIdExecutionsGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get a Retention job
     * Get a Retention job, job status may be delayed before job service schedule it up.
     * @param id Retention ID. (required)
     * @return ApiResponse&lt;List&lt;RetentionExecution&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<RetentionExecution>> retentionsIdExecutionsGetWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = retentionsIdExecutionsGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<List<RetentionExecution>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a Retention job (asynchronously)
     * Get a Retention job, job status may be delayed before job service schedule it up.
     * @param id Retention ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retentionsIdExecutionsGetAsync(Long id, final ApiCallback<List<RetentionExecution>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retentionsIdExecutionsGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<RetentionExecution>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retentionsIdExecutionsPost
     * @param id Retention ID. (required)
     * @param action  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retentionsIdExecutionsPostCall(Long id, Action action, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = action;

        // create path and map variables
        String localVarPath = "/retentions/{id}/executions"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retentionsIdExecutionsPostValidateBeforeCall(Long id, Action action, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retentionsIdExecutionsPost(Async)");
        }
        
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling retentionsIdExecutionsPost(Async)");
        }
        

        com.squareup.okhttp.Call call = retentionsIdExecutionsPostCall(id, action, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Trigger a Retention job
     * Trigger a Retention job, if dry_run is True, nothing would be deleted actually.
     * @param id Retention ID. (required)
     * @param action  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void retentionsIdExecutionsPost(Long id, Action action) throws ApiException {
        retentionsIdExecutionsPostWithHttpInfo(id, action);
    }

    /**
     * Trigger a Retention job
     * Trigger a Retention job, if dry_run is True, nothing would be deleted actually.
     * @param id Retention ID. (required)
     * @param action  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> retentionsIdExecutionsPostWithHttpInfo(Long id, Action action) throws ApiException {
        com.squareup.okhttp.Call call = retentionsIdExecutionsPostValidateBeforeCall(id, action, null, null);
        return apiClient.execute(call);
    }

    /**
     * Trigger a Retention job (asynchronously)
     * Trigger a Retention job, if dry_run is True, nothing would be deleted actually.
     * @param id Retention ID. (required)
     * @param action  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retentionsIdExecutionsPostAsync(Long id, Action action, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retentionsIdExecutionsPostValidateBeforeCall(id, action, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for retentionsIdGet
     * @param id Retention ID. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retentionsIdGetCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retentions/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retentionsIdGetValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retentionsIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = retentionsIdGetCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Retention Policy
     * Get Retention Policy.
     * @param id Retention ID. (required)
     * @return RetentionPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RetentionPolicy retentionsIdGet(Long id) throws ApiException {
        ApiResponse<RetentionPolicy> resp = retentionsIdGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get Retention Policy
     * Get Retention Policy.
     * @param id Retention ID. (required)
     * @return ApiResponse&lt;RetentionPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RetentionPolicy> retentionsIdGetWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = retentionsIdGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<RetentionPolicy>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Retention Policy (asynchronously)
     * Get Retention Policy.
     * @param id Retention ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retentionsIdGetAsync(Long id, final ApiCallback<RetentionPolicy> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retentionsIdGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RetentionPolicy>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retentionsIdPut
     * @param id Retention ID. (required)
     * @param policy  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retentionsIdPutCall(Long id, RetentionPolicy policy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = policy;

        // create path and map variables
        String localVarPath = "/retentions/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retentionsIdPutValidateBeforeCall(Long id, RetentionPolicy policy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retentionsIdPut(Async)");
        }
        
        // verify the required parameter 'policy' is set
        if (policy == null) {
            throw new ApiException("Missing the required parameter 'policy' when calling retentionsIdPut(Async)");
        }
        

        com.squareup.okhttp.Call call = retentionsIdPutCall(id, policy, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Retention Policy
     * Update Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when retention policy has already binded to project. 
     * @param id Retention ID. (required)
     * @param policy  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void retentionsIdPut(Long id, RetentionPolicy policy) throws ApiException {
        retentionsIdPutWithHttpInfo(id, policy);
    }

    /**
     * Update Retention Policy
     * Update Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when retention policy has already binded to project. 
     * @param id Retention ID. (required)
     * @param policy  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> retentionsIdPutWithHttpInfo(Long id, RetentionPolicy policy) throws ApiException {
        com.squareup.okhttp.Call call = retentionsIdPutValidateBeforeCall(id, policy, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update Retention Policy (asynchronously)
     * Update Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when retention policy has already binded to project. 
     * @param id Retention ID. (required)
     * @param policy  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retentionsIdPutAsync(Long id, RetentionPolicy policy, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retentionsIdPutValidateBeforeCall(id, policy, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for retentionsMetadatasGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retentionsMetadatasGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retentions/metadatas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retentionsMetadatasGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = retentionsMetadatasGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Retention Metadatas
     * Get Retention Metadatas.
     * @return RetentionMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RetentionMetadata retentionsMetadatasGet() throws ApiException {
        ApiResponse<RetentionMetadata> resp = retentionsMetadatasGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get Retention Metadatas
     * Get Retention Metadatas.
     * @return ApiResponse&lt;RetentionMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RetentionMetadata> retentionsMetadatasGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = retentionsMetadatasGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<RetentionMetadata>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Retention Metadatas (asynchronously)
     * Get Retention Metadatas.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retentionsMetadatasGetAsync(final ApiCallback<RetentionMetadata> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retentionsMetadatasGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RetentionMetadata>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retentionsPost
     * @param policy Create Retention Policy successfully. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retentionsPostCall(RetentionPolicy policy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = policy;

        // create path and map variables
        String localVarPath = "/retentions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retentionsPostValidateBeforeCall(RetentionPolicy policy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'policy' is set
        if (policy == null) {
            throw new ApiException("Missing the required parameter 'policy' when calling retentionsPost(Async)");
        }
        

        com.squareup.okhttp.Call call = retentionsPostCall(policy, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create Retention Policy
     * Create Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when no retention policy binded to project yet. 
     * @param policy Create Retention Policy successfully. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void retentionsPost(RetentionPolicy policy) throws ApiException {
        retentionsPostWithHttpInfo(policy);
    }

    /**
     * Create Retention Policy
     * Create Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when no retention policy binded to project yet. 
     * @param policy Create Retention Policy successfully. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> retentionsPostWithHttpInfo(RetentionPolicy policy) throws ApiException {
        com.squareup.okhttp.Call call = retentionsPostValidateBeforeCall(policy, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create Retention Policy (asynchronously)
     * Create Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when no retention policy binded to project yet. 
     * @param policy Create Retention Policy successfully. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retentionsPostAsync(RetentionPolicy policy, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retentionsPostValidateBeforeCall(policy, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for scannersGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call scannersGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scanners";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call scannersGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = scannersGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * List scanner registrations
     * Returns a list of currently configured scanner registrations. 
     * @return List&lt;ScannerRegistration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ScannerRegistration> scannersGet() throws ApiException {
        ApiResponse<List<ScannerRegistration>> resp = scannersGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * List scanner registrations
     * Returns a list of currently configured scanner registrations. 
     * @return ApiResponse&lt;List&lt;ScannerRegistration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ScannerRegistration>> scannersGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = scannersGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<ScannerRegistration>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List scanner registrations (asynchronously)
     * Returns a list of currently configured scanner registrations. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call scannersGetAsync(final ApiCallback<List<ScannerRegistration>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = scannersGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ScannerRegistration>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for scannersPingPost
     * @param settings A scanner registration settings to be tested. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call scannersPingPostCall(ScannerRegistrationSettings settings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = settings;

        // create path and map variables
        String localVarPath = "/scanners/ping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call scannersPingPostValidateBeforeCall(ScannerRegistrationSettings settings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settings' is set
        if (settings == null) {
            throw new ApiException("Missing the required parameter 'settings' when calling scannersPingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = scannersPingPostCall(settings, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Tests scanner registration settings
     * Pings scanner adapter to test endpoint URL and authorization settings. 
     * @param settings A scanner registration settings to be tested. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void scannersPingPost(ScannerRegistrationSettings settings) throws ApiException {
        scannersPingPostWithHttpInfo(settings);
    }

    /**
     * Tests scanner registration settings
     * Pings scanner adapter to test endpoint URL and authorization settings. 
     * @param settings A scanner registration settings to be tested. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> scannersPingPostWithHttpInfo(ScannerRegistrationSettings settings) throws ApiException {
        com.squareup.okhttp.Call call = scannersPingPostValidateBeforeCall(settings, null, null);
        return apiClient.execute(call);
    }

    /**
     * Tests scanner registration settings (asynchronously)
     * Pings scanner adapter to test endpoint URL and authorization settings. 
     * @param settings A scanner registration settings to be tested. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call scannersPingPostAsync(ScannerRegistrationSettings settings, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = scannersPingPostValidateBeforeCall(settings, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for scannersRegistrationIdGet
     * @param registrationId The scanner registration identifer. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call scannersRegistrationIdGetCall(String registrationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scanners/{registration_id}"
            .replaceAll("\\{" + "registration_id" + "\\}", apiClient.escapeString(registrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call scannersRegistrationIdGetValidateBeforeCall(String registrationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'registrationId' is set
        if (registrationId == null) {
            throw new ApiException("Missing the required parameter 'registrationId' when calling scannersRegistrationIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = scannersRegistrationIdGetCall(registrationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a scanner registration details
     * Retruns the details of the specified scanner registration. 
     * @param registrationId The scanner registration identifer. (required)
     * @return ScannerRegistration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScannerRegistration scannersRegistrationIdGet(String registrationId) throws ApiException {
        ApiResponse<ScannerRegistration> resp = scannersRegistrationIdGetWithHttpInfo(registrationId);
        return resp.getData();
    }

    /**
     * Get a scanner registration details
     * Retruns the details of the specified scanner registration. 
     * @param registrationId The scanner registration identifer. (required)
     * @return ApiResponse&lt;ScannerRegistration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScannerRegistration> scannersRegistrationIdGetWithHttpInfo(String registrationId) throws ApiException {
        com.squareup.okhttp.Call call = scannersRegistrationIdGetValidateBeforeCall(registrationId, null, null);
        Type localVarReturnType = new TypeToken<ScannerRegistration>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a scanner registration details (asynchronously)
     * Retruns the details of the specified scanner registration. 
     * @param registrationId The scanner registration identifer. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call scannersRegistrationIdGetAsync(String registrationId, final ApiCallback<ScannerRegistration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = scannersRegistrationIdGetValidateBeforeCall(registrationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScannerRegistration>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for scannersRegistrationIdMetadataGet
     * @param registrationId The scanner registration identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call scannersRegistrationIdMetadataGetCall(String registrationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scanners/{registration_id}/metadata"
            .replaceAll("\\{" + "registration_id" + "\\}", apiClient.escapeString(registrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call scannersRegistrationIdMetadataGetValidateBeforeCall(String registrationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'registrationId' is set
        if (registrationId == null) {
            throw new ApiException("Missing the required parameter 'registrationId' when calling scannersRegistrationIdMetadataGet(Async)");
        }
        

        com.squareup.okhttp.Call call = scannersRegistrationIdMetadataGetCall(registrationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the metadata of the specified scanner registration
     * Get the metadata of the specified scanner registration, including the capabilities and customzied properties. 
     * @param registrationId The scanner registration identifier. (required)
     * @return ScannerAdapterMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScannerAdapterMetadata scannersRegistrationIdMetadataGet(String registrationId) throws ApiException {
        ApiResponse<ScannerAdapterMetadata> resp = scannersRegistrationIdMetadataGetWithHttpInfo(registrationId);
        return resp.getData();
    }

    /**
     * Get the metadata of the specified scanner registration
     * Get the metadata of the specified scanner registration, including the capabilities and customzied properties. 
     * @param registrationId The scanner registration identifier. (required)
     * @return ApiResponse&lt;ScannerAdapterMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScannerAdapterMetadata> scannersRegistrationIdMetadataGetWithHttpInfo(String registrationId) throws ApiException {
        com.squareup.okhttp.Call call = scannersRegistrationIdMetadataGetValidateBeforeCall(registrationId, null, null);
        Type localVarReturnType = new TypeToken<ScannerAdapterMetadata>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the metadata of the specified scanner registration (asynchronously)
     * Get the metadata of the specified scanner registration, including the capabilities and customzied properties. 
     * @param registrationId The scanner registration identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call scannersRegistrationIdMetadataGetAsync(String registrationId, final ApiCallback<ScannerAdapterMetadata> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = scannersRegistrationIdMetadataGetValidateBeforeCall(registrationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScannerAdapterMetadata>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for scansAllMetricsGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call scansAllMetricsGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scans/all/metrics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call scansAllMetricsGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = scansAllMetricsGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the metrics of the latest scan all process
     * Get the metrics of the latest scan all process
     * @return Stats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Stats scansAllMetricsGet() throws ApiException {
        ApiResponse<Stats> resp = scansAllMetricsGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get the metrics of the latest scan all process
     * Get the metrics of the latest scan all process
     * @return ApiResponse&lt;Stats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Stats> scansAllMetricsGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = scansAllMetricsGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Stats>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the metrics of the latest scan all process (asynchronously)
     * Get the metrics of the latest scan all process
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call scansAllMetricsGetAsync(final ApiCallback<Stats> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = scansAllMetricsGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Stats>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for scansScheduleMetricsGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call scansScheduleMetricsGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scans/schedule/metrics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call scansScheduleMetricsGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = scansScheduleMetricsGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the metrics of the latest scheduled scan all process
     * Get the metrics of the latest scheduled scan all process
     * @return Stats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Stats scansScheduleMetricsGet() throws ApiException {
        ApiResponse<Stats> resp = scansScheduleMetricsGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get the metrics of the latest scheduled scan all process
     * Get the metrics of the latest scheduled scan all process
     * @return ApiResponse&lt;Stats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Stats> scansScheduleMetricsGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = scansScheduleMetricsGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Stats>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the metrics of the latest scheduled scan all process (asynchronously)
     * Get the metrics of the latest scheduled scan all process
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call scansScheduleMetricsGetAsync(final ApiCallback<Stats> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = scansScheduleMetricsGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Stats>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchGet
     * @param q Search parameter for project and repository name. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchGetCall(String q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchGetValidateBeforeCall(String q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling searchGet(Async)");
        }
        

        com.squareup.okhttp.Call call = searchGetCall(q, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search for projects, repositories and helm charts
     * The Search endpoint returns information about the projects ,repositories  and helm charts offered at public status or related to the current logged in user. The response includes the project, repository list and charts in a proper display order. 
     * @param q Search parameter for project and repository name. (required)
     * @return List&lt;Search&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Search> searchGet(String q) throws ApiException {
        ApiResponse<List<Search>> resp = searchGetWithHttpInfo(q);
        return resp.getData();
    }

    /**
     * Search for projects, repositories and helm charts
     * The Search endpoint returns information about the projects ,repositories  and helm charts offered at public status or related to the current logged in user. The response includes the project, repository list and charts in a proper display order. 
     * @param q Search parameter for project and repository name. (required)
     * @return ApiResponse&lt;List&lt;Search&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Search>> searchGetWithHttpInfo(String q) throws ApiException {
        com.squareup.okhttp.Call call = searchGetValidateBeforeCall(q, null, null);
        Type localVarReturnType = new TypeToken<List<Search>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search for projects, repositories and helm charts (asynchronously)
     * The Search endpoint returns information about the projects ,repositories  and helm charts offered at public status or related to the current logged in user. The response includes the project, repository list and charts in a proper display order. 
     * @param q Search parameter for project and repository name. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchGetAsync(String q, final ApiCallback<List<Search>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchGetValidateBeforeCall(q, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Search>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for statisticsGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call statisticsGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/statistics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call statisticsGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = statisticsGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get projects number and repositories number relevant to the user
     * This endpoint is aimed to statistic all of the projects number and repositories number relevant to the logined user, also the public projects number and repositories number. If the user is admin, he can also get total projects number and total repositories number. 
     * @return StatisticMap
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StatisticMap statisticsGet() throws ApiException {
        ApiResponse<StatisticMap> resp = statisticsGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get projects number and repositories number relevant to the user
     * This endpoint is aimed to statistic all of the projects number and repositories number relevant to the logined user, also the public projects number and repositories number. If the user is admin, he can also get total projects number and total repositories number. 
     * @return ApiResponse&lt;StatisticMap&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StatisticMap> statisticsGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = statisticsGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<StatisticMap>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get projects number and repositories number relevant to the user (asynchronously)
     * This endpoint is aimed to statistic all of the projects number and repositories number relevant to the logined user, also the public projects number and repositories number. If the user is admin, he can also get total projects number and total repositories number. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call statisticsGetAsync(final ApiCallback<StatisticMap> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = statisticsGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StatisticMap>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systemCVEWhitelistGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systemCVEWhitelistGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system/CVEWhitelist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systemCVEWhitelistGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = systemCVEWhitelistGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the system level whitelist of CVE.
     * Get the system level whitelist of CVE.  This API can be called by all authenticated users.
     * @return CVEWhitelist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CVEWhitelist systemCVEWhitelistGet() throws ApiException {
        ApiResponse<CVEWhitelist> resp = systemCVEWhitelistGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get the system level whitelist of CVE.
     * Get the system level whitelist of CVE.  This API can be called by all authenticated users.
     * @return ApiResponse&lt;CVEWhitelist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CVEWhitelist> systemCVEWhitelistGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = systemCVEWhitelistGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<CVEWhitelist>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the system level whitelist of CVE. (asynchronously)
     * Get the system level whitelist of CVE.  This API can be called by all authenticated users.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systemCVEWhitelistGetAsync(final ApiCallback<CVEWhitelist> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systemCVEWhitelistGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CVEWhitelist>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systemCVEWhitelistPut
     * @param whitelist The whitelist with new content (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systemCVEWhitelistPutCall(CVEWhitelist whitelist, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = whitelist;

        // create path and map variables
        String localVarPath = "/system/CVEWhitelist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systemCVEWhitelistPutValidateBeforeCall(CVEWhitelist whitelist, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = systemCVEWhitelistPutCall(whitelist, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update the system level whitelist of CVE.
     * This API overwrites the system level whitelist of CVE with the list in request body.  Only system Admin has permission to call this API.
     * @param whitelist The whitelist with new content (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void systemCVEWhitelistPut(CVEWhitelist whitelist) throws ApiException {
        systemCVEWhitelistPutWithHttpInfo(whitelist);
    }

    /**
     * Update the system level whitelist of CVE.
     * This API overwrites the system level whitelist of CVE with the list in request body.  Only system Admin has permission to call this API.
     * @param whitelist The whitelist with new content (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> systemCVEWhitelistPutWithHttpInfo(CVEWhitelist whitelist) throws ApiException {
        com.squareup.okhttp.Call call = systemCVEWhitelistPutValidateBeforeCall(whitelist, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update the system level whitelist of CVE. (asynchronously)
     * This API overwrites the system level whitelist of CVE with the list in request body.  Only system Admin has permission to call this API.
     * @param whitelist The whitelist with new content (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systemCVEWhitelistPutAsync(CVEWhitelist whitelist, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systemCVEWhitelistPutValidateBeforeCall(whitelist, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for systemGcGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systemGcGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system/gc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systemGcGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = systemGcGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get gc results.
     * This endpoint let user get latest ten gc results.
     * @return List&lt;GCResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<GCResult> systemGcGet() throws ApiException {
        ApiResponse<List<GCResult>> resp = systemGcGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get gc results.
     * This endpoint let user get latest ten gc results.
     * @return ApiResponse&lt;List&lt;GCResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<GCResult>> systemGcGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = systemGcGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<GCResult>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get gc results. (asynchronously)
     * This endpoint let user get latest ten gc results.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systemGcGetAsync(final ApiCallback<List<GCResult>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systemGcGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<GCResult>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systemGcIdGet
     * @param id Relevant job ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systemGcIdGetCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system/gc/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systemGcIdGetValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling systemGcIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = systemGcIdGetCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get gc status.
     * This endpoint let user get gc status filtered by specific ID.
     * @param id Relevant job ID (required)
     * @return GCResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GCResult systemGcIdGet(Long id) throws ApiException {
        ApiResponse<GCResult> resp = systemGcIdGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get gc status.
     * This endpoint let user get gc status filtered by specific ID.
     * @param id Relevant job ID (required)
     * @return ApiResponse&lt;GCResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GCResult> systemGcIdGetWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = systemGcIdGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<GCResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get gc status. (asynchronously)
     * This endpoint let user get gc status filtered by specific ID.
     * @param id Relevant job ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systemGcIdGetAsync(Long id, final ApiCallback<GCResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systemGcIdGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GCResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systemGcIdLogGet
     * @param id Relevant job ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systemGcIdLogGetCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system/gc/{id}/log"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systemGcIdLogGetValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling systemGcIdLogGet(Async)");
        }
        

        com.squareup.okhttp.Call call = systemGcIdLogGetCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get gc job log.
     * This endpoint let user get gc job logs filtered by specific ID.
     * @param id Relevant job ID (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String systemGcIdLogGet(Long id) throws ApiException {
        ApiResponse<String> resp = systemGcIdLogGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get gc job log.
     * This endpoint let user get gc job logs filtered by specific ID.
     * @param id Relevant job ID (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> systemGcIdLogGetWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = systemGcIdLogGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get gc job log. (asynchronously)
     * This endpoint let user get gc job logs filtered by specific ID.
     * @param id Relevant job ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systemGcIdLogGetAsync(Long id, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systemGcIdLogGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systemGcScheduleGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systemGcScheduleGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system/gc/schedule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systemGcScheduleGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = systemGcScheduleGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get gc&#39;s schedule.
     * This endpoint is for get schedule of gc job.
     * @return AdminJobSchedule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AdminJobSchedule systemGcScheduleGet() throws ApiException {
        ApiResponse<AdminJobSchedule> resp = systemGcScheduleGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get gc&#39;s schedule.
     * This endpoint is for get schedule of gc job.
     * @return ApiResponse&lt;AdminJobSchedule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AdminJobSchedule> systemGcScheduleGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = systemGcScheduleGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<AdminJobSchedule>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get gc&#39;s schedule. (asynchronously)
     * This endpoint is for get schedule of gc job.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systemGcScheduleGetAsync(final ApiCallback<AdminJobSchedule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systemGcScheduleGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AdminJobSchedule>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systemGcSchedulePost
     * @param schedule Updates of gc&#39;s schedule. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systemGcSchedulePostCall(AdminJobSchedule schedule, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = schedule;

        // create path and map variables
        String localVarPath = "/system/gc/schedule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systemGcSchedulePostValidateBeforeCall(AdminJobSchedule schedule, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'schedule' is set
        if (schedule == null) {
            throw new ApiException("Missing the required parameter 'schedule' when calling systemGcSchedulePost(Async)");
        }
        

        com.squareup.okhttp.Call call = systemGcSchedulePostCall(schedule, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a gc schedule.
     * This endpoint is for update gc schedule. 
     * @param schedule Updates of gc&#39;s schedule. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void systemGcSchedulePost(AdminJobSchedule schedule) throws ApiException {
        systemGcSchedulePostWithHttpInfo(schedule);
    }

    /**
     * Create a gc schedule.
     * This endpoint is for update gc schedule. 
     * @param schedule Updates of gc&#39;s schedule. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> systemGcSchedulePostWithHttpInfo(AdminJobSchedule schedule) throws ApiException {
        com.squareup.okhttp.Call call = systemGcSchedulePostValidateBeforeCall(schedule, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create a gc schedule. (asynchronously)
     * This endpoint is for update gc schedule. 
     * @param schedule Updates of gc&#39;s schedule. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systemGcSchedulePostAsync(AdminJobSchedule schedule, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systemGcSchedulePostValidateBeforeCall(schedule, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for systemGcSchedulePut
     * @param schedule Updates of gc&#39;s schedule. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systemGcSchedulePutCall(AdminJobSchedule schedule, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = schedule;

        // create path and map variables
        String localVarPath = "/system/gc/schedule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systemGcSchedulePutValidateBeforeCall(AdminJobSchedule schedule, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'schedule' is set
        if (schedule == null) {
            throw new ApiException("Missing the required parameter 'schedule' when calling systemGcSchedulePut(Async)");
        }
        

        com.squareup.okhttp.Call call = systemGcSchedulePutCall(schedule, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update gc&#39;s schedule.
     * This endpoint is for update gc schedule. 
     * @param schedule Updates of gc&#39;s schedule. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void systemGcSchedulePut(AdminJobSchedule schedule) throws ApiException {
        systemGcSchedulePutWithHttpInfo(schedule);
    }

    /**
     * Update gc&#39;s schedule.
     * This endpoint is for update gc schedule. 
     * @param schedule Updates of gc&#39;s schedule. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> systemGcSchedulePutWithHttpInfo(AdminJobSchedule schedule) throws ApiException {
        com.squareup.okhttp.Call call = systemGcSchedulePutValidateBeforeCall(schedule, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update gc&#39;s schedule. (asynchronously)
     * This endpoint is for update gc schedule. 
     * @param schedule Updates of gc&#39;s schedule. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systemGcSchedulePutAsync(AdminJobSchedule schedule, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systemGcSchedulePutValidateBeforeCall(schedule, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for systemOidcPingPost
     * @param endpoint Request body for OIDC endpoint to be tested. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systemOidcPingPostCall(Endpoint endpoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = endpoint;

        // create path and map variables
        String localVarPath = "/system/oidc/ping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systemOidcPingPostValidateBeforeCall(Endpoint endpoint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'endpoint' is set
        if (endpoint == null) {
            throw new ApiException("Missing the required parameter 'endpoint' when calling systemOidcPingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = systemOidcPingPostCall(endpoint, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Test the OIDC endpoint.
     * Test the OIDC endpoint, the setting of the endpoint is provided in the request.  This API can only be called by system admin.
     * @param endpoint Request body for OIDC endpoint to be tested. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void systemOidcPingPost(Endpoint endpoint) throws ApiException {
        systemOidcPingPostWithHttpInfo(endpoint);
    }

    /**
     * Test the OIDC endpoint.
     * Test the OIDC endpoint, the setting of the endpoint is provided in the request.  This API can only be called by system admin.
     * @param endpoint Request body for OIDC endpoint to be tested. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> systemOidcPingPostWithHttpInfo(Endpoint endpoint) throws ApiException {
        com.squareup.okhttp.Call call = systemOidcPingPostValidateBeforeCall(endpoint, null, null);
        return apiClient.execute(call);
    }

    /**
     * Test the OIDC endpoint. (asynchronously)
     * Test the OIDC endpoint, the setting of the endpoint is provided in the request.  This API can only be called by system admin.
     * @param endpoint Request body for OIDC endpoint to be tested. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systemOidcPingPostAsync(Endpoint endpoint, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systemOidcPingPostValidateBeforeCall(endpoint, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for systemScanAllScheduleGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systemScanAllScheduleGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system/scanAll/schedule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systemScanAllScheduleGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = systemScanAllScheduleGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get scan_all&#39;s schedule.
     * This endpoint is for getting a schedule for the scan all job, which scans all of images in Harbor.
     * @return AdminJobSchedule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AdminJobSchedule systemScanAllScheduleGet() throws ApiException {
        ApiResponse<AdminJobSchedule> resp = systemScanAllScheduleGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get scan_all&#39;s schedule.
     * This endpoint is for getting a schedule for the scan all job, which scans all of images in Harbor.
     * @return ApiResponse&lt;AdminJobSchedule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AdminJobSchedule> systemScanAllScheduleGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = systemScanAllScheduleGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<AdminJobSchedule>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get scan_all&#39;s schedule. (asynchronously)
     * This endpoint is for getting a schedule for the scan all job, which scans all of images in Harbor.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systemScanAllScheduleGetAsync(final ApiCallback<AdminJobSchedule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systemScanAllScheduleGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AdminJobSchedule>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systemScanAllSchedulePost
     * @param schedule Create a schedule or a manual trigger for the scan all job. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systemScanAllSchedulePostCall(AdminJobSchedule schedule, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = schedule;

        // create path and map variables
        String localVarPath = "/system/scanAll/schedule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systemScanAllSchedulePostValidateBeforeCall(AdminJobSchedule schedule, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'schedule' is set
        if (schedule == null) {
            throw new ApiException("Missing the required parameter 'schedule' when calling systemScanAllSchedulePost(Async)");
        }
        

        com.squareup.okhttp.Call call = systemScanAllSchedulePostCall(schedule, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a schedule or a manual trigger for the scan all job.
     * This endpoint is for creating a schedule or a manual trigger for the scan all job, which scans all of images in Harbor. 
     * @param schedule Create a schedule or a manual trigger for the scan all job. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void systemScanAllSchedulePost(AdminJobSchedule schedule) throws ApiException {
        systemScanAllSchedulePostWithHttpInfo(schedule);
    }

    /**
     * Create a schedule or a manual trigger for the scan all job.
     * This endpoint is for creating a schedule or a manual trigger for the scan all job, which scans all of images in Harbor. 
     * @param schedule Create a schedule or a manual trigger for the scan all job. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> systemScanAllSchedulePostWithHttpInfo(AdminJobSchedule schedule) throws ApiException {
        com.squareup.okhttp.Call call = systemScanAllSchedulePostValidateBeforeCall(schedule, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create a schedule or a manual trigger for the scan all job. (asynchronously)
     * This endpoint is for creating a schedule or a manual trigger for the scan all job, which scans all of images in Harbor. 
     * @param schedule Create a schedule or a manual trigger for the scan all job. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systemScanAllSchedulePostAsync(AdminJobSchedule schedule, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systemScanAllSchedulePostValidateBeforeCall(schedule, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for systemScanAllSchedulePut
     * @param schedule Updates the schedule of scan all job, which scans all of images in Harbor. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systemScanAllSchedulePutCall(AdminJobSchedule schedule, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = schedule;

        // create path and map variables
        String localVarPath = "/system/scanAll/schedule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systemScanAllSchedulePutValidateBeforeCall(AdminJobSchedule schedule, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'schedule' is set
        if (schedule == null) {
            throw new ApiException("Missing the required parameter 'schedule' when calling systemScanAllSchedulePut(Async)");
        }
        

        com.squareup.okhttp.Call call = systemScanAllSchedulePutCall(schedule, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update scan all&#39;s schedule.
     * This endpoint is for updating the schedule of scan all job, which scans all of images in Harbor. 
     * @param schedule Updates the schedule of scan all job, which scans all of images in Harbor. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void systemScanAllSchedulePut(AdminJobSchedule schedule) throws ApiException {
        systemScanAllSchedulePutWithHttpInfo(schedule);
    }

    /**
     * Update scan all&#39;s schedule.
     * This endpoint is for updating the schedule of scan all job, which scans all of images in Harbor. 
     * @param schedule Updates the schedule of scan all job, which scans all of images in Harbor. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> systemScanAllSchedulePutWithHttpInfo(AdminJobSchedule schedule) throws ApiException {
        com.squareup.okhttp.Call call = systemScanAllSchedulePutValidateBeforeCall(schedule, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update scan all&#39;s schedule. (asynchronously)
     * This endpoint is for updating the schedule of scan all job, which scans all of images in Harbor. 
     * @param schedule Updates the schedule of scan all job, which scans all of images in Harbor. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systemScanAllSchedulePutAsync(AdminJobSchedule schedule, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systemScanAllSchedulePutValidateBeforeCall(schedule, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for systeminfoGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminfoGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminfoGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = systeminfoGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get general system info
     * This API is for retrieving general system info, this can be called by anonymous request. 
     * @return GeneralInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GeneralInfo systeminfoGet() throws ApiException {
        ApiResponse<GeneralInfo> resp = systeminfoGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get general system info
     * This API is for retrieving general system info, this can be called by anonymous request. 
     * @return ApiResponse&lt;GeneralInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GeneralInfo> systeminfoGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = systeminfoGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<GeneralInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get general system info (asynchronously)
     * This API is for retrieving general system info, this can be called by anonymous request. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminfoGetAsync(final ApiCallback<GeneralInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminfoGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GeneralInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminfoGetcertGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminfoGetcertGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminfo/getcert";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminfoGetcertGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = systeminfoGetcertGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get default root certificate.
     * This endpoint is for downloading a default root certificate. 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void systeminfoGetcertGet() throws ApiException {
        systeminfoGetcertGetWithHttpInfo();
    }

    /**
     * Get default root certificate.
     * This endpoint is for downloading a default root certificate. 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> systeminfoGetcertGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = systeminfoGetcertGetValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Get default root certificate. (asynchronously)
     * This endpoint is for downloading a default root certificate. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminfoGetcertGetAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminfoGetcertGetValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for systeminfoVolumesGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminfoVolumesGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminfo/volumes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminfoVolumesGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = systeminfoVolumesGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get system volume info (total/free size).
     * This endpoint is for retrieving system volume info that only provides for admin user. 
     * @return SystemInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SystemInfo systeminfoVolumesGet() throws ApiException {
        ApiResponse<SystemInfo> resp = systeminfoVolumesGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get system volume info (total/free size).
     * This endpoint is for retrieving system volume info that only provides for admin user. 
     * @return ApiResponse&lt;SystemInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SystemInfo> systeminfoVolumesGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = systeminfoVolumesGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<SystemInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get system volume info (total/free size). (asynchronously)
     * This endpoint is for retrieving system volume info that only provides for admin user. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminfoVolumesGetAsync(final ApiCallback<SystemInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminfoVolumesGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SystemInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for usergroupsGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call usergroupsGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usergroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call usergroupsGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = usergroupsGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all user groups information
     * Get all user groups information
     * @return List&lt;UserGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<UserGroup> usergroupsGet() throws ApiException {
        ApiResponse<List<UserGroup>> resp = usergroupsGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get all user groups information
     * Get all user groups information
     * @return ApiResponse&lt;List&lt;UserGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<UserGroup>> usergroupsGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = usergroupsGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<UserGroup>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all user groups information (asynchronously)
     * Get all user groups information
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call usergroupsGetAsync(final ApiCallback<List<UserGroup>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = usergroupsGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<UserGroup>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for usergroupsGroupIdDelete
     * @param groupId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call usergroupsGroupIdDeleteCall(Integer groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usergroups/{group_id}"
            .replaceAll("\\{" + "group_id" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call usergroupsGroupIdDeleteValidateBeforeCall(Integer groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling usergroupsGroupIdDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = usergroupsGroupIdDeleteCall(groupId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete user group
     * Delete user group
     * @param groupId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void usergroupsGroupIdDelete(Integer groupId) throws ApiException {
        usergroupsGroupIdDeleteWithHttpInfo(groupId);
    }

    /**
     * Delete user group
     * Delete user group
     * @param groupId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> usergroupsGroupIdDeleteWithHttpInfo(Integer groupId) throws ApiException {
        com.squareup.okhttp.Call call = usergroupsGroupIdDeleteValidateBeforeCall(groupId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete user group (asynchronously)
     * Delete user group
     * @param groupId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call usergroupsGroupIdDeleteAsync(Integer groupId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = usergroupsGroupIdDeleteValidateBeforeCall(groupId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for usergroupsGroupIdGet
     * @param groupId Group ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call usergroupsGroupIdGetCall(Long groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usergroups/{group_id}"
            .replaceAll("\\{" + "group_id" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call usergroupsGroupIdGetValidateBeforeCall(Long groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling usergroupsGroupIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = usergroupsGroupIdGetCall(groupId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get user group information
     * Get user group information
     * @param groupId Group ID (required)
     * @return UserGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserGroup usergroupsGroupIdGet(Long groupId) throws ApiException {
        ApiResponse<UserGroup> resp = usergroupsGroupIdGetWithHttpInfo(groupId);
        return resp.getData();
    }

    /**
     * Get user group information
     * Get user group information
     * @param groupId Group ID (required)
     * @return ApiResponse&lt;UserGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserGroup> usergroupsGroupIdGetWithHttpInfo(Long groupId) throws ApiException {
        com.squareup.okhttp.Call call = usergroupsGroupIdGetValidateBeforeCall(groupId, null, null);
        Type localVarReturnType = new TypeToken<UserGroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get user group information (asynchronously)
     * Get user group information
     * @param groupId Group ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call usergroupsGroupIdGetAsync(Long groupId, final ApiCallback<UserGroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = usergroupsGroupIdGetValidateBeforeCall(groupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserGroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for usergroupsGroupIdPut
     * @param groupId Group ID (required)
     * @param usergroup  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call usergroupsGroupIdPutCall(Long groupId, UserGroup usergroup, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = usergroup;

        // create path and map variables
        String localVarPath = "/usergroups/{group_id}"
            .replaceAll("\\{" + "group_id" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call usergroupsGroupIdPutValidateBeforeCall(Long groupId, UserGroup usergroup, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling usergroupsGroupIdPut(Async)");
        }
        

        com.squareup.okhttp.Call call = usergroupsGroupIdPutCall(groupId, usergroup, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update group information
     * Update user group information
     * @param groupId Group ID (required)
     * @param usergroup  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void usergroupsGroupIdPut(Long groupId, UserGroup usergroup) throws ApiException {
        usergroupsGroupIdPutWithHttpInfo(groupId, usergroup);
    }

    /**
     * Update group information
     * Update user group information
     * @param groupId Group ID (required)
     * @param usergroup  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> usergroupsGroupIdPutWithHttpInfo(Long groupId, UserGroup usergroup) throws ApiException {
        com.squareup.okhttp.Call call = usergroupsGroupIdPutValidateBeforeCall(groupId, usergroup, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update group information (asynchronously)
     * Update user group information
     * @param groupId Group ID (required)
     * @param usergroup  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call usergroupsGroupIdPutAsync(Long groupId, UserGroup usergroup, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = usergroupsGroupIdPutValidateBeforeCall(groupId, usergroup, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for usergroupsPost
     * @param usergroup  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call usergroupsPostCall(UserGroup usergroup, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = usergroup;

        // create path and map variables
        String localVarPath = "/usergroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call usergroupsPostValidateBeforeCall(UserGroup usergroup, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = usergroupsPostCall(usergroup, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create user group
     * Create user group information
     * @param usergroup  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void usergroupsPost(UserGroup usergroup) throws ApiException {
        usergroupsPostWithHttpInfo(usergroup);
    }

    /**
     * Create user group
     * Create user group information
     * @param usergroup  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> usergroupsPostWithHttpInfo(UserGroup usergroup) throws ApiException {
        com.squareup.okhttp.Call call = usergroupsPostValidateBeforeCall(usergroup, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create user group (asynchronously)
     * Create user group information
     * @param usergroup  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call usergroupsPostAsync(UserGroup usergroup, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = usergroupsPostValidateBeforeCall(usergroup, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for usersCurrentGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call usersCurrentGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/current";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call usersCurrentGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = usersCurrentGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get current user info.
     * This endpoint is to get the current user information. 
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public User usersCurrentGet() throws ApiException {
        ApiResponse<User> resp = usersCurrentGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get current user info.
     * This endpoint is to get the current user information. 
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<User> usersCurrentGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = usersCurrentGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get current user info. (asynchronously)
     * This endpoint is to get the current user information. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call usersCurrentGetAsync(final ApiCallback<User> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = usersCurrentGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for usersCurrentPermissionsGet
     * @param scope Get permissions of the scope (optional)
     * @param relative If true, the resources in the response are relative to the scope, eg for resource &#39;/project/1/repository&#39; if relative is &#39;true&#39; then the resource in response will be &#39;repository&#39;.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call usersCurrentPermissionsGetCall(String scope, Boolean relative, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/current/permissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));
        if (relative != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("relative", relative));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call usersCurrentPermissionsGetValidateBeforeCall(String scope, Boolean relative, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = usersCurrentPermissionsGetCall(scope, relative, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get current user permissions.
     * This endpoint is to get the current user permissions. 
     * @param scope Get permissions of the scope (optional)
     * @param relative If true, the resources in the response are relative to the scope, eg for resource &#39;/project/1/repository&#39; if relative is &#39;true&#39; then the resource in response will be &#39;repository&#39;.  (optional)
     * @return List&lt;Permission&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Permission> usersCurrentPermissionsGet(String scope, Boolean relative) throws ApiException {
        ApiResponse<List<Permission>> resp = usersCurrentPermissionsGetWithHttpInfo(scope, relative);
        return resp.getData();
    }

    /**
     * Get current user permissions.
     * This endpoint is to get the current user permissions. 
     * @param scope Get permissions of the scope (optional)
     * @param relative If true, the resources in the response are relative to the scope, eg for resource &#39;/project/1/repository&#39; if relative is &#39;true&#39; then the resource in response will be &#39;repository&#39;.  (optional)
     * @return ApiResponse&lt;List&lt;Permission&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Permission>> usersCurrentPermissionsGetWithHttpInfo(String scope, Boolean relative) throws ApiException {
        com.squareup.okhttp.Call call = usersCurrentPermissionsGetValidateBeforeCall(scope, relative, null, null);
        Type localVarReturnType = new TypeToken<List<Permission>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get current user permissions. (asynchronously)
     * This endpoint is to get the current user permissions. 
     * @param scope Get permissions of the scope (optional)
     * @param relative If true, the resources in the response are relative to the scope, eg for resource &#39;/project/1/repository&#39; if relative is &#39;true&#39; then the resource in response will be &#39;repository&#39;.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call usersCurrentPermissionsGetAsync(String scope, Boolean relative, final ApiCallback<List<Permission>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = usersCurrentPermissionsGetValidateBeforeCall(scope, relative, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Permission>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for usersGet
     * @param username Username for filtering results. (optional)
     * @param email Email for filtering results. (optional)
     * @param page The page number, default is 1. (optional)
     * @param pageSize The size of per page. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call usersGetCall(String username, String email, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("username", username));
        if (email != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("email", email));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call usersGetValidateBeforeCall(String username, String email, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = usersGetCall(username, email, page, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get registered users of Harbor.
     * This endpoint is for user to search registered users, support for filtering results with username.Notice, by now this operation is only for administrator. 
     * @param username Username for filtering results. (optional)
     * @param email Email for filtering results. (optional)
     * @param page The page number, default is 1. (optional)
     * @param pageSize The size of per page. (optional)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<User> usersGet(String username, String email, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<List<User>> resp = usersGetWithHttpInfo(username, email, page, pageSize);
        return resp.getData();
    }

    /**
     * Get registered users of Harbor.
     * This endpoint is for user to search registered users, support for filtering results with username.Notice, by now this operation is only for administrator. 
     * @param username Username for filtering results. (optional)
     * @param email Email for filtering results. (optional)
     * @param page The page number, default is 1. (optional)
     * @param pageSize The size of per page. (optional)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<User>> usersGetWithHttpInfo(String username, String email, Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = usersGetValidateBeforeCall(username, email, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get registered users of Harbor. (asynchronously)
     * This endpoint is for user to search registered users, support for filtering results with username.Notice, by now this operation is only for administrator. 
     * @param username Username for filtering results. (optional)
     * @param email Email for filtering results. (optional)
     * @param page The page number, default is 1. (optional)
     * @param pageSize The size of per page. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call usersGetAsync(String username, String email, Integer page, Integer pageSize, final ApiCallback<List<User>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = usersGetValidateBeforeCall(username, email, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for usersPost
     * @param user New created user. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call usersPostCall(User user, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call usersPostValidateBeforeCall(User user, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling usersPost(Async)");
        }
        

        com.squareup.okhttp.Call call = usersPostCall(user, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a new user account.
     * This endpoint is to create a user if the user does not already exist. 
     * @param user New created user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void usersPost(User user) throws ApiException {
        usersPostWithHttpInfo(user);
    }

    /**
     * Creates a new user account.
     * This endpoint is to create a user if the user does not already exist. 
     * @param user New created user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> usersPostWithHttpInfo(User user) throws ApiException {
        com.squareup.okhttp.Call call = usersPostValidateBeforeCall(user, null, null);
        return apiClient.execute(call);
    }

    /**
     * Creates a new user account. (asynchronously)
     * This endpoint is to create a user if the user does not already exist. 
     * @param user New created user. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call usersPostAsync(User user, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = usersPostValidateBeforeCall(user, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for usersSearchGet
     * @param username Username for filtering results. (required)
     * @param page The page number, default is 1. (optional)
     * @param pageSize The size of per page. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call usersSearchGetCall(String username, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("username", username));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call usersSearchGetValidateBeforeCall(String username, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling usersSearchGet(Async)");
        }
        

        com.squareup.okhttp.Call call = usersSearchGetCall(username, page, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search users by username
     * This endpoint is to search the users by username. 
     * @param username Username for filtering results. (required)
     * @param page The page number, default is 1. (optional)
     * @param pageSize The size of per page. (optional)
     * @return List&lt;UserSearch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<UserSearch> usersSearchGet(String username, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<List<UserSearch>> resp = usersSearchGetWithHttpInfo(username, page, pageSize);
        return resp.getData();
    }

    /**
     * Search users by username
     * This endpoint is to search the users by username. 
     * @param username Username for filtering results. (required)
     * @param page The page number, default is 1. (optional)
     * @param pageSize The size of per page. (optional)
     * @return ApiResponse&lt;List&lt;UserSearch&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<UserSearch>> usersSearchGetWithHttpInfo(String username, Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = usersSearchGetValidateBeforeCall(username, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<List<UserSearch>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search users by username (asynchronously)
     * This endpoint is to search the users by username. 
     * @param username Username for filtering results. (required)
     * @param page The page number, default is 1. (optional)
     * @param pageSize The size of per page. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call usersSearchGetAsync(String username, Integer page, Integer pageSize, final ApiCallback<List<UserSearch>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = usersSearchGetValidateBeforeCall(username, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<UserSearch>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for usersUserIdCliSecretPut
     * @param userId User ID (required)
     * @param inputSecret JSON object that includes the new secret (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call usersUserIdCliSecretPutCall(Integer userId, InputSecret inputSecret, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = inputSecret;

        // create path and map variables
        String localVarPath = "/users/{user_id}/cli_secret"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call usersUserIdCliSecretPutValidateBeforeCall(Integer userId, InputSecret inputSecret, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersUserIdCliSecretPut(Async)");
        }
        
        // verify the required parameter 'inputSecret' is set
        if (inputSecret == null) {
            throw new ApiException("Missing the required parameter 'inputSecret' when calling usersUserIdCliSecretPut(Async)");
        }
        

        com.squareup.okhttp.Call call = usersUserIdCliSecretPutCall(userId, inputSecret, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Set CLI secret for a user.
     * This endpoint let user generate a new CLI secret for himself.  This API only works when auth mode is set to &#39;OIDC&#39;. Once this API returns with successful status, the old secret will be invalid, as there will be only one CLI secret for a user. 
     * @param userId User ID (required)
     * @param inputSecret JSON object that includes the new secret (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void usersUserIdCliSecretPut(Integer userId, InputSecret inputSecret) throws ApiException {
        usersUserIdCliSecretPutWithHttpInfo(userId, inputSecret);
    }

    /**
     * Set CLI secret for a user.
     * This endpoint let user generate a new CLI secret for himself.  This API only works when auth mode is set to &#39;OIDC&#39;. Once this API returns with successful status, the old secret will be invalid, as there will be only one CLI secret for a user. 
     * @param userId User ID (required)
     * @param inputSecret JSON object that includes the new secret (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> usersUserIdCliSecretPutWithHttpInfo(Integer userId, InputSecret inputSecret) throws ApiException {
        com.squareup.okhttp.Call call = usersUserIdCliSecretPutValidateBeforeCall(userId, inputSecret, null, null);
        return apiClient.execute(call);
    }

    /**
     * Set CLI secret for a user. (asynchronously)
     * This endpoint let user generate a new CLI secret for himself.  This API only works when auth mode is set to &#39;OIDC&#39;. Once this API returns with successful status, the old secret will be invalid, as there will be only one CLI secret for a user. 
     * @param userId User ID (required)
     * @param inputSecret JSON object that includes the new secret (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call usersUserIdCliSecretPutAsync(Integer userId, InputSecret inputSecret, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = usersUserIdCliSecretPutValidateBeforeCall(userId, inputSecret, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for usersUserIdDelete
     * @param userId User ID for marking as to be removed. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call usersUserIdDeleteCall(Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call usersUserIdDeleteValidateBeforeCall(Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersUserIdDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = usersUserIdDeleteCall(userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Mark a registered user as be removed.
     * This endpoint let administrator of Harbor mark a registered user as be removed.It actually won&#39;t be deleted from DB. 
     * @param userId User ID for marking as to be removed. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void usersUserIdDelete(Integer userId) throws ApiException {
        usersUserIdDeleteWithHttpInfo(userId);
    }

    /**
     * Mark a registered user as be removed.
     * This endpoint let administrator of Harbor mark a registered user as be removed.It actually won&#39;t be deleted from DB. 
     * @param userId User ID for marking as to be removed. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> usersUserIdDeleteWithHttpInfo(Integer userId) throws ApiException {
        com.squareup.okhttp.Call call = usersUserIdDeleteValidateBeforeCall(userId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Mark a registered user as be removed. (asynchronously)
     * This endpoint let administrator of Harbor mark a registered user as be removed.It actually won&#39;t be deleted from DB. 
     * @param userId User ID for marking as to be removed. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call usersUserIdDeleteAsync(Integer userId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = usersUserIdDeleteValidateBeforeCall(userId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for usersUserIdGet
     * @param userId Registered user ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call usersUserIdGetCall(Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call usersUserIdGetValidateBeforeCall(Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersUserIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = usersUserIdGetCall(userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a user&#39;s profile.
     * Get user&#39;s profile with user id. 
     * @param userId Registered user ID (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public User usersUserIdGet(Integer userId) throws ApiException {
        ApiResponse<User> resp = usersUserIdGetWithHttpInfo(userId);
        return resp.getData();
    }

    /**
     * Get a user&#39;s profile.
     * Get user&#39;s profile with user id. 
     * @param userId Registered user ID (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<User> usersUserIdGetWithHttpInfo(Integer userId) throws ApiException {
        com.squareup.okhttp.Call call = usersUserIdGetValidateBeforeCall(userId, null, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a user&#39;s profile. (asynchronously)
     * Get user&#39;s profile with user id. 
     * @param userId Registered user ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call usersUserIdGetAsync(Integer userId, final ApiCallback<User> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = usersUserIdGetValidateBeforeCall(userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for usersUserIdPasswordPut
     * @param userId Registered user ID. (required)
     * @param password Password to be updated, the attribute &#39;old_password&#39; is optional when the API is called by the system administrator. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call usersUserIdPasswordPutCall(Integer userId, Password password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = password;

        // create path and map variables
        String localVarPath = "/users/{user_id}/password"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call usersUserIdPasswordPutValidateBeforeCall(Integer userId, Password password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersUserIdPasswordPut(Async)");
        }
        
        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling usersUserIdPasswordPut(Async)");
        }
        

        com.squareup.okhttp.Call call = usersUserIdPasswordPutCall(userId, password, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Change the password on a user that already exists.
     * This endpoint is for user to update password. Users with the admin role can change any user&#39;s password. Guest users can change only their own password. 
     * @param userId Registered user ID. (required)
     * @param password Password to be updated, the attribute &#39;old_password&#39; is optional when the API is called by the system administrator. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void usersUserIdPasswordPut(Integer userId, Password password) throws ApiException {
        usersUserIdPasswordPutWithHttpInfo(userId, password);
    }

    /**
     * Change the password on a user that already exists.
     * This endpoint is for user to update password. Users with the admin role can change any user&#39;s password. Guest users can change only their own password. 
     * @param userId Registered user ID. (required)
     * @param password Password to be updated, the attribute &#39;old_password&#39; is optional when the API is called by the system administrator. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> usersUserIdPasswordPutWithHttpInfo(Integer userId, Password password) throws ApiException {
        com.squareup.okhttp.Call call = usersUserIdPasswordPutValidateBeforeCall(userId, password, null, null);
        return apiClient.execute(call);
    }

    /**
     * Change the password on a user that already exists. (asynchronously)
     * This endpoint is for user to update password. Users with the admin role can change any user&#39;s password. Guest users can change only their own password. 
     * @param userId Registered user ID. (required)
     * @param password Password to be updated, the attribute &#39;old_password&#39; is optional when the API is called by the system administrator. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call usersUserIdPasswordPutAsync(Integer userId, Password password, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = usersUserIdPasswordPutValidateBeforeCall(userId, password, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for usersUserIdPut
     * @param userId Registered user ID (required)
     * @param profile Only email, realname and comment can be modified. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call usersUserIdPutCall(Integer userId, UserProfile profile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = profile;

        // create path and map variables
        String localVarPath = "/users/{user_id}"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call usersUserIdPutValidateBeforeCall(Integer userId, UserProfile profile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersUserIdPut(Async)");
        }
        
        // verify the required parameter 'profile' is set
        if (profile == null) {
            throw new ApiException("Missing the required parameter 'profile' when calling usersUserIdPut(Async)");
        }
        

        com.squareup.okhttp.Call call = usersUserIdPutCall(userId, profile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a registered user to change his profile.
     * This endpoint let a registered user change his profile. 
     * @param userId Registered user ID (required)
     * @param profile Only email, realname and comment can be modified. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void usersUserIdPut(Integer userId, UserProfile profile) throws ApiException {
        usersUserIdPutWithHttpInfo(userId, profile);
    }

    /**
     * Update a registered user to change his profile.
     * This endpoint let a registered user change his profile. 
     * @param userId Registered user ID (required)
     * @param profile Only email, realname and comment can be modified. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> usersUserIdPutWithHttpInfo(Integer userId, UserProfile profile) throws ApiException {
        com.squareup.okhttp.Call call = usersUserIdPutValidateBeforeCall(userId, profile, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a registered user to change his profile. (asynchronously)
     * This endpoint let a registered user change his profile. 
     * @param userId Registered user ID (required)
     * @param profile Only email, realname and comment can be modified. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call usersUserIdPutAsync(Integer userId, UserProfile profile, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = usersUserIdPutValidateBeforeCall(userId, profile, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for usersUserIdSysadminPut
     * @param userId Registered user ID (required)
     * @param hasAdminRole Toggle a user to admin or not. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call usersUserIdSysadminPutCall(Integer userId, HasAdminRole hasAdminRole, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = hasAdminRole;

        // create path and map variables
        String localVarPath = "/users/{user_id}/sysadmin"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call usersUserIdSysadminPutValidateBeforeCall(Integer userId, HasAdminRole hasAdminRole, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling usersUserIdSysadminPut(Async)");
        }
        
        // verify the required parameter 'hasAdminRole' is set
        if (hasAdminRole == null) {
            throw new ApiException("Missing the required parameter 'hasAdminRole' when calling usersUserIdSysadminPut(Async)");
        }
        

        com.squareup.okhttp.Call call = usersUserIdSysadminPutCall(userId, hasAdminRole, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a registered user to change to be an administrator of Harbor.
     * This endpoint let a registered user change to be an administrator of Harbor. 
     * @param userId Registered user ID (required)
     * @param hasAdminRole Toggle a user to admin or not. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void usersUserIdSysadminPut(Integer userId, HasAdminRole hasAdminRole) throws ApiException {
        usersUserIdSysadminPutWithHttpInfo(userId, hasAdminRole);
    }

    /**
     * Update a registered user to change to be an administrator of Harbor.
     * This endpoint let a registered user change to be an administrator of Harbor. 
     * @param userId Registered user ID (required)
     * @param hasAdminRole Toggle a user to admin or not. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> usersUserIdSysadminPutWithHttpInfo(Integer userId, HasAdminRole hasAdminRole) throws ApiException {
        com.squareup.okhttp.Call call = usersUserIdSysadminPutValidateBeforeCall(userId, hasAdminRole, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a registered user to change to be an administrator of Harbor. (asynchronously)
     * This endpoint let a registered user change to be an administrator of Harbor. 
     * @param userId Registered user ID (required)
     * @param hasAdminRole Toggle a user to admin or not. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call usersUserIdSysadminPutAsync(Integer userId, HasAdminRole hasAdminRole, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = usersUserIdSysadminPutValidateBeforeCall(userId, hasAdminRole, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
