/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 1.10.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.kathra.harbor.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Stats provides the overall progress of the scan all process.
 */
@ApiModel(description = "Stats provides the overall progress of the scan all process.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-20T18:34:04.523Z")
public class Stats {
  @SerializedName("total")
  private Integer total = null;

  @SerializedName("completed")
  private Integer completed = null;

  @SerializedName("requester")
  private String requester = null;

  @SerializedName("metrics")
  private Map<String, Integer> metrics = null;

  public Stats total(Integer total) {
    this.total = total;
    return this;
  }

   /**
   * The total number of scan processes triggered by the scan all action
   * @return total
  **/
  @ApiModelProperty(example = "100", value = "The total number of scan processes triggered by the scan all action")
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }

  public Stats completed(Integer completed) {
    this.completed = completed;
    return this;
  }

   /**
   * The number of the finished scan processes triggered by the scan all action
   * @return completed
  **/
  @ApiModelProperty(example = "90", value = "The number of the finished scan processes triggered by the scan all action")
  public Integer getCompleted() {
    return completed;
  }

  public void setCompleted(Integer completed) {
    this.completed = completed;
  }

  public Stats requester(String requester) {
    this.requester = requester;
    return this;
  }

   /**
   * The requester identity which usually uses the ID of the scan all job
   * @return requester
  **/
  @ApiModelProperty(example = "28", value = "The requester identity which usually uses the ID of the scan all job")
  public String getRequester() {
    return requester;
  }

  public void setRequester(String requester) {
    this.requester = requester;
  }

  public Stats metrics(Map<String, Integer> metrics) {
    this.metrics = metrics;
    return this;
  }

  public Stats putMetricsItem(String key, Integer metricsItem) {
    if (this.metrics == null) {
      this.metrics = new HashMap<String, Integer>();
    }
    this.metrics.put(key, metricsItem);
    return this;
  }

   /**
   * The metrics data for the each status
   * @return metrics
  **/
  @ApiModelProperty(example = "{\"Success\":5,\"Error\":\"2,\",\"Running\":3}", value = "The metrics data for the each status")
  public Map<String, Integer> getMetrics() {
    return metrics;
  }

  public void setMetrics(Map<String, Integer> metrics) {
    this.metrics = metrics;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Stats stats = (Stats) o;
    return Objects.equals(this.total, stats.total) &&
        Objects.equals(this.completed, stats.completed) &&
        Objects.equals(this.requester, stats.requester) &&
        Objects.equals(this.metrics, stats.metrics);
  }

  @Override
  public int hashCode() {
    return Objects.hash(total, completed, requester, metrics);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Stats {\n");
    
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
    sb.append("    requester: ").append(toIndentedString(requester)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

